/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_NSEVENT_HEADER
#define SHIMMER_C_OCOA_NSEVENT_HEADER

typedef void*	nsevent_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			nsevent_copy( nsevent_t object );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			nsevent_copyWithZone( nsevent_t object, _NSZone* arg0 );

// Signature from Objective-C Runtime: v dealloc @ :
void 				nsevent_dealloc( nsevent_t object );

// Signature from Objective-C Runtime: c isEqual: @ : @
char 				nsevent_isEqual( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			nsevent_description( nsevent_t object );

// Signature from Objective-C Runtime: v encodeWithCoder: @ : @
void 				nsevent_encodeWithCoder( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initWithCoder: @ : @
nsobject_t 			nsevent_initWithCoder( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q type @ :
unsigned long long 	nsevent_type( nsevent_t object );

// Signature from Objective-C Runtime: s subtype @ :
short 				nsevent_subtype( nsevent_t object );

// Signature from Objective-C Runtime: ^v userData @ :
void* 				nsevent_userData( nsevent_t object );

// Signature from Objective-C Runtime: @ window @ :
nsobject_t 			nsevent_window( nsevent_t object );

// Signature from Objective-C Runtime: f rotation @ :
float 				nsevent_rotation( nsevent_t object );

// Signature from Objective-C Runtime: Q uniqueID @ :
unsigned long long 	nsevent_uniqueID( nsevent_t object );

// Signature from Objective-C Runtime: d progress @ :
double 				nsevent_progress( nsevent_t object );

// Signature from Objective-C Runtime: @ characters @ :
nsobject_t 			nsevent_characters( nsevent_t object );

// Signature from Objective-C Runtime: @ context @ :
nsobject_t 			nsevent_context( nsevent_t object );

// Signature from Objective-C Runtime: d timestamp @ :
double 				nsevent_timestamp( nsevent_t object );

// Signature from Objective-C Runtime: @ charactersIgnoringModifiers @ :
nsobject_t 			nsevent_charactersIgnoringModifiers( nsevent_t object );

// Signature from Objective-C Runtime: Q deviceID @ :
unsigned long long 	nsevent_deviceID( nsevent_t object );

// Signature from Objective-C Runtime: q windowNumber @ :
long long 			nsevent_windowNumber( nsevent_t object );

// Signature from Objective-C Runtime: d deltaX @ :
double 				nsevent_deltaX( nsevent_t object );

// Signature from Objective-C Runtime: d deltaY @ :
double 				nsevent_deltaY( nsevent_t object );

// Signature from Objective-C Runtime: f pressure @ :
float 				nsevent_pressure( nsevent_t object );

// Signature from Objective-C Runtime: q stage @ :
long long 			nsevent_stage( nsevent_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} locationInWindow @ :
CGPoint 			nsevent_locationInWindow( nsevent_t object );

// Signature from Objective-C Runtime: Q phase @ :
unsigned long long 	nsevent_phase( nsevent_t object );

// Signature from Objective-C Runtime: Q modifierFlags @ :
unsigned long long 	nsevent_modifierFlags( nsevent_t object );

// Signature from Objective-C Runtime: @ touchesMatchingPhase:inView: @ : Q @
nsobject_t 			nsevent_touchesMatchingPhase( nsevent_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ allTouches @ :
nsobject_t 			nsevent_allTouches( nsevent_t object );

// Signature from Objective-C Runtime: ^{__CGEvent=} CGEvent @ :
__CGEvent* 			nsevent_CGEvent( nsevent_t object );

// Signature from Objective-C Runtime: q data1 @ :
long long 			nsevent_data1( nsevent_t object );

// Signature from Objective-C Runtime: q data2 @ :
long long 			nsevent_data2( nsevent_t object );

// Signature from Objective-C Runtime: d scrollingDeltaX @ :
double 				nsevent_scrollingDeltaX( nsevent_t object );

// Signature from Objective-C Runtime: q clickCount @ :
long long 			nsevent_clickCount( nsevent_t object );

// Signature from Objective-C Runtime: Q momentumPhase @ :
unsigned long long 	nsevent_momentumPhase( nsevent_t object );

// Signature from Objective-C Runtime: d scrollingDeltaY @ :
double 				nsevent_scrollingDeltaY( nsevent_t object );

// Signature from Objective-C Runtime: q gestureAxis @ :
long long 			nsevent_gestureAxis( nsevent_t object );

// Signature from Objective-C Runtime: Q associatedEventsMask @ :
unsigned long long 	nsevent_associatedEventsMask( nsevent_t object );

// Signature from Objective-C Runtime: S keyCode @ :
unsigned short 		nsevent_keyCode( nsevent_t object );

// Signature from Objective-C Runtime: q eventNumber @ :
long long 			nsevent_eventNumber( nsevent_t object );

// Signature from Objective-C Runtime: @ trackingArea @ :
nsobject_t 			nsevent_trackingArea( nsevent_t object );

// Signature from Objective-C Runtime: d magnification @ :
double 				nsevent_magnification( nsevent_t object );

// Signature from Objective-C Runtime: Q buttonMask @ :
unsigned long long 	nsevent_buttonMask( nsevent_t object );

// Signature from Objective-C Runtime: q trackingNumber @ :
long long 			nsevent_trackingNumber( nsevent_t object );

// Signature from Objective-C Runtime: c hasPreciseScrollingDeltas @ :
char 				nsevent_hasPreciseScrollingDeltas( nsevent_t object );

// Signature from Objective-C Runtime: {CGSize=dd} velocity @ :
CGSize 				nsevent_velocity( nsevent_t object );

// Signature from Objective-C Runtime: q pressureBehavior @ :
long long 			nsevent_pressureBehavior( nsevent_t object );

// Signature from Objective-C Runtime: q buttonNumber @ :
long long 			nsevent_buttonNumber( nsevent_t object );

// Signature from Objective-C Runtime: @ vendorDefined @ :
nsobject_t 			nsevent_vendorDefined( nsevent_t object );

// Signature from Objective-C Runtime: q absoluteX @ :
long long 			nsevent_absoluteX( nsevent_t object );

// Signature from Objective-C Runtime: q absoluteY @ :
long long 			nsevent_absoluteY( nsevent_t object );

// Signature from Objective-C Runtime: q absoluteZ @ :
long long 			nsevent_absoluteZ( nsevent_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} tilt @ :
CGPoint 			nsevent_tilt( nsevent_t object );

// Signature from Objective-C Runtime: f tangentialPressure @ :
float 				nsevent_tangentialPressure( nsevent_t object );

// Signature from Objective-C Runtime: Q vendorID @ :
unsigned long long 	nsevent_vendorID( nsevent_t object );

// Signature from Objective-C Runtime: Q tabletID @ :
unsigned long long 	nsevent_tabletID( nsevent_t object );

// Signature from Objective-C Runtime: Q pointingDeviceID @ :
unsigned long long 	nsevent_pointingDeviceID( nsevent_t object );

// Signature from Objective-C Runtime: Q systemTabletID @ :
unsigned long long 	nsevent_systemTabletID( nsevent_t object );

// Signature from Objective-C Runtime: Q vendorPointingDeviceType @ :
unsigned long long 	nsevent_vendorPointingDeviceType( nsevent_t object );

// Signature from Objective-C Runtime: Q pointingDeviceSerialNumber @ :
unsigned long long 	nsevent_pointingDeviceSerialNumber( nsevent_t object );

// Signature from Objective-C Runtime: Q capabilityMask @ :
unsigned long long 	nsevent_capabilityMask( nsevent_t object );

// Signature from Objective-C Runtime: Q pointingDeviceType @ :
unsigned long long 	nsevent_pointingDeviceType( nsevent_t object );

// Signature from Objective-C Runtime: c isEnteringProximity @ :
char 				nsevent_isEnteringProximity( nsevent_t object );

// Signature from Objective-C Runtime: d deltaZ @ :
double 				nsevent_deltaZ( nsevent_t object );

// Signature from Objective-C Runtime: d gestureAmount @ :
double 				nsevent_gestureAmount( nsevent_t object );

// Signature from Objective-C Runtime: c isARepeat @ :
char 				nsevent_isARepeat( nsevent_t object );

// Signature from Objective-C Runtime: r^v eventRef @ :
void* 				nsevent_eventRef( nsevent_t object );

// Signature from Objective-C Runtime: @ charactersByApplyingModifiers: @ : Q
nsobject_t 			nsevent_charactersByApplyingModifiers( nsevent_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: c isGesture @ :
char 				nsevent_isGesture( nsevent_t object );

// Signature from Objective-C Runtime: d deviceDeltaX @ :
double 				nsevent_deviceDeltaX( nsevent_t object );

// Signature from Objective-C Runtime: d deviceDeltaY @ :
double 				nsevent_deviceDeltaY( nsevent_t object );

// Signature from Objective-C Runtime: d deviceDeltaZ @ :
double 				nsevent_deviceDeltaZ( nsevent_t object );

// Signature from Objective-C Runtime: c isDirectionInvertedFromDevice @ :
char 				nsevent_isDirectionInvertedFromDevice( nsevent_t object );

// Signature from Objective-C Runtime: d stageTransition @ :
double 				nsevent_stageTransition( nsevent_t object );

// Signature from Objective-C Runtime: v trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler: @ : Q d d @?
void 				nsevent_trackSwipeEventWithOptions( nsevent_t object, unsigned long long arg0, double arg1, double arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: @ touchesForView: @ : @
nsobject_t 			nsevent_touchesForView( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ coalescedTouchesForTouch: @ : @
nsobject_t 			nsevent_coalescedTouchesForTouch( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q command @ :
long long 			nsevent_command( nsevent_t object );

// Signature from Objective-C Runtime: @ accessibilityOverriddenAttributes @ :
nsobject_t 			nsevent_accessibilityOverriddenAttributes( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilityReplaceRange:withText: @ : {_NSRange=QQ} @
char 				nsevent_accessibilityReplaceRange( nsevent_t object, _NSRange arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: d accessibilityVisibleArea @ :
double 				nsevent_accessibilityVisibleArea( nsevent_t object );

// Signature from Objective-C Runtime: Q accessibilityArrayAttributeCount: @ : @
unsigned long long 	nsevent_accessibilityArrayAttributeCount( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q accessibilityIndexOfChild: @ : @
unsigned long long 	nsevent_accessibilityIndexOfChild( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityArrayAttributeValues:index:maxCount: @ : @ Q Q
nsobject_t 			nsevent_accessibilityArrayAttributeValues( nsevent_t object, nsobject_t arg0, unsigned long long arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: @ accessibilityParameterizedAttributeNames @ :
nsobject_t 			nsevent_accessibilityParameterizedAttributeNames( nsevent_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributeValue:forParameter: @ : @ @
nsobject_t 			nsevent_accessibilityAttributeValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ accessibilityIndexForChildUIElementAttributeForParameter: @ : @
nsobject_t 			nsevent_accessibilityIndexForChildUIElementAttributeForParameter( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityAttributedValueForStringAttributeAttributeForParameter: @ : @
nsobject_t 			nsevent_accessibilityAttributedValueForStringAttributeAttributeForParameter( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTemporaryChildren @ :
nsobject_t 			nsevent_accessibilityTemporaryChildren( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilityPerformShowMenuOfChild: @ : @
char 				nsevent_accessibilityPerformShowMenuOfChild( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: i accessibilityPresenterProcessIdentifier @ :
int 				nsevent_accessibilityPresenterProcessIdentifier( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilityShouldUseUniqueId @ :
char 				nsevent_accessibilityShouldUseUniqueId( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilitySupportsNotifications @ :
char 				nsevent_accessibilitySupportsNotifications( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilityShouldSendNotification: @ : @
char 				nsevent_accessibilityShouldSendNotification( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilitySupportsOverriddenAttributes @ :
char 				nsevent_accessibilitySupportsOverriddenAttributes( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilityAllowsOverriddenAttributesWhenIgnored @ :
char 				nsevent_accessibilityAllowsOverriddenAttributesWhenIgnored( nsevent_t object );

// Signature from Objective-C Runtime: c accessibilitySetOverrideValue:forAttribute: @ : @ @
char 				nsevent_accessibilitySetOverrideValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v accessibilityEncodeOverriddenAttributes: @ : @
void 				nsevent_accessibilityEncodeOverriddenAttributes( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityDecodeOverriddenAttributes: @ : @
void 				nsevent_accessibilityDecodeOverriddenAttributes( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilitySupportsCustomElementData @ :
char 				nsevent_accessibilitySupportsCustomElementData( nsevent_t object );

// Signature from Objective-C Runtime: v bind:toObject:withKeyPath:options: @ : @ @ @ @
void 				nsevent_bind( nsevent_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				nsevent_awakeFromNib( nsevent_t object );

// Signature from Objective-C Runtime: @ userInterfaceItemIdentifier @ :
nsobject_t 			nsevent_userInterfaceItemIdentifier( nsevent_t object );

// Signature from Objective-C Runtime: v setUserInterfaceItemIdentifier: @ : @
void 				nsevent_setUserInterfaceItemIdentifier( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unbind: @ : @
void 				nsevent_unbind( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # valueClassForBinding: @ : @
nsclass_t 			nsevent_valueClassForBinding( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NS_observationForKeyPath:options:block: @ : @ Q @?
nsobject_t 			nsevent_NS_observationForKeyPath( nsevent_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ NS_observationForKeyPaths:options:block: @ : @ Q @?
nsobject_t 			nsevent_NS_observationForKeyPaths( nsevent_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ optionDescriptionsForBinding: @ : @
nsobject_t 			nsevent_optionDescriptionsForBinding( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ exposedBindings @ :
nsobject_t 			nsevent_exposedBindings( nsevent_t object );

// Signature from Objective-C Runtime: @ infoForBinding: @ : @
nsobject_t 			nsevent_infoForBinding( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				nsevent_prepareForInterfaceBuilder( nsevent_t object );

// Signature from Objective-C Runtime: v accessibilityAddTemporaryChild: @ : @
void 				nsevent_accessibilityAddTemporaryChild( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityRemoveTemporaryChild: @ : @
void 				nsevent_accessibilityRemoveTemporaryChild( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NSLifeguard_autorelease @ :
nsobject_t 			nsevent_NSLifeguard_autorelease( nsevent_t object );

// Signature from Objective-C Runtime: v accessibilitySetPresenterProcessIdentifier: @ : i
void 				nsevent_accessibilitySetPresenterProcessIdentifier( nsevent_t object, int arg0 );

// Signature from Objective-C Runtime: @ NS_tiledLayerVisibleRect @ :
nsobject_t 			nsevent_NS_tiledLayerVisibleRect( nsevent_t object );

// Signature from Objective-C Runtime: v NS_addTiledLayerDescendent: @ : @
void 				nsevent_NS_addTiledLayerDescendent( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v NS_removeTiledLayerDescendent: @ : @
void 				nsevent_NS_removeTiledLayerDescendent( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c CAMLTypeSupportedForKey: @ : @
char 				nsevent_CAMLTypeSupportedForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			nsevent_CAMLTypeForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c CA_validateValue:forKey: @ : @ @
char 				nsevent_CA_validateValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				nsevent_encodeWithCAMLWriter( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=dddddddddB}
nsobject_t 			nsevent_CA_interpolateValues( nsevent_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			nsevent_CAMLType( nsevent_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			nsevent_CA_archivingValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			nsevent_CA_roundToIntegerFromValue( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			nsevent_CA_addValue( nsevent_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			nsevent_CA_interpolateValue( nsevent_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				nsevent_CA_distanceToValue( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				nsevent_CA_prepareRenderValue( nsevent_t object );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}} CA_copyRenderValue @ :
Object* 			nsevent_CA_copyRenderValue( nsevent_t object );

// Signature from Objective-C Runtime: c supportsRBSXPCSecureCoding @ :
char 				nsevent_supportsRBSXPCSecureCoding( nsevent_t object );

// Signature from Objective-C Runtime: c RBSIsXPCObject @ :
char 				nsevent_RBSIsXPCObject( nsevent_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			nsevent_NSRepresentation( nsevent_t object );

// Signature from Objective-C Runtime: c supportsBSXPCSecureCoding @ :
char 				nsevent_supportsBSXPCSecureCoding( nsevent_t object );

// Signature from Objective-C Runtime: c bs_isPlistableType @ :
char 				nsevent_bs_isPlistableType( nsevent_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			nsevent_bs_secureEncoded( nsevent_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			nsevent_bs_encoded( nsevent_t object );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			nsevent_classForCoder( nsevent_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			nsevent_replacementObjectForCoder( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			nsevent_awakeAfterUsingCoder( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c implementsSelector: @ : :
char 				nsevent_implementsSelector( nsevent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				nsevent_setObservationInfo( nsevent_t object, void* arg0 );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				nsevent_setValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			nsevent_replacementObjectForPortCoder( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				nsevent_willChangeValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				nsevent_didChangeValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			nsevent_dictionaryWithValuesForKeys( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			nsevent_valueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			nsevent_valueForUndefinedKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			nsevent_classForKeyedArchiver( nsevent_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			nsevent_replacementObjectForKeyedArchiver( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			nsevent_valueForKeyPath( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserver: @ : @
nsobject_t 			nsevent_addObserver( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ objectSpecifier @ :
nsobject_t 			nsevent_objectSpecifier( nsevent_t object );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			nsevent_replacementObjectForArchiver( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			nsevent_classForArchiver( nsevent_t object );

// Signature from Objective-C Runtime: @ attributeKeys @ :
nsobject_t 			nsevent_attributeKeys( nsevent_t object );

// Signature from Objective-C Runtime: @ toOneRelationshipKeys @ :
nsobject_t 			nsevent_toOneRelationshipKeys( nsevent_t object );

// Signature from Objective-C Runtime: @ toManyRelationshipKeys @ :
nsobject_t 			nsevent_toManyRelationshipKeys( nsevent_t object );

// Signature from Objective-C Runtime: @ inverseForRelationshipKey: @ : @
nsobject_t 			nsevent_inverseForRelationshipKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ classDescription @ :
nsobject_t 			nsevent_classDescription( nsevent_t object );

// Signature from Objective-C Runtime: @ copyScriptingValue:forKey:withProperties: @ : @ @ @
nsobject_t 			nsevent_copyScriptingValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* nsevent_methodDescriptionForSelector( nsevent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ newScriptingObjectOfClass:forValueForKey:withContentsValue:properties: @ : # @ @ @
nsobject_t 			nsevent_newScriptingObjectOfClass( nsevent_t object, nsclass_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: @ handleQueryWithUnboundKey: @ : @
nsobject_t 			nsevent_handleQueryWithUnboundKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v handleTakeValue:forUnboundKey: @ : @ @
void 				nsevent_handleTakeValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ storedValueForKey: @ : @
nsobject_t 			nsevent_storedValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v takeStoredValue:forKey: @ : @ @
void 				nsevent_takeStoredValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v takeValue:forKey: @ : @ @
void 				nsevent_takeValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valuesForKeys: @ : @
nsobject_t 			nsevent_valuesForKeys( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v takeValuesFromDictionary: @ : @
void 				nsevent_takeValuesFromDictionary( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unableToSetNilForKey: @ : @
void 				nsevent_unableToSetNilForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ keyValueBindingForKey:typeMask: @ : @ Q
nsobject_t 			nsevent_keyValueBindingForKey( nsevent_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ createKeyValueBindingForKey:typeMask: @ : @ Q
nsobject_t 			nsevent_createKeyValueBindingForKey( nsevent_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			nsevent_mutableArrayValueForKeyPath( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			nsevent_mutableOrderedSetValueForKeyPath( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			nsevent_mutableSetValueForKeyPath( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				nsevent_removeObservation( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				nsevent_receiveObservedValue( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				nsevent_receiveObservedError( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				nsevent_finishObserving( nsevent_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				nsevent_setObservation( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				nsevent_observeValueForKeyPath( nsevent_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				nsevent_removeObserver( nsevent_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			nsevent_className( nsevent_t object );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			nsevent_addChainedObservers( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			nsevent_addObserverBlock( nsevent_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			nsevent_addObservationTransformer( nsevent_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				nsevent_setNilValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			nsevent_mutableArrayValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			nsevent_mutableOrderedSetValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			nsevent_mutableSetValueForKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				nsevent_setValuesForKeysWithDictionary( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				nsevent_willChange( nsevent_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				nsevent_didChange( nsevent_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				nsevent_observationInfo( nsevent_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			nsevent_autoContentAccessingProxy( nsevent_t object );

// Signature from Objective-C Runtime: @ coerceValue:forKey: @ : @ @
nsobject_t 			nsevent_coerceValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setScriptingProperties: @ : @
void 				nsevent_setScriptingProperties( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scriptingValueForSpecifier: @ : @
nsobject_t 			nsevent_scriptingValueForSpecifier( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scriptingProperties @ :
nsobject_t 			nsevent_scriptingProperties( nsevent_t object );

// Signature from Objective-C Runtime: @ coerceValueForScriptingProperties: @ : @
nsobject_t 			nsevent_coerceValueForScriptingProperties( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueAtIndex:inPropertyWithKey: @ : Q @
nsobject_t 			nsevent_valueAtIndex( nsevent_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valueWithName:inPropertyWithKey: @ : @ @
nsobject_t 			nsevent_valueWithName( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valueWithUniqueID:inPropertyWithKey: @ : @ @
nsobject_t 			nsevent_valueWithUniqueID( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v insertValue:atIndex:inPropertyWithKey: @ : @ Q @
void 				nsevent_insertValue( nsevent_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v replaceValueAtIndex:inPropertyWithKey:withValue: @ : Q @ @
void 				nsevent_replaceValueAtIndex( nsevent_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v removeValueAtIndex:fromPropertyWithKey: @ : Q @
void 				nsevent_removeValueAtIndex( nsevent_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			nsevent_classForPortCoder( nsevent_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				nsevent_performSelector( nsevent_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: I classCode @ :
unsigned int 		nsevent_classCode( nsevent_t object );

// Signature from Objective-C Runtime: c isEqualTo: @ : @
char 				nsevent_isEqualTo( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLessThanOrEqualTo: @ : @
char 				nsevent_isLessThanOrEqualTo( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLessThan: @ : @
char 				nsevent_isLessThan( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isGreaterThanOrEqualTo: @ : @
char 				nsevent_isGreaterThanOrEqualTo( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isGreaterThan: @ : @
char 				nsevent_isGreaterThan( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isNotEqualTo: @ : @
char 				nsevent_isNotEqualTo( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c doesContain: @ : @
char 				nsevent_doesContain( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLike: @ : @
char 				nsevent_isLike( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isCaseInsensitiveLike: @ : @
char 				nsevent_isCaseInsensitiveLike( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ c @
void 				nsevent_performSelectorOnMainThread( nsevent_t object, nsselector_t arg0, nsobject_t arg1, char arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				nsevent_performSelectorInBackground( nsevent_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ classDescriptionForDestinationKey: @ : @
nsobject_t 			nsevent_classDescriptionForDestinationKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ entityName @ :
nsobject_t 			nsevent_entityName( nsevent_t object );

// Signature from Objective-C Runtime: c ownsDestinationObjectsForRelationshipKey: @ : @
char 				nsevent_ownsDestinationObjectsForRelationshipKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isToManyKey: @ : @
char 				nsevent_isToManyKey( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeObject:fromPropertyWithKey: @ : @ @
void 				nsevent_removeObject( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v addObject:toPropertyWithKey: @ : @ @
void 				nsevent_addObject( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ validateTakeValue:forKeyPath: @ : @ @
nsobject_t 			nsevent_validateTakeValue( nsevent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ allPropertyKeys @ :
nsobject_t 			nsevent_allPropertyKeys( nsevent_t object );

// Signature from Objective-C Runtime: v clearProperties @ :
void 				nsevent_clearProperties( nsevent_t object );

// Signature from Objective-C Runtime: v flushKeyBindings @ :
void 				nsevent_flushKeyBindings( nsevent_t object );

// Signature from Objective-C Runtime: v takeStoredValuesFromDictionary: @ : @
void 				nsevent_takeStoredValuesFromDictionary( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isNSDate__ @ :
char 				nsevent_isNSDate__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSString__ @ :
char 				nsevent_isNSString__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSCFConstantString__ @ :
char 				nsevent_isNSCFConstantString__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSNumber__ @ :
char 				nsevent_isNSNumber__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSArray__ @ :
char 				nsevent_isNSArray__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSDictionary__ @ :
char 				nsevent_isNSDictionary__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSSet__ @ :
char 				nsevent_isNSSet__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSData__ @ :
char 				nsevent_isNSData__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSObject__ @ :
char 				nsevent_isNSObject__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSOrderedSet__ @ :
char 				nsevent_isNSOrderedSet__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSTimeZone__ @ :
char 				nsevent_isNSTimeZone__( nsevent_t object );

// Signature from Objective-C Runtime: c isNSValue__ @ :
char 				nsevent_isNSValue__( nsevent_t object );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				nsevent_doesNotRecognizeSelector( nsevent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			nsevent_methodSignatureForSelector( nsevent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			nsevent_retain( nsevent_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	nsevent_retainCount( nsevent_t object );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			nsevent_autorelease( nsevent_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				nsevent_finalize( nsevent_t object );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			nsevent_class( nsevent_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			nsevent_self( nsevent_t object );

// Signature from Objective-C Runtime: c isProxy @ :
char 				nsevent_isProxy( nsevent_t object );

// Signature from Objective-C Runtime: c isKindOfClass: @ : #
char 				nsevent_isKindOfClass( nsevent_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: c isMemberOfClass: @ : #
char 				nsevent_isMemberOfClass( nsevent_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: c conformsToProtocol: @ : @
char 				nsevent_conformsToProtocol( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c respondsToSelector: @ : :
char 				nsevent_respondsToSelector( nsevent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			nsevent_zone( nsevent_t object );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	nsevent_hash( nsevent_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			nsevent_superclass( nsevent_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			nsevent_debugDescription( nsevent_t object );

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			nsevent_init( nsevent_t object );

// Signature from Objective-C Runtime: c retainWeakReference @ :
char 				nsevent_retainWeakReference( nsevent_t object );

// Signature from Objective-C Runtime: c allowsWeakReference @ :
char 				nsevent_allowsWeakReference( nsevent_t object );

// Signature from Objective-C Runtime: c isFault @ :
char 				nsevent_isFault( nsevent_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				nsevent_forwardInvocation( nsevent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			nsevent_forwardingTargetForSelector( nsevent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			nsevent_mutableCopy( nsevent_t object );

// Signature from Objective-C Runtime: v initialize @ :
void 				nsevent_initialize( );

// Signature from Objective-C Runtime: @ mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure: @ : Q {CGPoint=dd} Q d q @ q q f
nsobject_t 			nsevent_mouseEventWithType( unsigned long long arg0, CGPoint arg1, unsigned long long arg2, double arg3, long long arg4, nsobject_t arg5, long long arg6, long long arg7, float arg8 );

// Signature from Objective-C Runtime: v removeMonitor: @ : @
void 				nsevent_removeMonitor( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addLocalMonitorForEventsMatchingMask:placement:handler: @ : Q q @?
nsobject_t 			nsevent_addLocalMonitorForEventsMatchingMask( unsigned long long arg0, long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: {CGPoint=dd} mouseLocation @ :
CGPoint 			nsevent_mouseLocation( );

// Signature from Objective-C Runtime: @ otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2: @ : Q {CGPoint=dd} Q d q @ s q q
nsobject_t 			nsevent_otherEventWithType( unsigned long long arg0, CGPoint arg1, unsigned long long arg2, double arg3, long long arg4, nsobject_t arg5, short arg6, long long arg7, long long arg8 );

// Signature from Objective-C Runtime: Q pressedMouseButtons @ :
unsigned long long 	nsevent_pressedMouseButtons( );

// Signature from Objective-C Runtime: @ keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode: @ : Q {CGPoint=dd} Q d q @ @ @ c S
nsobject_t 			nsevent_keyEventWithType( unsigned long long arg0, CGPoint arg1, unsigned long long arg2, double arg3, long long arg4, nsobject_t arg5, nsobject_t arg6, nsobject_t arg7, char arg8, unsigned short arg9 );

// Signature from Objective-C Runtime: d doubleClickInterval @ :
double 				nsevent_doubleClickInterval( );

// Signature from Objective-C Runtime: d keyRepeatDelay @ :
double 				nsevent_keyRepeatDelay( );

// Signature from Objective-C Runtime: d keyRepeatInterval @ :
double 				nsevent_keyRepeatInterval( );

// Signature from Objective-C Runtime: @ enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData: @ : Q {CGPoint=dd} Q d q @ q q ^v
nsobject_t 			nsevent_enterExitEventWithType( unsigned long long arg0, CGPoint arg1, unsigned long long arg2, double arg3, long long arg4, nsobject_t arg5, long long arg6, long long arg7, void* arg8 );

// Signature from Objective-C Runtime: @ eventWithCGEvent: @ : ^{__CGEvent=}
nsobject_t 			nsevent_eventWithCGEvent( __CGEvent* arg0 );

// Signature from Objective-C Runtime: @ addGlobalMonitorForEventsMatchingMask:handler: @ : Q @?
nsobject_t 			nsevent_addGlobalMonitorForEventsMatchingMask( unsigned long long arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: @ eventWithEventRef: @ : r^v
nsobject_t 			nsevent_eventWithEventRef( void* arg0 );

// Signature from Objective-C Runtime: v setMouseCoalescingEnabled: @ : c
void 				nsevent_setMouseCoalescingEnabled( char arg0 );

// Signature from Objective-C Runtime: c isMouseCoalescingEnabled @ :
char 				nsevent_isMouseCoalescingEnabled( );

// Signature from Objective-C Runtime: d standardMagnificationThreshold @ :
double 				nsevent_standardMagnificationThreshold( );

// Signature from Objective-C Runtime: f standardRotationThreshold @ :
float 				nsevent_standardRotationThreshold( );

// Signature from Objective-C Runtime: c isSwipeTrackingFromScrollEventsEnabled @ :
char 				nsevent_isSwipeTrackingFromScrollEventsEnabled( );

// Signature from Objective-C Runtime: v startPeriodicEventsAfterDelay:withPeriod: @ : d d
void 				nsevent_startPeriodicEventsAfterDelay( double arg0, double arg1 );

// Signature from Objective-C Runtime: v stopPeriodicEvents @ :
void 				nsevent_stopPeriodicEvents( );

// Signature from Objective-C Runtime: @ defaultPlaceholderForMarker:withBinding: @ : @ @
nsobject_t 			nsevent_defaultPlaceholderForMarker( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v exposeBinding: @ : @
void 				nsevent_exposeBinding( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setDefaultPlaceholder:forMarker:withBinding: @ : @ @ @
void 				nsevent_setDefaultPlaceholder( nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: c CA_automaticallyNotifiesObservers: @ : #
char 				nsevent_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: c CA_encodesPropertyConditionally:type: @ : I i
char 				nsevent_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			nsevent_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			nsevent_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			nsevent_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			nsevent_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			nsevent_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			nsevent_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			nsevent_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: v load @ :
void 				nsevent_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			nsevent_version( );

// Signature from Objective-C Runtime: c instancesImplementSelector: @ : :
char 				nsevent_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v poseAsClass: @ : #
void 				nsevent_poseAsClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				nsevent_setVersion( long long arg0 );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversForKey: @ : @
char 				nsevent_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			nsevent_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			nsevent_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: c useStoredAccessor @ :
char 				nsevent_useStoredAccessor( );

// Signature from Objective-C Runtime: c accessInstanceVariablesDirectly @ :
char 				nsevent_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* nsevent_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			nsevent_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				nsevent_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				nsevent_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v flushAllKeyBindings @ :
void 				nsevent_flushAllKeyBindings( );

// Signature from Objective-C Runtime: v flushClassKeyBindings @ :
void 				nsevent_flushClassKeyBindings( );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			nsevent_SFSQLiteClassName( );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			nsevent_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			nsevent_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			nsevent_new( );

// Signature from Objective-C Runtime: c resolveInstanceMethod: @ : :
char 				nsevent_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: c resolveClassMethod: @ : :
char 				nsevent_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
nsevent_t 			nsevent_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			nsevent_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: c isSubclassOfClass: @ : #
char 				nsevent_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: c isAncestorOfObject: @ : @
char 				nsevent_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: c instancesRespondToSelector: @ : :
char 				nsevent_instancesRespondToSelector( nsselector_t arg0 );

#endif