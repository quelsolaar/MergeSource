/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_UIFONT_HEADER
#define SHIMMER_C_OCOA_UIFONT_HEADER

typedef void*	uifont_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			uifont_init( uifont_t object );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			uifont_classForCoder( uifont_t object );

// Signature from Objective-C Runtime: v encodeWithCoder: @ : @
void 				uifont_encodeWithCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initWithCoder: @ : @
nsobject_t 			uifont_initWithCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ textStyleForScaling @ :
nsobject_t 			uifont_textStyleForScaling( uifont_t object );

// Signature from Objective-C Runtime: d pointSizeForScaling @ :
double 				uifont_pointSizeForScaling( uifont_t object );

// Signature from Objective-C Runtime: d maximumPointSizeAfterScaling @ :
double 				uifont_maximumPointSizeAfterScaling( uifont_t object );

// Signature from Objective-C Runtime: @ initWithName:size: @ : @ d
nsobject_t 			uifont_initWithName( uifont_t object, nsobject_t arg0, double arg1 );

// Signature from Objective-C Runtime: @ initWithMarkupDescription: @ : @
nsobject_t 			uifont_initWithMarkupDescription( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isIBTextStyleFont @ :
char 				uifont_isIBTextStyleFont( uifont_t object );

// Signature from Objective-C Runtime: c isIBFontMetricsScaledFont @ :
char 				uifont_isIBFontMetricsScaledFont( uifont_t object );

// Signature from Objective-C Runtime: d readableWidth @ :
double 				uifont_readableWidth( uifont_t object );

// Signature from Objective-C Runtime: @ initWithFamilyName:traits:size: @ : @ i d
nsobject_t 			uifont_initWithFamilyName( uifont_t object, nsobject_t arg0, int arg1, double arg2 );

// Signature from Objective-C Runtime: @ familyNameForCSSFontFamilyValueForWebKit: @ : c
nsobject_t 			uifont_familyNameForCSSFontFamilyValueForWebKit( uifont_t object, char arg0 );

// Signature from Objective-C Runtime: @ markupDescriptionForWebKit:pointSize:sizeUnit: @ : c f @
nsobject_t 			uifont_markupDescriptionForWebKit( uifont_t object, char arg0, float arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ markupDescription @ :
nsobject_t 			uifont_markupDescription( uifont_t object );

// Signature from Objective-C Runtime: @ htmlMarkupDescription @ :
nsobject_t 			uifont_htmlMarkupDescription( uifont_t object );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			uifont_replacementObjectForPortCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			uifont_copy( uifont_t object );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			uifont_copyWithZone( uifont_t object, _NSZone* arg0 );

// Signature from Objective-C Runtime: c isEqual: @ : @
char 				uifont_isEqual( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	uifont_hash( uifont_t object );

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			uifont_description( uifont_t object );

// Signature from Objective-C Runtime: v set @ :
void 				uifont_set( uifont_t object );

// Signature from Objective-C Runtime: @ displayName @ :
nsobject_t 			uifont_displayName( uifont_t object );

// Signature from Objective-C Runtime: @ familyName @ :
nsobject_t 			uifont_familyName( uifont_t object );

// Signature from Objective-C Runtime: v setInContext: @ : @
void 				uifont_setInContext( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: d pointSize @ :
double 				uifont_pointSize( uifont_t object );

// Signature from Objective-C Runtime: @ screenFont @ :
nsobject_t 			uifont_screenFont( uifont_t object );

// Signature from Objective-C Runtime: c isVertical @ :
char 				uifont_isVertical( uifont_t object );

// Signature from Objective-C Runtime: d leading @ :
double 				uifont_leading( uifont_t object );

// Signature from Objective-C Runtime: d descender @ :
double 				uifont_descender( uifont_t object );

// Signature from Objective-C Runtime: d ascender @ :
double 				uifont_ascender( uifont_t object );

// Signature from Objective-C Runtime: Q mostCompatibleStringEncoding @ :
unsigned long long 	uifont_mostCompatibleStringEncoding( uifont_t object );

// Signature from Objective-C Runtime: @ fontName @ :
nsobject_t 			uifont_fontName( uifont_t object );

// Signature from Objective-C Runtime: r^d matrix @ :
double* 			uifont_matrix( uifont_t object );

// Signature from Objective-C Runtime: @ fontForAppearance: @ : @
nsobject_t 			uifont_fontForAppearance( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ baseFontForSingleLineModeCell: @ : @
nsobject_t 			uifont_baseFontForSingleLineModeCell( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ fontDescriptor @ :
nsobject_t 			uifont_fontDescriptor( uifont_t object );

// Signature from Objective-C Runtime: r^v ctFontRef @ :
void* 				uifont_ctFontRef( uifont_t object );

// Signature from Objective-C Runtime: v getAdvancements:forPackedGlyphs:length: @ : ^{CGSize=dd} r^v Q
void 				uifont_getAdvancements( uifont_t object, CGSize* arg0, void* arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: v getVerticalOriginTranslations:forCGGlyphs:count: @ : ^{CGSize=dd} r^S Q
void 				uifont_getVerticalOriginTranslations( uifont_t object, CGSize* arg0, unsigned short* arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: {CGSize=dd} maximumAdvancement @ :
CGSize 				uifont_maximumAdvancement( uifont_t object );

// Signature from Objective-C Runtime: Q numberOfGlyphs @ :
unsigned long long 	uifont_numberOfGlyphs( uifont_t object );

// Signature from Objective-C Runtime: @ coveredCharacterSet @ :
nsobject_t 			uifont_coveredCharacterSet( uifont_t object );

// Signature from Objective-C Runtime: d capHeight @ :
double 				uifont_capHeight( uifont_t object );

// Signature from Objective-C Runtime: @ verticalFont @ :
nsobject_t 			uifont_verticalFont( uifont_t object );

// Signature from Objective-C Runtime: I glyphWithName: @ : @
unsigned int 		uifont_glyphWithName( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} advancementForGlyph: @ : I
CGSize 				uifont_advancementForGlyph( uifont_t object, unsigned int arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} boundingRectForFont @ :
CGRect 				uifont_boundingRectForFont( uifont_t object );

// Signature from Objective-C Runtime: @ screenFontWithRenderingMode: @ : Q
nsobject_t 			uifont_screenFontWithRenderingMode( uifont_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v applyToGraphicsContext: @ : @
void 				uifont_applyToGraphicsContext( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q renderingMode @ :
unsigned long long 	uifont_renderingMode( uifont_t object );

// Signature from Objective-C Runtime: @ bestMatchingFontForCharacters:length:attributes:actualCoveredLength: @ : r^S Q @ ^Q
nsobject_t 			uifont_bestMatchingFontForCharacters( uifont_t object, unsigned short* arg0, unsigned long long arg1, nsobject_t arg2, unsigned long long* arg3 );

// Signature from Objective-C Runtime: @ lastResortFont @ :
nsobject_t 			uifont_lastResortFont( uifont_t object );

// Signature from Objective-C Runtime: Q traits @ :
unsigned long long 	uifont_traits( uifont_t object );

// Signature from Objective-C Runtime: @ fontWithSize: @ : d
nsobject_t 			uifont_fontWithSize( uifont_t object, double arg0 );

// Signature from Objective-C Runtime: d lineHeight @ :
double 				uifont_lineHeight( uifont_t object );

// Signature from Objective-C Runtime: @ initWithTypefaceInfo:key:renderingMode: @ : @ @ Q
nsobject_t 			uifont_initWithTypefaceInfo( uifont_t object, nsobject_t arg0, nsobject_t arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: @ textTransform @ :
nsobject_t 			uifont_textTransform( uifont_t object );

// Signature from Objective-C Runtime: @ newFontInstanceForRenderingMode: @ : Q
nsobject_t 			uifont_newFontInstanceForRenderingMode( uifont_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: d underlineThickness @ :
double 				uifont_underlineThickness( uifont_t object );

// Signature from Objective-C Runtime: v getBoundingRects:forCGGlyphs:count: @ : ^{CGRect={CGPoint=dd}{CGSize=dd}} r^S Q
void 				uifont_getBoundingRects( uifont_t object, CGRect* arg0, unsigned short* arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} boundingRectForCGGlyph: @ : S
CGRect 				uifont_boundingRectForCGGlyph( uifont_t object, unsigned short arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} advancementForCGGlyph: @ : S
CGSize 				uifont_advancementForCGGlyph( uifont_t object, unsigned short arg0 );

// Signature from Objective-C Runtime: @ fontInstanceForRenderingMode: @ : Q
nsobject_t 			uifont_fontInstanceForRenderingMode( uifont_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: @ verticalFontInstanceForRenderingMode: @ : Q
nsobject_t 			uifont_verticalFontInstanceForRenderingMode( uifont_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} boundingRectForGlyph: @ : I
CGRect 				uifont_boundingRectForGlyph( uifont_t object, unsigned int arg0 );

// Signature from Objective-C Runtime: I hyphenGlyphForLocale: @ : @
unsigned int 		uifont_hyphenGlyphForLocale( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isSystemFont @ :
char 				uifont_isSystemFont( uifont_t object );

// Signature from Objective-C Runtime: @ initWithBaseFont: @ : @
nsobject_t 			uifont_initWithBaseFont( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: d underlinePosition @ :
double 				uifont_underlinePosition( uifont_t object );

// Signature from Objective-C Runtime: d italicAngle @ :
double 				uifont_italicAngle( uifont_t object );

// Signature from Objective-C Runtime: d xHeight @ :
double 				uifont_xHeight( uifont_t object );

// Signature from Objective-C Runtime: c isFixedPitch @ :
char 				uifont_isFixedPitch( uifont_t object );

// Signature from Objective-C Runtime: @ printerFont @ :
nsobject_t 			uifont_printerFont( uifont_t object );

// Signature from Objective-C Runtime: @ nameOfGlyph: @ : I
nsobject_t 			uifont_nameOfGlyph( uifont_t object, unsigned int arg0 );

// Signature from Objective-C Runtime: Q getCaretPositions:forGlyph:maximumLength: @ : ^d I Q
unsigned long long 	uifont_getCaretPositions( uifont_t object, double* arg0, unsigned int arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: @ preferredFallbackFontForLanguage: @ : @
nsobject_t 			uifont_preferredFallbackFontForLanguage( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: d widthOfString: @ : @
double 				uifont_widthOfString( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isBaseFont @ :
char 				uifont_isBaseFont( uifont_t object );

// Signature from Objective-C Runtime: @ afmDictionary @ :
nsobject_t 			uifont_afmDictionary( uifont_t object );

// Signature from Objective-C Runtime: c glyphIsEncoded: @ : I
char 				uifont_glyphIsEncoded( uifont_t object, unsigned int arg0 );

// Signature from Objective-C Runtime: d defaultLineHeightForFont @ :
double 				uifont_defaultLineHeightForFont( uifont_t object );

// Signature from Objective-C Runtime: @ encodingScheme @ :
nsobject_t 			uifont_encodingScheme( uifont_t object );

// Signature from Objective-C Runtime: Q glyphPacking @ :
unsigned long long 	uifont_glyphPacking( uifont_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} positionOfGlyph:precededByGlyph:isNominal: @ : I I ^c
CGPoint 			uifont_positionOfGlyph( uifont_t object, unsigned int arg0, unsigned int arg1, char* arg2 );

// Signature from Objective-C Runtime: q positionsForCompositeSequence:numberOfGlyphs:pointArray: @ : ^I q ^{CGPoint=dd}
long long 			uifont_positionsForCompositeSequence( uifont_t object, unsigned int* arg0, long long arg1, CGPoint* arg2 );

// Signature from Objective-C Runtime: c isScreenFont @ :
char 				uifont_isScreenFont( uifont_t object );

// Signature from Objective-C Runtime: I hyphenGlyphForLanguage: @ : @
unsigned int 		uifont_hyphenGlyphForLanguage( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c coversAllCharactersInString: @ : @
char 				uifont_coversAllCharactersInString( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c coversCharacter: @ : S
char 				uifont_coversCharacter( uifont_t object, unsigned short arg0 );

// Signature from Objective-C Runtime: @ accessibilityOverriddenAttributes @ :
nsobject_t 			uifont_accessibilityOverriddenAttributes( uifont_t object );

// Signature from Objective-C Runtime: c accessibilityReplaceRange:withText: @ : {_NSRange=QQ} @
char 				uifont_accessibilityReplaceRange( uifont_t object, _NSRange arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: d accessibilityVisibleArea @ :
double 				uifont_accessibilityVisibleArea( uifont_t object );

// Signature from Objective-C Runtime: Q accessibilityArrayAttributeCount: @ : @
unsigned long long 	uifont_accessibilityArrayAttributeCount( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q accessibilityIndexOfChild: @ : @
unsigned long long 	uifont_accessibilityIndexOfChild( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityArrayAttributeValues:index:maxCount: @ : @ Q Q
nsobject_t 			uifont_accessibilityArrayAttributeValues( uifont_t object, nsobject_t arg0, unsigned long long arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: @ accessibilityParameterizedAttributeNames @ :
nsobject_t 			uifont_accessibilityParameterizedAttributeNames( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributeValue:forParameter: @ : @ @
nsobject_t 			uifont_accessibilityAttributeValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ accessibilityIndexForChildUIElementAttributeForParameter: @ : @
nsobject_t 			uifont_accessibilityIndexForChildUIElementAttributeForParameter( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityAttributedValueForStringAttributeAttributeForParameter: @ : @
nsobject_t 			uifont_accessibilityAttributedValueForStringAttributeAttributeForParameter( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTemporaryChildren @ :
nsobject_t 			uifont_accessibilityTemporaryChildren( uifont_t object );

// Signature from Objective-C Runtime: c accessibilityPerformShowMenuOfChild: @ : @
char 				uifont_accessibilityPerformShowMenuOfChild( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: i accessibilityPresenterProcessIdentifier @ :
int 				uifont_accessibilityPresenterProcessIdentifier( uifont_t object );

// Signature from Objective-C Runtime: c accessibilityShouldUseUniqueId @ :
char 				uifont_accessibilityShouldUseUniqueId( uifont_t object );

// Signature from Objective-C Runtime: c accessibilitySupportsNotifications @ :
char 				uifont_accessibilitySupportsNotifications( uifont_t object );

// Signature from Objective-C Runtime: c accessibilityShouldSendNotification: @ : @
char 				uifont_accessibilityShouldSendNotification( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilitySupportsOverriddenAttributes @ :
char 				uifont_accessibilitySupportsOverriddenAttributes( uifont_t object );

// Signature from Objective-C Runtime: c accessibilityAllowsOverriddenAttributesWhenIgnored @ :
char 				uifont_accessibilityAllowsOverriddenAttributesWhenIgnored( uifont_t object );

// Signature from Objective-C Runtime: c accessibilitySetOverrideValue:forAttribute: @ : @ @
char 				uifont_accessibilitySetOverrideValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v accessibilityEncodeOverriddenAttributes: @ : @
void 				uifont_accessibilityEncodeOverriddenAttributes( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityDecodeOverriddenAttributes: @ : @
void 				uifont_accessibilityDecodeOverriddenAttributes( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilitySupportsCustomElementData @ :
char 				uifont_accessibilitySupportsCustomElementData( uifont_t object );

// Signature from Objective-C Runtime: v bind:toObject:withKeyPath:options: @ : @ @ @ @
void 				uifont_bind( uifont_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				uifont_awakeFromNib( uifont_t object );

// Signature from Objective-C Runtime: @ userInterfaceItemIdentifier @ :
nsobject_t 			uifont_userInterfaceItemIdentifier( uifont_t object );

// Signature from Objective-C Runtime: v setUserInterfaceItemIdentifier: @ : @
void 				uifont_setUserInterfaceItemIdentifier( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unbind: @ : @
void 				uifont_unbind( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # valueClassForBinding: @ : @
nsclass_t 			uifont_valueClassForBinding( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NS_observationForKeyPath:options:block: @ : @ Q @?
nsobject_t 			uifont_NS_observationForKeyPath( uifont_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ NS_observationForKeyPaths:options:block: @ : @ Q @?
nsobject_t 			uifont_NS_observationForKeyPaths( uifont_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ optionDescriptionsForBinding: @ : @
nsobject_t 			uifont_optionDescriptionsForBinding( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ exposedBindings @ :
nsobject_t 			uifont_exposedBindings( uifont_t object );

// Signature from Objective-C Runtime: @ infoForBinding: @ : @
nsobject_t 			uifont_infoForBinding( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				uifont_prepareForInterfaceBuilder( uifont_t object );

// Signature from Objective-C Runtime: v accessibilityAddTemporaryChild: @ : @
void 				uifont_accessibilityAddTemporaryChild( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityRemoveTemporaryChild: @ : @
void 				uifont_accessibilityRemoveTemporaryChild( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NSLifeguard_autorelease @ :
nsobject_t 			uifont_NSLifeguard_autorelease( uifont_t object );

// Signature from Objective-C Runtime: v accessibilitySetPresenterProcessIdentifier: @ : i
void 				uifont_accessibilitySetPresenterProcessIdentifier( uifont_t object, int arg0 );

// Signature from Objective-C Runtime: @ NS_tiledLayerVisibleRect @ :
nsobject_t 			uifont_NS_tiledLayerVisibleRect( uifont_t object );

// Signature from Objective-C Runtime: v NS_addTiledLayerDescendent: @ : @
void 				uifont_NS_addTiledLayerDescendent( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v NS_removeTiledLayerDescendent: @ : @
void 				uifont_NS_removeTiledLayerDescendent( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c CAMLTypeSupportedForKey: @ : @
char 				uifont_CAMLTypeSupportedForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			uifont_CAMLTypeForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c CA_validateValue:forKey: @ : @ @
char 				uifont_CA_validateValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				uifont_encodeWithCAMLWriter( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=dddddddddB}
nsobject_t 			uifont_CA_interpolateValues( uifont_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			uifont_CAMLType( uifont_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			uifont_CA_archivingValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			uifont_CA_roundToIntegerFromValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			uifont_CA_addValue( uifont_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			uifont_CA_interpolateValue( uifont_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				uifont_CA_distanceToValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				uifont_CA_prepareRenderValue( uifont_t object );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}} CA_copyRenderValue @ :
Object* 			uifont_CA_copyRenderValue( uifont_t object );

// Signature from Objective-C Runtime: c supportsRBSXPCSecureCoding @ :
char 				uifont_supportsRBSXPCSecureCoding( uifont_t object );

// Signature from Objective-C Runtime: c RBSIsXPCObject @ :
char 				uifont_RBSIsXPCObject( uifont_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			uifont_NSRepresentation( uifont_t object );

// Signature from Objective-C Runtime: c supportsBSXPCSecureCoding @ :
char 				uifont_supportsBSXPCSecureCoding( uifont_t object );

// Signature from Objective-C Runtime: c bs_isPlistableType @ :
char 				uifont_bs_isPlistableType( uifont_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			uifont_bs_secureEncoded( uifont_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			uifont_bs_encoded( uifont_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			uifont_replacementObjectForCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			uifont_awakeAfterUsingCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c implementsSelector: @ : :
char 				uifont_implementsSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				uifont_setObservationInfo( uifont_t object, void* arg0 );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				uifont_setValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				uifont_willChangeValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				uifont_didChangeValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			uifont_dictionaryWithValuesForKeys( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			uifont_valueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			uifont_valueForUndefinedKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			uifont_classForKeyedArchiver( uifont_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			uifont_replacementObjectForKeyedArchiver( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			uifont_valueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserver: @ : @
nsobject_t 			uifont_addObserver( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ objectSpecifier @ :
nsobject_t 			uifont_objectSpecifier( uifont_t object );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			uifont_replacementObjectForArchiver( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			uifont_classForArchiver( uifont_t object );

// Signature from Objective-C Runtime: @ attributeKeys @ :
nsobject_t 			uifont_attributeKeys( uifont_t object );

// Signature from Objective-C Runtime: @ toOneRelationshipKeys @ :
nsobject_t 			uifont_toOneRelationshipKeys( uifont_t object );

// Signature from Objective-C Runtime: @ toManyRelationshipKeys @ :
nsobject_t 			uifont_toManyRelationshipKeys( uifont_t object );

// Signature from Objective-C Runtime: @ inverseForRelationshipKey: @ : @
nsobject_t 			uifont_inverseForRelationshipKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ classDescription @ :
nsobject_t 			uifont_classDescription( uifont_t object );

// Signature from Objective-C Runtime: @ copyScriptingValue:forKey:withProperties: @ : @ @ @
nsobject_t 			uifont_copyScriptingValue( uifont_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* uifont_methodDescriptionForSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ newScriptingObjectOfClass:forValueForKey:withContentsValue:properties: @ : # @ @ @
nsobject_t 			uifont_newScriptingObjectOfClass( uifont_t object, nsclass_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: @ handleQueryWithUnboundKey: @ : @
nsobject_t 			uifont_handleQueryWithUnboundKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v handleTakeValue:forUnboundKey: @ : @ @
void 				uifont_handleTakeValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ storedValueForKey: @ : @
nsobject_t 			uifont_storedValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v takeStoredValue:forKey: @ : @ @
void 				uifont_takeStoredValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v takeValue:forKey: @ : @ @
void 				uifont_takeValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valuesForKeys: @ : @
nsobject_t 			uifont_valuesForKeys( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v takeValuesFromDictionary: @ : @
void 				uifont_takeValuesFromDictionary( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unableToSetNilForKey: @ : @
void 				uifont_unableToSetNilForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ keyValueBindingForKey:typeMask: @ : @ Q
nsobject_t 			uifont_keyValueBindingForKey( uifont_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ createKeyValueBindingForKey:typeMask: @ : @ Q
nsobject_t 			uifont_createKeyValueBindingForKey( uifont_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			uifont_mutableArrayValueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			uifont_mutableOrderedSetValueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			uifont_mutableSetValueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				uifont_removeObservation( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				uifont_receiveObservedValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				uifont_receiveObservedError( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				uifont_finishObserving( uifont_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				uifont_setObservation( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				uifont_observeValueForKeyPath( uifont_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				uifont_removeObserver( uifont_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			uifont_className( uifont_t object );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			uifont_addChainedObservers( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			uifont_addObserverBlock( uifont_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			uifont_addObservationTransformer( uifont_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				uifont_setNilValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			uifont_mutableArrayValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			uifont_mutableOrderedSetValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			uifont_mutableSetValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				uifont_setValuesForKeysWithDictionary( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uifont_willChange( uifont_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uifont_didChange( uifont_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				uifont_observationInfo( uifont_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			uifont_autoContentAccessingProxy( uifont_t object );

// Signature from Objective-C Runtime: @ coerceValue:forKey: @ : @ @
nsobject_t 			uifont_coerceValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setScriptingProperties: @ : @
void 				uifont_setScriptingProperties( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scriptingValueForSpecifier: @ : @
nsobject_t 			uifont_scriptingValueForSpecifier( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scriptingProperties @ :
nsobject_t 			uifont_scriptingProperties( uifont_t object );

// Signature from Objective-C Runtime: @ coerceValueForScriptingProperties: @ : @
nsobject_t 			uifont_coerceValueForScriptingProperties( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueAtIndex:inPropertyWithKey: @ : Q @
nsobject_t 			uifont_valueAtIndex( uifont_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valueWithName:inPropertyWithKey: @ : @ @
nsobject_t 			uifont_valueWithName( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valueWithUniqueID:inPropertyWithKey: @ : @ @
nsobject_t 			uifont_valueWithUniqueID( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v insertValue:atIndex:inPropertyWithKey: @ : @ Q @
void 				uifont_insertValue( uifont_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v replaceValueAtIndex:inPropertyWithKey:withValue: @ : Q @ @
void 				uifont_replaceValueAtIndex( uifont_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v removeValueAtIndex:fromPropertyWithKey: @ : Q @
void 				uifont_removeValueAtIndex( uifont_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			uifont_classForPortCoder( uifont_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				uifont_performSelector( uifont_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: I classCode @ :
unsigned int 		uifont_classCode( uifont_t object );

// Signature from Objective-C Runtime: c isEqualTo: @ : @
char 				uifont_isEqualTo( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLessThanOrEqualTo: @ : @
char 				uifont_isLessThanOrEqualTo( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLessThan: @ : @
char 				uifont_isLessThan( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isGreaterThanOrEqualTo: @ : @
char 				uifont_isGreaterThanOrEqualTo( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isGreaterThan: @ : @
char 				uifont_isGreaterThan( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isNotEqualTo: @ : @
char 				uifont_isNotEqualTo( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c doesContain: @ : @
char 				uifont_doesContain( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLike: @ : @
char 				uifont_isLike( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isCaseInsensitiveLike: @ : @
char 				uifont_isCaseInsensitiveLike( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ c @
void 				uifont_performSelectorOnMainThread( uifont_t object, nsselector_t arg0, nsobject_t arg1, char arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				uifont_performSelectorInBackground( uifont_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ classDescriptionForDestinationKey: @ : @
nsobject_t 			uifont_classDescriptionForDestinationKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ entityName @ :
nsobject_t 			uifont_entityName( uifont_t object );

// Signature from Objective-C Runtime: c ownsDestinationObjectsForRelationshipKey: @ : @
char 				uifont_ownsDestinationObjectsForRelationshipKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isToManyKey: @ : @
char 				uifont_isToManyKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeObject:fromPropertyWithKey: @ : @ @
void 				uifont_removeObject( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v addObject:toPropertyWithKey: @ : @ @
void 				uifont_addObject( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ validateTakeValue:forKeyPath: @ : @ @
nsobject_t 			uifont_validateTakeValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ allPropertyKeys @ :
nsobject_t 			uifont_allPropertyKeys( uifont_t object );

// Signature from Objective-C Runtime: v clearProperties @ :
void 				uifont_clearProperties( uifont_t object );

// Signature from Objective-C Runtime: v flushKeyBindings @ :
void 				uifont_flushKeyBindings( uifont_t object );

// Signature from Objective-C Runtime: v takeStoredValuesFromDictionary: @ : @
void 				uifont_takeStoredValuesFromDictionary( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isNSDate__ @ :
char 				uifont_isNSDate__( uifont_t object );

// Signature from Objective-C Runtime: c isNSString__ @ :
char 				uifont_isNSString__( uifont_t object );

// Signature from Objective-C Runtime: c isNSCFConstantString__ @ :
char 				uifont_isNSCFConstantString__( uifont_t object );

// Signature from Objective-C Runtime: c isNSNumber__ @ :
char 				uifont_isNSNumber__( uifont_t object );

// Signature from Objective-C Runtime: c isNSArray__ @ :
char 				uifont_isNSArray__( uifont_t object );

// Signature from Objective-C Runtime: c isNSDictionary__ @ :
char 				uifont_isNSDictionary__( uifont_t object );

// Signature from Objective-C Runtime: c isNSSet__ @ :
char 				uifont_isNSSet__( uifont_t object );

// Signature from Objective-C Runtime: c isNSData__ @ :
char 				uifont_isNSData__( uifont_t object );

// Signature from Objective-C Runtime: c isNSObject__ @ :
char 				uifont_isNSObject__( uifont_t object );

// Signature from Objective-C Runtime: c isNSOrderedSet__ @ :
char 				uifont_isNSOrderedSet__( uifont_t object );

// Signature from Objective-C Runtime: c isNSTimeZone__ @ :
char 				uifont_isNSTimeZone__( uifont_t object );

// Signature from Objective-C Runtime: c isNSValue__ @ :
char 				uifont_isNSValue__( uifont_t object );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				uifont_doesNotRecognizeSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			uifont_methodSignatureForSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			uifont_retain( uifont_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	uifont_retainCount( uifont_t object );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			uifont_autorelease( uifont_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				uifont_finalize( uifont_t object );

// Signature from Objective-C Runtime: v dealloc @ :
void 				uifont_dealloc( uifont_t object );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			uifont_class( uifont_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			uifont_self( uifont_t object );

// Signature from Objective-C Runtime: c isProxy @ :
char 				uifont_isProxy( uifont_t object );

// Signature from Objective-C Runtime: c isKindOfClass: @ : #
char 				uifont_isKindOfClass( uifont_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: c isMemberOfClass: @ : #
char 				uifont_isMemberOfClass( uifont_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: c conformsToProtocol: @ : @
char 				uifont_conformsToProtocol( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c respondsToSelector: @ : :
char 				uifont_respondsToSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			uifont_zone( uifont_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			uifont_superclass( uifont_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			uifont_debugDescription( uifont_t object );

// Signature from Objective-C Runtime: c retainWeakReference @ :
char 				uifont_retainWeakReference( uifont_t object );

// Signature from Objective-C Runtime: c allowsWeakReference @ :
char 				uifont_allowsWeakReference( uifont_t object );

// Signature from Objective-C Runtime: c isFault @ :
char 				uifont_isFault( uifont_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				uifont_forwardInvocation( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			uifont_forwardingTargetForSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			uifont_mutableCopy( uifont_t object );

// Signature from Objective-C Runtime: c supportsSecureCoding @ :
char 				uifont_supportsSecureCoding( );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			uifont_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: @ fontWithDescriptor:size: @ : @ d
nsobject_t 			uifont_fontWithDescriptor( nsobject_t arg0, double arg1 );

// Signature from Objective-C Runtime: @ systemFontOfSize: @ : d
nsobject_t 			uifont_systemFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ fontWithName:size: @ : @ d
nsobject_t 			uifont_fontWithName( nsobject_t arg0, double arg1 );

// Signature from Objective-C Runtime: @ monospacedDigitSystemFontOfSize:weight: @ : d d
nsobject_t 			uifont_monospacedDigitSystemFontOfSize( double arg0, double arg1 );

// Signature from Objective-C Runtime: d systemFontSize @ :
double 				uifont_systemFontSize( );

// Signature from Objective-C Runtime: @ boldSystemFontOfSize: @ : d
nsobject_t 			uifont_boldSystemFontOfSize( double arg0 );

// Signature from Objective-C Runtime: d smallSystemFontSize @ :
double 				uifont_smallSystemFontSize( );

// Signature from Objective-C Runtime: @ preferredFontForTextStyle:compatibleWithTraitCollection: @ : @ @
nsobject_t 			uifont_preferredFontForTextStyle( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ ib_preferredFontForTextStyle: @ : @
nsobject_t 			uifont_ib_preferredFontForTextStyle( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ fontWithFamilyName:traits:size: @ : @ i d
nsobject_t 			uifont_fontWithFamilyName( nsobject_t arg0, int arg1, double arg2 );

// Signature from Objective-C Runtime: @ fontWithMarkupDescription: @ : @
nsobject_t 			uifont_fontWithMarkupDescription( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ familyNames @ :
nsobject_t 			uifont_familyNames( );

// Signature from Objective-C Runtime: @ fontNamesForFamilyName: @ : @
nsobject_t 			uifont_fontNamesForFamilyName( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ preferredFontForUsage: @ : @
nsobject_t 			uifont_preferredFontForUsage( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ defaultFontForTextStyle: @ : @
nsobject_t 			uifont_defaultFontForTextStyle( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ italicSystemFontOfSize: @ : d
nsobject_t 			uifont_italicSystemFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ monospacedSystemFontOfSize:weight: @ : d d
nsobject_t 			uifont_monospacedSystemFontOfSize( double arg0, double arg1 );

// Signature from Objective-C Runtime: d labelFontSize @ :
double 				uifont_labelFontSize( );

// Signature from Objective-C Runtime: d buttonFontSize @ :
double 				uifont_buttonFontSize( );

// Signature from Objective-C Runtime: v initialize @ :
void 				uifont_initialize( );

// Signature from Objective-C Runtime: @ messageFontOfSize: @ : d
nsobject_t 			uifont_messageFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ menuBarFontOfSize: @ : d
nsobject_t 			uifont_menuBarFontOfSize( double arg0 );

// Signature from Objective-C Runtime: d systemFontSizeForControlSize: @ : Q
double 				uifont_systemFontSizeForControlSize( unsigned long long arg0 );

// Signature from Objective-C Runtime: @ titleBarFontOfSize: @ : d
nsobject_t 			uifont_titleBarFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ controlContentFontOfSize: @ : d
nsobject_t 			uifont_controlContentFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ menuFontOfSize: @ : d
nsobject_t 			uifont_menuFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ userFontOfSize: @ : d
nsobject_t 			uifont_userFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ availableFontFamilies @ :
nsobject_t 			uifont_availableFontFamilies( );

// Signature from Objective-C Runtime: @ availableMembersOfFontFamily: @ : @
nsobject_t 			uifont_availableMembersOfFontFamily( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ availableFonts @ :
nsobject_t 			uifont_availableFonts( );

// Signature from Objective-C Runtime: @ paletteFontOfSize: @ : d
nsobject_t 			uifont_paletteFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ toolTipsFontOfSize: @ : d
nsobject_t 			uifont_toolTipsFontOfSize( double arg0 );

// Signature from Objective-C Runtime: d toolbarLabelFontSizeForToolbarSize: @ : Q
double 				uifont_toolbarLabelFontSizeForToolbarSize( unsigned long long arg0 );

// Signature from Objective-C Runtime: @ toolbarLabelFontOfSize: @ : d
nsobject_t 			uifont_toolbarLabelFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ userFixedPitchFontOfSize: @ : d
nsobject_t 			uifont_userFixedPitchFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ coveredCharacterCache @ :
nsobject_t 			uifont_coveredCharacterCache( );

// Signature from Objective-C Runtime: v setUserFont: @ : @
void 				uifont_setUserFont( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setUserFixedPitchFont: @ : @
void 				uifont_setUserFixedPitchFont( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ labelFontOfSize: @ : d
nsobject_t 			uifont_labelFontOfSize( double arg0 );

// Signature from Objective-C Runtime: v useFont: @ : @
void 				uifont_useFont( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setLocaleListForDefaultFontFallback: @ : @
void 				uifont_setLocaleListForDefaultFontFallback( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ findFontLike:forCharacter:inLanguage: @ : @ I @
nsobject_t 			uifont_findFontLike( nsobject_t arg0, unsigned int arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ preferredFontNames @ :
nsobject_t 			uifont_preferredFontNames( );

// Signature from Objective-C Runtime: v setPreferredFontNames: @ : @
void 				uifont_setPreferredFontNames( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ defaultPlaceholderForMarker:withBinding: @ : @ @
nsobject_t 			uifont_defaultPlaceholderForMarker( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v exposeBinding: @ : @
void 				uifont_exposeBinding( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setDefaultPlaceholder:forMarker:withBinding: @ : @ @ @
void 				uifont_setDefaultPlaceholder( nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: c CA_automaticallyNotifiesObservers: @ : #
char 				uifont_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: c CA_encodesPropertyConditionally:type: @ : I i
char 				uifont_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			uifont_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			uifont_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			uifont_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			uifont_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			uifont_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			uifont_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			uifont_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: v load @ :
void 				uifont_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			uifont_version( );

// Signature from Objective-C Runtime: c instancesImplementSelector: @ : :
char 				uifont_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v poseAsClass: @ : #
void 				uifont_poseAsClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				uifont_setVersion( long long arg0 );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversForKey: @ : @
char 				uifont_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			uifont_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: c useStoredAccessor @ :
char 				uifont_useStoredAccessor( );

// Signature from Objective-C Runtime: c accessInstanceVariablesDirectly @ :
char 				uifont_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* uifont_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			uifont_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				uifont_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				uifont_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v flushAllKeyBindings @ :
void 				uifont_flushAllKeyBindings( );

// Signature from Objective-C Runtime: v flushClassKeyBindings @ :
void 				uifont_flushClassKeyBindings( );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			uifont_SFSQLiteClassName( );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			uifont_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			uifont_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			uifont_new( );

// Signature from Objective-C Runtime: c resolveInstanceMethod: @ : :
char 				uifont_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: c resolveClassMethod: @ : :
char 				uifont_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
uifont_t 			uifont_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			uifont_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: c isSubclassOfClass: @ : #
char 				uifont_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: c isAncestorOfObject: @ : @
char 				uifont_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: c instancesRespondToSelector: @ : :
char 				uifont_instancesRespondToSelector( nsselector_t arg0 );

#endif