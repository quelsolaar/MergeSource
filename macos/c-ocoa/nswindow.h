/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_NSWINDOW_HEADER
#define SHIMMER_C_OCOA_NSWINDOW_HEADER

typedef void*	nswindow_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: v dealloc @ :
void 				nswindow_dealloc( nswindow_t object );

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			nswindow_description( nswindow_t object );

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			nswindow_init( nswindow_t object );

// Signature from Objective-C Runtime: v encodeWithCoder: @ : @
void 				nswindow_encodeWithCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initWithCoder: @ : @
nsobject_t 			nswindow_initWithCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ delegate @ :
nsobject_t 			nswindow_delegate( nswindow_t object );

// Signature from Objective-C Runtime: v close @ :
void 				nswindow_close( nswindow_t object );

// Signature from Objective-C Runtime: v setDelegate: @ : @
void 				nswindow_setDelegate( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				nswindow_setValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ identifier @ :
nsobject_t 			nswindow_identifier( nswindow_t object );

// Signature from Objective-C Runtime: v update @ :
void 				nswindow_update( nswindow_t object );

// Signature from Objective-C Runtime: v setTitle: @ : @
void 				nswindow_setTitle( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ menu @ :
nsobject_t 			nswindow_menu( nswindow_t object );

// Signature from Objective-C Runtime: @ parentWindow @ :
nsobject_t 			nswindow_parentWindow( nswindow_t object );

// Signature from Objective-C Runtime: c hasTitleBar @ :
char 				nswindow_hasTitleBar( nswindow_t object );

// Signature from Objective-C Runtime: v setIdentifier: @ : @
void 				nswindow_setIdentifier( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q uniqueID @ :
long long 			nswindow_uniqueID( nswindow_t object );

// Signature from Objective-C Runtime: q level @ :
long long 			nswindow_level( nswindow_t object );

// Signature from Objective-C Runtime: @ objectSpecifier @ :
nsobject_t 			nswindow_objectSpecifier( nswindow_t object );

// Signature from Objective-C Runtime: v addObserver:forKeyPath:options:context: @ : @ @ Q ^v
void 				nswindow_addObserver( nswindow_t object, nsobject_t arg0, nsobject_t arg1, unsigned long long arg2, void* arg3 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				nswindow_observeValueForKeyPath( nswindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				nswindow_removeObserver( nswindow_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ document @ :
nsobject_t 			nswindow_document( nswindow_t object );

// Signature from Objective-C Runtime: @ title @ :
nsobject_t 			nswindow_title( nswindow_t object );

// Signature from Objective-C Runtime: @ subtitle @ :
nsobject_t 			nswindow_subtitle( nswindow_t object );

// Signature from Objective-C Runtime: v setSubtitle: @ : @
void 				nswindow_setSubtitle( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} frame @ :
CGRect 				nswindow_frame( nswindow_t object );

// Signature from Objective-C Runtime: v setFrame:display: @ : {CGRect={CGPoint=dd}{CGSize=dd}} c
void 				nswindow_setFrame( nswindow_t object, CGRect arg0, char arg1 );

// Signature from Objective-C Runtime: {CGSize=dd} minFullScreenContentSize @ :
CGSize 				nswindow_minFullScreenContentSize( nswindow_t object );

// Signature from Objective-C Runtime: @ nextEventMatchingMask:untilDate:inMode:dequeue: @ : Q @ @ c
nsobject_t 			nswindow_nextEventMatchingMask( nswindow_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2, char arg3 );

// Signature from Objective-C Runtime: q windowNumber @ :
long long 			nswindow_windowNumber( nswindow_t object );

// Signature from Objective-C Runtime: v postEvent:atStart: @ : @ c
void 				nswindow_postEvent( nswindow_t object, nsobject_t arg0, char arg1 );

// Signature from Objective-C Runtime: {CGPoint=dd} convertScreenToBase: @ : {CGPoint=dd}
CGPoint 			nswindow_convertScreenToBase( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: @ screen @ :
nsobject_t 			nswindow_screen( nswindow_t object );

// Signature from Objective-C Runtime: v resetCursorRects @ :
void 				nswindow_resetCursorRects( nswindow_t object );

// Signature from Objective-C Runtime: v setBackgroundColor: @ : @
void 				nswindow_setBackgroundColor( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ effectiveAppearance @ :
nsobject_t 			nswindow_effectiveAppearance( nswindow_t object );

// Signature from Objective-C Runtime: q userInterfaceLayoutDirection @ :
long long 			nswindow_userInterfaceLayoutDirection( nswindow_t object );

// Signature from Objective-C Runtime: c isOpaque @ :
char 				nswindow_isOpaque( nswindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} minSize @ :
CGSize 				nswindow_minSize( nswindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} maxSize @ :
CGSize 				nswindow_maxSize( nswindow_t object );

// Signature from Objective-C Runtime: v setFrameOrigin: @ : {CGPoint=dd}
void 				nswindow_setFrameOrigin( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: @ firstResponder @ :
nsobject_t 			nswindow_firstResponder( nswindow_t object );

// Signature from Objective-C Runtime: c makeFirstResponder: @ : @
char 				nswindow_makeFirstResponder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityAttributeNames @ :
nsobject_t 			nswindow_accessibilityAttributeNames( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityWindowAttribute @ :
nsobject_t 			nswindow_accessibilityWindowAttribute( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityParentAttribute @ :
nsobject_t 			nswindow_accessibilityParentAttribute( nswindow_t object );

// Signature from Objective-C Runtime: v sendEvent: @ : @
void 				nswindow_sendEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ contentView @ :
nsobject_t 			nswindow_contentView( nswindow_t object );

// Signature from Objective-C Runtime: v undo: @ : @
void 				nswindow_undo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v redo: @ : @
void 				nswindow_redo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c validateMenuItem: @ : @
char 				nswindow_validateMenuItem( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c validateUserInterfaceItem: @ : @
char 				nswindow_validateUserInterfaceItem( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v makeKeyWindow @ :
void 				nswindow_makeKeyWindow( nswindow_t object );

// Signature from Objective-C Runtime: v resignKeyWindow @ :
void 				nswindow_resignKeyWindow( nswindow_t object );

// Signature from Objective-C Runtime: c isVisible @ :
char 				nswindow_isVisible( nswindow_t object );

// Signature from Objective-C Runtime: v setColorSpace: @ : @
void 				nswindow_setColorSpace( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ appearance @ :
nsobject_t 			nswindow_appearance( nswindow_t object );

// Signature from Objective-C Runtime: c isOnActiveSpace @ :
char 				nswindow_isOnActiveSpace( nswindow_t object );

// Signature from Objective-C Runtime: @ animator @ :
nsobject_t 			nswindow_animator( nswindow_t object );

// Signature from Objective-C Runtime: @ backgroundColor @ :
nsobject_t 			nswindow_backgroundColor( nswindow_t object );

// Signature from Objective-C Runtime: v setUserInterfaceLayoutDirection: @ : q
void 				nswindow_setUserInterfaceLayoutDirection( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAnimations: @ : @
void 				nswindow_setAnimations( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v mouseDown: @ : @
void 				nswindow_mouseDown( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityParent @ :
nsobject_t 			nswindow_accessibilityParent( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFocusRingBounds @ :
CGRect 				nswindow_accessibilityFocusRingBounds( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityFocusedUIElement @ :
nsobject_t 			nswindow_accessibilityFocusedUIElement( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityWindowAttributeValueHelper @ :
nsobject_t 			nswindow_accessibilityWindowAttributeValueHelper( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityTopLevelUIElementAttributeValueHelper @ :
nsobject_t 			nswindow_accessibilityTopLevelUIElementAttributeValueHelper( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} convertRectToScreen: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				nswindow_convertRectToScreen( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: @ accessibilityHitTest: @ : {CGPoint=dd}
nsobject_t 			nswindow_accessibilityHitTest( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: d accessibilityVisibleArea @ :
double 				nswindow_accessibilityVisibleArea( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrame @ :
CGRect 				nswindow_accessibilityFrame( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsIgnored @ :
char 				nswindow_accessibilityIsIgnored( nswindow_t object );

// Signature from Objective-C Runtime: @ remoteUIElement @ :
nsobject_t 			nswindow_remoteUIElement( nswindow_t object );

// Signature from Objective-C Runtime: ^v windowRef @ :
void* 				nswindow_windowRef( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributeValue: @ : @
nsobject_t 			nswindow_accessibilityAttributeValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityWindowNumber @ :
long long 			nswindow_accessibilityWindowNumber( nswindow_t object );

// Signature from Objective-C Runtime: v setLevel: @ : q
void 				nswindow_setLevel( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: c isTabOverviewVisible @ :
char 				nswindow_isTabOverviewVisible( nswindow_t object );

// Signature from Objective-C Runtime: q titleVisibility @ :
long long 			nswindow_titleVisibility( nswindow_t object );

// Signature from Objective-C Runtime: @ tabbingIdentifier @ :
nsobject_t 			nswindow_tabbingIdentifier( nswindow_t object );

// Signature from Objective-C Runtime: @ windowController @ :
nsobject_t 			nswindow_windowController( nswindow_t object );

// Signature from Objective-C Runtime: c canEnterFullScreenMode @ :
char 				nswindow_canEnterFullScreenMode( nswindow_t object );

// Signature from Objective-C Runtime: v setTabbingIdentifier: @ : @
void 				nswindow_setTabbingIdentifier( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q tabbingMode @ :
long long 			nswindow_tabbingMode( nswindow_t object );

// Signature from Objective-C Runtime: v setTabbingMode: @ : q
void 				nswindow_setTabbingMode( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ tab @ :
nsobject_t 			nswindow_tab( nswindow_t object );

// Signature from Objective-C Runtime: Q styleMask @ :
unsigned long long 	nswindow_styleMask( nswindow_t object );

// Signature from Objective-C Runtime: @ sheetParent @ :
nsobject_t 			nswindow_sheetParent( nswindow_t object );

// Signature from Objective-C Runtime: c titlebarAppearsTransparent @ :
char 				nswindow_titlebarAppearsTransparent( nswindow_t object );

// Signature from Objective-C Runtime: c isResizable @ :
char 				nswindow_isResizable( nswindow_t object );

// Signature from Objective-C Runtime: c isKeyWindow @ :
char 				nswindow_isKeyWindow( nswindow_t object );

// Signature from Objective-C Runtime: v makeKeyAndOrderFront: @ : @
void 				nswindow_makeKeyAndOrderFront( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isMiniaturized @ :
char 				nswindow_isMiniaturized( nswindow_t object );

// Signature from Objective-C Runtime: v selectNextTab: @ : @
void 				nswindow_selectNextTab( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v selectPreviousTab: @ : @
void 				nswindow_selectPreviousTab( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v moveTabToNewWindow: @ : @
void 				nswindow_moveTabToNewWindow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v mergeAllWindows: @ : @
void 				nswindow_mergeAllWindows( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v toggleTabBar: @ : @
void 				nswindow_toggleTabBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v toggleTabOverview: @ : @
void 				nswindow_toggleTabOverview( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performCloseOtherTabs: @ : @
void 				nswindow_performCloseOtherTabs( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performClose: @ : @
void 				nswindow_performClose( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isTabbed @ :
char 				nswindow_isTabbed( nswindow_t object );

// Signature from Objective-C Runtime: v performCloseTabbedWindowGroup: @ : @
void 				nswindow_performCloseTabbedWindowGroup( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c performKeyEquivalent: @ : @
char 				nswindow_performKeyEquivalent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v pinTab: @ : @
void 				nswindow_pinTab( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unpinTab: @ : @
void 				nswindow_unpinTab( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ tabGroup @ :
nsobject_t 			nswindow_tabGroup( nswindow_t object );

// Signature from Objective-C Runtime: v setTabOverviewVisible: @ : c
void 				nswindow_setTabOverviewVisible( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v orderOutTabbedWindowGroup: @ : @
void 				nswindow_orderOutTabbedWindowGroup( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v windowDidBecomeTabbed @ :
void 				nswindow_windowDidBecomeTabbed( nswindow_t object );

// Signature from Objective-C Runtime: v set_beforeTabPickerResponder: @ : @
void 				nswindow_set_beforeTabPickerResponder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ supplementalTargetForAction:sender: @ : : @
nsobject_t 			nswindow_supplementalTargetForAction( nswindow_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setReleasedWhenClosed: @ : c
void 				nswindow_setReleasedWhenClosed( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v orderWindow:relativeTo: @ : q q
void 				nswindow_orderWindow( nswindow_t object, long long arg0, long long arg1 );

// Signature from Objective-C Runtime: v orderOut: @ : @
void 				nswindow_orderOut( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAlphaValue: @ : d
void 				nswindow_setAlphaValue( nswindow_t object, double arg0 );

// Signature from Objective-C Runtime: @ initWithContentRect:styleMask:backing:defer: @ : {CGRect={CGPoint=dd}{CGSize=dd}} Q Q c
nsobject_t 			nswindow_initWithContentRect( nswindow_t object, CGRect arg0, unsigned long long arg1, unsigned long long arg2, char arg3 );

// Signature from Objective-C Runtime: v setOpaque: @ : c
void 				nswindow_setOpaque( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setContentView: @ : @
void 				nswindow_setContentView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v orderFront: @ : @
void 				nswindow_orderFront( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v display @ :
void 				nswindow_display( nswindow_t object );

// Signature from Objective-C Runtime: v flushWindow @ :
void 				nswindow_flushWindow( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityHelpStringForChild: @ : @
nsobject_t 			nswindow_accessibilityHelpStringForChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilityIsChildFocusable: @ : @
char 				nswindow_accessibilityIsChildFocusable( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityPositionOfChild: @ : @
nsobject_t 			nswindow_accessibilityPositionOfChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySizeOfChild: @ : @
nsobject_t 			nswindow_accessibilitySizeOfChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilityShouldUseUniqueId @ :
char 				nswindow_accessibilityShouldUseUniqueId( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityRoleAttribute @ :
nsobject_t 			nswindow_accessibilityRoleAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsRoleAttributeSettable @ :
char 				nswindow_accessibilityIsRoleAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityRoleDescriptionAttribute @ :
nsobject_t 			nswindow_accessibilityRoleDescriptionAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsRoleDescriptionAttributeSettable @ :
char 				nswindow_accessibilityIsRoleDescriptionAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilitySubroleAttribute @ :
nsobject_t 			nswindow_accessibilitySubroleAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsSubroleAttributeSettable @ :
char 				nswindow_accessibilityIsSubroleAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityFocusedAttribute @ :
nsobject_t 			nswindow_accessibilityFocusedAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsFocusedAttributeSettable @ :
char 				nswindow_accessibilityIsFocusedAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsParentAttributeSettable @ :
char 				nswindow_accessibilityIsParentAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsWindowAttributeSettable @ :
char 				nswindow_accessibilityIsWindowAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityPositionAttribute @ :
nsobject_t 			nswindow_accessibilityPositionAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsPositionAttributeSettable @ :
char 				nswindow_accessibilityIsPositionAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilitySizeAttribute @ :
nsobject_t 			nswindow_accessibilitySizeAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsSizeAttributeSettable @ :
char 				nswindow_accessibilityIsSizeAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsAttributeSettable: @ : @
char 				nswindow_accessibilityIsAttributeSettable( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilitySetValue:forAttribute: @ : @ @
void 				nswindow_accessibilitySetValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ accessibilityActionNames @ :
nsobject_t 			nswindow_accessibilityActionNames( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityActionDescription: @ : @
nsobject_t 			nswindow_accessibilityActionDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityPerformAction: @ : @
void 				nswindow_accessibilityPerformAction( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} convertRectFromScreen: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				nswindow_convertRectFromScreen( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: @ colorSpace @ :
nsobject_t 			nswindow_colorSpace( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilitySupportsOverriddenAttributes @ :
char 				nswindow_accessibilitySupportsOverriddenAttributes( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityChildrenAttribute @ :
nsobject_t 			nswindow_accessibilityChildrenAttribute( nswindow_t object );

// Signature from Objective-C Runtime: v setMovable: @ : c
void 				nswindow_setMovable( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setCollectionBehavior: @ : Q
void 				nswindow_setCollectionBehavior( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setHidesOnDeactivate: @ : c
void 				nswindow_setHidesOnDeactivate( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setIgnoresMouseEvents: @ : c
void 				nswindow_setIgnoresMouseEvents( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: d backingScaleFactor @ :
double 				nswindow_backingScaleFactor( nswindow_t object );

// Signature from Objective-C Runtime: c isMovable @ :
char 				nswindow_isMovable( nswindow_t object );

// Signature from Objective-C Runtime: c canBecomeKeyWindow @ :
char 				nswindow_canBecomeKeyWindow( nswindow_t object );

// Signature from Objective-C Runtime: c canBecomeMainWindow @ :
char 				nswindow_canBecomeMainWindow( nswindow_t object );

// Signature from Objective-C Runtime: ^v graphicsPort @ :
void* 				nswindow_graphicsPort( nswindow_t object );

// Signature from Objective-C Runtime: @ toolbar @ :
nsobject_t 			nswindow_toolbar( nswindow_t object );

// Signature from Objective-C Runtime: v setToolbar: @ : @
void 				nswindow_setToolbar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ childWindows @ :
nsobject_t 			nswindow_childWindows( nswindow_t object );

// Signature from Objective-C Runtime: @ attachedSheet @ :
nsobject_t 			nswindow_attachedSheet( nswindow_t object );

// Signature from Objective-C Runtime: v layoutIfNeeded @ :
void 				nswindow_layoutIfNeeded( nswindow_t object );

// Signature from Objective-C Runtime: v exitFullScreenMode: @ : @
void 				nswindow_exitFullScreenMode( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v disableCursorRects @ :
void 				nswindow_disableCursorRects( nswindow_t object );

// Signature from Objective-C Runtime: v enableCursorRects @ :
void 				nswindow_enableCursorRects( nswindow_t object );

// Signature from Objective-C Runtime: @ stringWithSavedFrame @ :
nsobject_t 			nswindow_stringWithSavedFrame( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} mouseLocationOutsideOfEventStream @ :
CGPoint 			nswindow_mouseLocationOutsideOfEventStream( nswindow_t object );

// Signature from Objective-C Runtime: v setRestorable: @ : c
void 				nswindow_setRestorable( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setMovableByWindowBackground: @ : c
void 				nswindow_setMovableByWindowBackground( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setDefaultButtonCell: @ : @
void 				nswindow_setDefaultButtonCell( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q animationBehavior @ :
long long 			nswindow_animationBehavior( nswindow_t object );

// Signature from Objective-C Runtime: v setAnimationBehavior: @ : q
void 				nswindow_setAnimationBehavior( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v beginCriticalSheet:completionHandler: @ : @ @?
void 				nswindow_beginCriticalSheet( nswindow_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: v beginSheet:completionHandler: @ : @ @?
void 				nswindow_beginSheet( nswindow_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: v endSheet:returnCode: @ : @ q
void 				nswindow_endSheet( nswindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: c isSheet @ :
char 				nswindow_isSheet( nswindow_t object );

// Signature from Objective-C Runtime: v setInitialFirstResponder: @ : @
void 				nswindow_setInitialFirstResponder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initialFirstResponder @ :
nsobject_t 			nswindow_initialFirstResponder( nswindow_t object );

// Signature from Objective-C Runtime: v setAnchorAttribute:forOrientation: @ : q q
void 				nswindow_setAnchorAttribute( nswindow_t object, long long arg0, long long arg1 );

// Signature from Objective-C Runtime: v setContentSize: @ : {CGSize=dd}
void 				nswindow_setContentSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: @ animations @ :
nsobject_t 			nswindow_animations( nswindow_t object );

// Signature from Objective-C Runtime: @ validRequestorForSendType:returnType: @ : @ @
nsobject_t 			nswindow_validRequestorForSendType( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: c canHide @ :
char 				nswindow_canHide( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilityPostNotification: @ : @
void 				nswindow_accessibilityPostNotification( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v center @ :
void 				nswindow_center( nswindow_t object );

// Signature from Objective-C Runtime: v setFrameTopLeftPoint: @ : {CGPoint=dd}
void 				nswindow_setFrameTopLeftPoint( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v deminiaturize: @ : @
void 				nswindow_deminiaturize( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c hidesOnDeactivate @ :
char 				nswindow_hidesOnDeactivate( nswindow_t object );

// Signature from Objective-C Runtime: @ sheets @ :
nsobject_t 			nswindow_sheets( nswindow_t object );

// Signature from Objective-C Runtime: v encodeRestorableStateWithCoder: @ : @
void 				nswindow_encodeRestorableStateWithCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v restoreStateWithCoder: @ : @
void 				nswindow_restoreStateWithCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ currentEvent @ :
nsobject_t 			nswindow_currentEvent( nswindow_t object );

// Signature from Objective-C Runtime: v makeMainWindow @ :
void 				nswindow_makeMainWindow( nswindow_t object );

// Signature from Objective-C Runtime: v quickLookPreviewItems: @ : @
void 				nswindow_quickLookPreviewItems( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v becomeKeyWindow @ :
void 				nswindow_becomeKeyWindow( nswindow_t object );

// Signature from Objective-C Runtime: @ dockTile @ :
nsobject_t 			nswindow_dockTile( nswindow_t object );

// Signature from Objective-C Runtime: @ userInterfaceItemIdentifier @ :
nsobject_t 			nswindow_userInterfaceItemIdentifier( nswindow_t object );

// Signature from Objective-C Runtime: v doCommandBySelector: @ : :
void 				nswindow_doCommandBySelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v enterFullScreenMode: @ : @
void 				nswindow_enterFullScreenMode( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q occlusionState @ :
unsigned long long 	nswindow_occlusionState( nswindow_t object );

// Signature from Objective-C Runtime: v rightMouseDown: @ : @
void 				nswindow_rightMouseDown( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v quickLookPreviewItemsAtWindowLocation: @ : {CGPoint=dd}
void 				nswindow_quickLookPreviewItemsAtWindowLocation( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setMenu: @ : @
void 				nswindow_setMenu( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setCanEnterFullScreenMode: @ : c
void 				nswindow_setCanEnterFullScreenMode( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setUserInterfaceItemIdentifier: @ : @
void 				nswindow_setUserInterfaceItemIdentifier( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v toggleFullScreen: @ : @
void 				nswindow_toggleFullScreen( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setWindowController: @ : @
void 				nswindow_setWindowController( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilityIsChildOfApp @ :
char 				nswindow_accessibilityIsChildOfApp( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityTitleAttribute @ :
nsobject_t 			nswindow_accessibilityTitleAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsTitleAttributeSettable @ :
char 				nswindow_accessibilityIsTitleAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityChildrenInNavigationOrderAttribute @ :
nsobject_t 			nswindow_accessibilityChildrenInNavigationOrderAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsChildrenAttributeSettable @ :
char 				nswindow_accessibilityIsChildrenAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAuditIssuesAttribute @ :
nsobject_t 			nswindow_accessibilityAuditIssuesAttribute( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} constrainFrameRect:toScreen: @ : {CGRect={CGPoint=dd}{CGSize=dd}} @
CGRect 				nswindow_constrainFrameRect( nswindow_t object, CGRect arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ handlePrintScriptCommand: @ : @
nsobject_t 			nswindow_handlePrintScriptCommand( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ representedURL @ :
nsobject_t 			nswindow_representedURL( nswindow_t object );

// Signature from Objective-C Runtime: Q collectionBehavior @ :
unsigned long long 	nswindow_collectionBehavior( nswindow_t object );

// Signature from Objective-C Runtime: v setTitlebarAppearsTransparent: @ : c
void 				nswindow_setTitlebarAppearsTransparent( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setContentViewController: @ : @
void 				nswindow_setContentViewController( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} maxFullScreenContentSize @ :
CGSize 				nswindow_maxFullScreenContentSize( nswindow_t object );

// Signature from Objective-C Runtime: v setHasShadow: @ : c
void 				nswindow_setHasShadow( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setStyleMask: @ : Q
void 				nswindow_setStyleMask( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setAppearance: @ : @
void 				nswindow_setAppearance( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityActivationPointAttribute @ :
nsobject_t 			nswindow_accessibilityActivationPointAttribute( nswindow_t object );

// Signature from Objective-C Runtime: v setFrameFromString: @ : @
void 				nswindow_setFrameFromString( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v displayIfNeeded @ :
void 				nswindow_displayIfNeeded( nswindow_t object );

// Signature from Objective-C Runtime: q titlePosition @ :
long long 			nswindow_titlePosition( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} backingAlignedRect:options: @ : {CGRect={CGPoint=dd}{CGSize=dd}} Q
CGRect 				nswindow_backingAlignedRect( nswindow_t object, CGRect arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: v setTitlePosition: @ : q
void 				nswindow_setTitlePosition( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} convertRectToBacking: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				nswindow_convertRectToBacking( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} convertRectFromBacking: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				nswindow_convertRectFromBacking( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: @ accessibilityTitleUIElementAttribute @ :
nsobject_t 			nswindow_accessibilityTitleUIElementAttribute( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} convertBaseToScreen: @ : {CGPoint=dd}
CGPoint 			nswindow_convertBaseToScreen( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: c accessibilityIsTitleUIElementAttributeSettable @ :
char 				nswindow_accessibilityIsTitleUIElementAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c hasKeyAppearance @ :
char 				nswindow_hasKeyAppearance( nswindow_t object );

// Signature from Objective-C Runtime: v disableFlushWindow @ :
void 				nswindow_disableFlushWindow( nswindow_t object );

// Signature from Objective-C Runtime: v enableFlushWindow @ :
void 				nswindow_enableFlushWindow( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} convertPointToBacking: @ : {CGPoint=dd}
CGPoint 			nswindow_convertPointToBacking( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v keyDown: @ : @
void 				nswindow_keyDown( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c inLiveResize @ :
char 				nswindow_inLiveResize( nswindow_t object );

// Signature from Objective-C Runtime: c preservesContentDuringLiveResize @ :
char 				nswindow_preservesContentDuringLiveResize( nswindow_t object );

// Signature from Objective-C Runtime: v dragImage:at:offset:event:pasteboard:source:slideBack: @ : @ {CGPoint=dd} {CGSize=dd} @ @ @ c
void 				nswindow_dragImage( nswindow_t object, nsobject_t arg0, CGPoint arg1, CGSize arg2, nsobject_t arg3, nsobject_t arg4, nsobject_t arg5, char arg6 );

// Signature from Objective-C Runtime: v registerForDraggedTypes: @ : @
void 				nswindow_registerForDraggedTypes( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unregisterDraggedTypes @ :
void 				nswindow_unregisterDraggedTypes( nswindow_t object );

// Signature from Objective-C Runtime: Q draggingEntered: @ : @
unsigned long long 	nswindow_draggingEntered( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q draggingUpdated: @ : @
unsigned long long 	nswindow_draggingUpdated( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v draggingExited: @ : @
void 				nswindow_draggingExited( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v draggingEnded: @ : @
void 				nswindow_draggingEnded( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c performDragOperation: @ : @
char 				nswindow_performDragOperation( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ registeredDraggedTypes @ :
nsobject_t 			nswindow_registeredDraggedTypes( nswindow_t object );

// Signature from Objective-C Runtime: @ animationForKey: @ : @
nsobject_t 			nswindow_animationForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setViewsNeedDisplay: @ : c
void 				nswindow_setViewsNeedDisplay( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v disableKeyEquivalentForDefaultButtonCell @ :
void 				nswindow_disableKeyEquivalentForDefaultButtonCell( nswindow_t object );

// Signature from Objective-C Runtime: v enableKeyEquivalentForDefaultButtonCell @ :
void 				nswindow_enableKeyEquivalentForDefaultButtonCell( nswindow_t object );

// Signature from Objective-C Runtime: c performMnemonic: @ : @
char 				nswindow_performMnemonic( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} convertPointFromBacking: @ : {CGPoint=dd}
CGPoint 			nswindow_convertPointFromBacking( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: d alphaValue @ :
double 				nswindow_alphaValue( nswindow_t object );

// Signature from Objective-C Runtime: v cancelOperation: @ : @
void 				nswindow_cancelOperation( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setDepthLimit: @ : i
void 				nswindow_setDepthLimit( nswindow_t object, int arg0 );

// Signature from Objective-C Runtime: i depthLimit @ :
int 				nswindow_depthLimit( nswindow_t object );

// Signature from Objective-C Runtime: @ appearanceParent @ :
nsobject_t 			nswindow_appearanceParent( nswindow_t object );

// Signature from Objective-C Runtime: v setAppearanceParent: @ : @
void 				nswindow_setAppearanceParent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c areCursorRectsEnabled @ :
char 				nswindow_areCursorRectsEnabled( nswindow_t object );

// Signature from Objective-C Runtime: @ deviceDescription @ :
nsobject_t 			nswindow_deviceDescription( nswindow_t object );

// Signature from Objective-C Runtime: v setResizeIncrements: @ : {CGSize=dd}
void 				nswindow_setResizeIncrements( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: c isExcludedFromWindowsMenu @ :
char 				nswindow_isExcludedFromWindowsMenu( nswindow_t object );

// Signature from Objective-C Runtime: c isMainWindow @ :
char 				nswindow_isMainWindow( nswindow_t object );

// Signature from Objective-C Runtime: v becomeMainWindow @ :
void 				nswindow_becomeMainWindow( nswindow_t object );

// Signature from Objective-C Runtime: c ignoresMouseEvents @ :
char 				nswindow_ignoresMouseEvents( nswindow_t object );

// Signature from Objective-C Runtime: v resignMainWindow @ :
void 				nswindow_resignMainWindow( nswindow_t object );

// Signature from Objective-C Runtime: c isAutodisplay @ :
char 				nswindow_isAutodisplay( nswindow_t object );

// Signature from Objective-C Runtime: v setAutodisplay: @ : c
void 				nswindow_setAutodisplay( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} startRectForSheet: @ : @
CGRect 				nswindow_startRectForSheet( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v print: @ : @
void 				nswindow_print( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c worksWhenModal @ :
char 				nswindow_worksWhenModal( nswindow_t object );

// Signature from Objective-C Runtime: @ contentViewController @ :
nsobject_t 			nswindow_contentViewController( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} frameRectForContentRect:styleMask: @ : {CGRect={CGPoint=dd}{CGSize=dd}} Q
CGRect 				nswindow_frameRectForContentRect( nswindow_t object, CGRect arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} contentRectForFrameRect:styleMask: @ : {CGRect={CGPoint=dd}{CGSize=dd}} Q
CGRect 				nswindow_contentRectForFrameRect( nswindow_t object, CGRect arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: {CGSize=dd} minFrameSizeForMinContentSize:styleMask: @ : {CGSize=dd} Q
CGSize 				nswindow_minFrameSizeForMinContentSize( nswindow_t object, CGSize arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ windowTitleController @ :
nsobject_t 			nswindow_windowTitleController( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} dragRectForFrameRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				nswindow_dragRectForFrameRect( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} resizeIncrements @ :
CGSize 				nswindow_resizeIncrements( nswindow_t object );

// Signature from Objective-C Runtime: v setAspectRatio: @ : {CGSize=dd}
void 				nswindow_setAspectRatio( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} aspectRatio @ :
CGSize 				nswindow_aspectRatio( nswindow_t object );

// Signature from Objective-C Runtime: @ undoManager @ :
nsobject_t 			nswindow_undoManager( nswindow_t object );

// Signature from Objective-C Runtime: v invalidateCursorRectsForView: @ : @
void 				nswindow_invalidateCursorRectsForView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilitySections: @ : @
void 				nswindow_setAccessibilitySections( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setMinSize: @ : {CGSize=dd}
void 				nswindow_setMinSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v setMaxSize: @ : {CGSize=dd}
void 				nswindow_setMaxSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: @ accessibilitySectionsAttribute @ :
nsobject_t 			nswindow_accessibilitySectionsAttribute( nswindow_t object );

// Signature from Objective-C Runtime: v constraintsDidChangeInEngine: @ : @
void 				nswindow_constraintsDidChangeInEngine( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isMovableByWindowBackground @ :
char 				nswindow_isMovableByWindowBackground( nswindow_t object );

// Signature from Objective-C Runtime: Q keyViewSelectionDirection @ :
unsigned long long 	nswindow_keyViewSelectionDirection( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} convertPointFromScreen: @ : {CGPoint=dd}
CGPoint 			nswindow_convertPointFromScreen( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: d contentBorderThicknessForEdge: @ : Q
double 				nswindow_contentBorderThicknessForEdge( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: c canRepresentDisplayGamut: @ : q
char 				nswindow_canRepresentDisplayGamut( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setRestorationClass: @ : #
void 				nswindow_setRestorationClass( nswindow_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: v recalculateKeyViewLoop @ :
void 				nswindow_recalculateKeyViewLoop( nswindow_t object );

// Signature from Objective-C Runtime: @ frameAutosaveName @ :
nsobject_t 			nswindow_frameAutosaveName( nswindow_t object );

// Signature from Objective-C Runtime: v saveFrameUsingName: @ : @
void 				nswindow_saveFrameUsingName( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c setFrameUsingName: @ : @
char 				nswindow_setFrameUsingName( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c setFrameAutosaveName: @ : @
char 				nswindow_setFrameAutosaveName( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ standardWindowButton: @ : Q
nsobject_t 			nswindow_standardWindowButton( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v selectNextKeyView: @ : @
void 				nswindow_selectNextKeyView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v selectPreviousKeyView: @ : @
void 				nswindow_selectPreviousKeyView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NS_touchBarProviders @ :
nsobject_t 			nswindow_NS_touchBarProviders( nswindow_t object );

// Signature from Objective-C Runtime: @ NS_touchBarProvidersKeyPaths @ :
nsobject_t 			nswindow_NS_touchBarProvidersKeyPaths( nswindow_t object );

// Signature from Objective-C Runtime: @ miniwindowTitle @ :
nsobject_t 			nswindow_miniwindowTitle( nswindow_t object );

// Signature from Objective-C Runtime: c titlebarAppearsTransparentWhenFullscreen @ :
char 				nswindow_titlebarAppearsTransparentWhenFullscreen( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} convertPointToScreen: @ : {CGPoint=dd}
CGPoint 			nswindow_convertPointToScreen( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v endEditingFor: @ : @
void 				nswindow_endEditingFor( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ fieldEditor:forObject: @ : c @
nsobject_t 			nswindow_fieldEditor( nswindow_t object, char arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v toggleSidebar: @ : @
void 				nswindow_toggleSidebar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setTitleVisibility: @ : q
void 				nswindow_setTitleVisibility( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: c canBecomeVisibleWithoutLogin @ :
char 				nswindow_canBecomeVisibleWithoutLogin( nswindow_t object );

// Signature from Objective-C Runtime: Q shadowOptions @ :
unsigned long long 	nswindow_shadowOptions( nswindow_t object );

// Signature from Objective-C Runtime: c hasShadow @ :
char 				nswindow_hasShadow( nswindow_t object );

// Signature from Objective-C Runtime: v addChildWindow:ordered: @ : @ q
void 				nswindow_addChildWindow( nswindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: v removeChildWindow: @ : @
void 				nswindow_removeChildWindow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c shouldBeTreatedAsInkEvent: @ : @
char 				nswindow_shouldBeTreatedAsInkEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v selectKeyViewPrecedingView: @ : @
void 				nswindow_selectKeyViewPrecedingView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v selectKeyViewFollowingView: @ : @
void 				nswindow_selectKeyViewFollowingView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setRepresentedFilename: @ : @
void 				nswindow_setRepresentedFilename( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v discardEventsMatchingMask:beforeEvent: @ : Q @
void 				nswindow_discardEventsMatchingMask( nswindow_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: c isDocumentEdited @ :
char 				nswindow_isDocumentEdited( nswindow_t object );

// Signature from Objective-C Runtime: v editTitleWithCompletionHandler: @ : @?
void 				nswindow_editTitleWithCompletionHandler( nswindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: v setDocumentEdited: @ : c
void 				nswindow_setDocumentEdited( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c isFloatingPanel @ :
char 				nswindow_isFloatingPanel( nswindow_t object );

// Signature from Objective-C Runtime: c allowsCursorRectsWhenInactive @ :
char 				nswindow_allowsCursorRectsWhenInactive( nswindow_t object );

// Signature from Objective-C Runtime: v discardCursorRects @ :
void 				nswindow_discardCursorRects( nswindow_t object );

// Signature from Objective-C Runtime: v GDBDumpCursorRects @ :
void 				nswindow_GDBDumpCursorRects( nswindow_t object );

// Signature from Objective-C Runtime: v cursorUpdate: @ : @
void 				nswindow_cursorUpdate( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAllowsCursorRectsWhenInactive: @ : c
void 				nswindow_setAllowsCursorRectsWhenInactive( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} contentLayoutRect @ :
CGRect 				nswindow_contentLayoutRect( nswindow_t object );

// Signature from Objective-C Runtime: @ handleSaveScriptCommand: @ : @
nsobject_t 			nswindow_handleSaveScriptCommand( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ handleCloseScriptCommand: @ : @
nsobject_t 			nswindow_handleCloseScriptCommand( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ titlebarAccessoryViewControllers @ :
nsobject_t 			nswindow_titlebarAccessoryViewControllers( nswindow_t object );

// Signature from Objective-C Runtime: v addTitlebarAccessoryViewController: @ : @
void 				nswindow_addTitlebarAccessoryViewController( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v flushWindowIfNeeded @ :
void 				nswindow_flushWindowIfNeeded( nswindow_t object );

// Signature from Objective-C Runtime: v updateDraggingItemsForDrag: @ : @
void 				nswindow_updateDraggingItemsForDrag( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c prepareForDragOperation: @ : @
char 				nswindow_prepareForDragOperation( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v concludeDragOperation: @ : @
void 				nswindow_concludeDragOperation( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c wantsPeriodicDraggingUpdates @ :
char 				nswindow_wantsPeriodicDraggingUpdates( nswindow_t object );

// Signature from Objective-C Runtime: @ drawers @ :
nsobject_t 			nswindow_drawers( nswindow_t object );

// Signature from Objective-C Runtime: @ openDrawers @ :
nsobject_t 			nswindow_openDrawers( nswindow_t object );

// Signature from Objective-C Runtime: v setParentWindow: @ : @
void 				nswindow_setParentWindow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setOneShot: @ : c
void 				nswindow_setOneShot( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setCanHide: @ : c
void 				nswindow_setCanHide( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setCanBecomeVisibleWithoutLogin: @ : c
void 				nswindow_setCanBecomeVisibleWithoutLogin( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c tryToPerform:with: @ : : @
char 				nswindow_tryToPerform( nswindow_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v helpRequested: @ : @
void 				nswindow_helpRequested( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v showToolbar: @ : @
void 				nswindow_showToolbar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v hideToolbar: @ : @
void 				nswindow_hideToolbar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v toggleToolbarShown: @ : @
void 				nswindow_toggleToolbarShown( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v runToolbarCustomizationPalette: @ : @
void 				nswindow_runToolbarCustomizationPalette( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performZoom: @ : @
void 				nswindow_performZoom( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performMiniaturize: @ : @
void 				nswindow_performMiniaturize( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performWindowDragWithEvent: @ : @
void 				nswindow_performWindowDragWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilitySetSizeAttribute: @ : @
void 				nswindow_accessibilitySetSizeAttribute( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v acquireKeyAppearance @ :
void 				nswindow_acquireKeyAppearance( nswindow_t object );

// Signature from Objective-C Runtime: v resignKeyAppearance @ :
void 				nswindow_resignKeyAppearance( nswindow_t object );

// Signature from Objective-C Runtime: v trackEventsMatchingMask:timeout:mode:handler: @ : Q d @ @?
void 				nswindow_trackEventsMatchingMask( nswindow_t object, unsigned long long arg0, double arg1, nsobject_t arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: c isInKeyWindow @ :
char 				nswindow_isInKeyWindow( nswindow_t object );

// Signature from Objective-C Runtime: @ recursiveDescription @ :
nsobject_t 			nswindow_recursiveDescription( nswindow_t object );

// Signature from Objective-C Runtime: # restorationClass @ :
nsclass_t 			nswindow_restorationClass( nswindow_t object );

// Signature from Objective-C Runtime: @ inspectorBar @ :
nsobject_t 			nswindow_inspectorBar( nswindow_t object );

// Signature from Objective-C Runtime: @ functionRow @ :
nsobject_t 			nswindow_functionRow( nswindow_t object );

// Signature from Objective-C Runtime: v setAppearanceSource: @ : @
void 				nswindow_setAppearanceSource( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setRepresentedURL: @ : @
void 				nswindow_setRepresentedURL( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ representedFilename @ :
nsobject_t 			nswindow_representedFilename( nswindow_t object );

// Signature from Objective-C Runtime: @ graphicsContext @ :
nsobject_t 			nswindow_graphicsContext( nswindow_t object );

// Signature from Objective-C Runtime: q anchorAttributeForOrientation: @ : q
long long 			nswindow_anchorAttributeForOrientation( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v updateConstraintsIfNeeded @ :
void 				nswindow_updateConstraintsIfNeeded( nswindow_t object );

// Signature from Objective-C Runtime: c hasAmbiguousLayout @ :
char 				nswindow_hasAmbiguousLayout( nswindow_t object );

// Signature from Objective-C Runtime: c becomesKeyOnlyIfNeeded @ :
char 				nswindow_becomesKeyOnlyIfNeeded( nswindow_t object );

// Signature from Objective-C Runtime: v zoom: @ : @
void 				nswindow_zoom( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ tabbedWindows @ :
nsobject_t 			nswindow_tabbedWindows( nswindow_t object );

// Signature from Objective-C Runtime: v setBackingType: @ : Q
void 				nswindow_setBackingType( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v miniaturize: @ : @
void 				nswindow_miniaturize( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ contentLayoutGuide @ :
nsobject_t 			nswindow_contentLayoutGuide( nswindow_t object );

// Signature from Objective-C Runtime: v setPreservesContentDuringLiveResize: @ : c
void 				nswindow_setPreservesContentDuringLiveResize( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: d animationResizeTime: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
double 				nswindow_animationResizeTime( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: c preventsApplicationTerminationWhenModal @ :
char 				nswindow_preventsApplicationTerminationWhenModal( nswindow_t object );

// Signature from Objective-C Runtime: v setPreventsApplicationTerminationWhenModal: @ : c
void 				nswindow_setPreventsApplicationTerminationWhenModal( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c allowsToolTipsWhenApplicationIsInactive @ :
char 				nswindow_allowsToolTipsWhenApplicationIsInactive( nswindow_t object );

// Signature from Objective-C Runtime: v setShowsToolbarButton: @ : c
void 				nswindow_setShowsToolbarButton( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setContentMinSize: @ : {CGSize=dd}
void 				nswindow_setContentMinSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v setContentMaxSize: @ : {CGSize=dd}
void 				nswindow_setContentMaxSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: Q gestureEventMask @ :
unsigned long long 	nswindow_gestureEventMask( nswindow_t object );

// Signature from Objective-C Runtime: v setGestureEventMask: @ : Q
void 				nswindow_setGestureEventMask( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v quickLookWithEvent: @ : @
void 				nswindow_quickLookWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAutorecalculatesKeyViewLoop: @ : c
void 				nswindow_setAutorecalculatesKeyViewLoop( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setTitlebarAlphaValue: @ : d
void 				nswindow_setTitlebarAlphaValue( nswindow_t object, double arg0 );

// Signature from Objective-C Runtime: @ titlebarViewController @ :
nsobject_t 			nswindow_titlebarViewController( nswindow_t object );

// Signature from Objective-C Runtime: @ deepestScreen @ :
nsobject_t 			nswindow_deepestScreen( nswindow_t object );

// Signature from Objective-C Runtime: d userSpaceScaleFactor @ :
double 				nswindow_userSpaceScaleFactor( nswindow_t object );

// Signature from Objective-C Runtime: Q sheetBehavior @ :
unsigned long long 	nswindow_sheetBehavior( nswindow_t object );

// Signature from Objective-C Runtime: c showsAutosaveButton @ :
char 				nswindow_showsAutosaveButton( nswindow_t object );

// Signature from Objective-C Runtime: v setShowsAutosaveButton: @ : c
void 				nswindow_setShowsAutosaveButton( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v unregisterSplitViewItemSeparatorTrackingAdapter: @ : @
void 				nswindow_unregisterSplitViewItemSeparatorTrackingAdapter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v registerSplitViewItemSeparatorTrackingAdapter: @ : @
void 				nswindow_registerSplitViewItemSeparatorTrackingAdapter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAllowsToolTipsWhenApplicationIsInactive: @ : c
void 				nswindow_setAllowsToolTipsWhenApplicationIsInactive( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c acceptsMouseMovedEvents @ :
char 				nswindow_acceptsMouseMovedEvents( nswindow_t object );

// Signature from Objective-C Runtime: c bottomCornerRounded @ :
char 				nswindow_bottomCornerRounded( nswindow_t object );

// Signature from Objective-C Runtime: v setAcceptsMouseMovedEvents: @ : c
void 				nswindow_setAcceptsMouseMovedEvents( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c autorecalculatesContentBorderThicknessForEdge: @ : Q
char 				nswindow_autorecalculatesContentBorderThicknessForEdge( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v disableScreenUpdatesUntilFlush @ :
void 				nswindow_disableScreenUpdatesUntilFlush( nswindow_t object );

// Signature from Objective-C Runtime: v setInspectorBar: @ : @
void 				nswindow_setInspectorBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c showsContentSeparatorForEdge: @ : Q
char 				nswindow_showsContentSeparatorForEdge( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v removeUnderTitlebarView:withAssociatedWithView: @ : @ @
void 				nswindow_removeUnderTitlebarView( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: c showsToolbarButton @ :
char 				nswindow_showsToolbarButton( nswindow_t object );

// Signature from Objective-C Runtime: c showsLockButton @ :
char 				nswindow_showsLockButton( nswindow_t object );

// Signature from Objective-C Runtime: c showsFullScreenButton @ :
char 				nswindow_showsFullScreenButton( nswindow_t object );

// Signature from Objective-C Runtime: c prefersFullWidthTitlebarWhenAccessoriesVisible @ :
char 				nswindow_prefersFullWidthTitlebarWhenAccessoriesVisible( nswindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} contentMinSize @ :
CGSize 				nswindow_contentMinSize( nswindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} contentMaxSize @ :
CGSize 				nswindow_contentMaxSize( nswindow_t object );

// Signature from Objective-C Runtime: v setContentBorderThickness:forEdge: @ : d Q
void 				nswindow_setContentBorderThickness( nswindow_t object, double arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: q windowTitlebarLayoutDirection @ :
long long 			nswindow_windowTitlebarLayoutDirection( nswindow_t object );

// Signature from Objective-C Runtime: q toolbarStyle @ :
long long 			nswindow_toolbarStyle( nswindow_t object );

// Signature from Objective-C Runtime: v setBottomCornerRounded: @ : c
void 				nswindow_setBottomCornerRounded( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v addUnderTitlebarView:withAssociatedWithView: @ : @ @
void 				nswindow_addUnderTitlebarView( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setPrefersFullWidthTitlebarWhenAccessoriesVisible: @ : c
void 				nswindow_setPrefersFullWidthTitlebarWhenAccessoriesVisible( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: q titlebarBlendingMode @ :
long long 			nswindow_titlebarBlendingMode( nswindow_t object );

// Signature from Objective-C Runtime: d titlebarAlphaValue @ :
double 				nswindow_titlebarAlphaValue( nswindow_t object );

// Signature from Objective-C Runtime: v removeTitlebarAccessoryViewControllerAtIndex: @ : q
void 				nswindow_removeTitlebarAccessoryViewControllerAtIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v disableSnapshotRestoration @ :
void 				nswindow_disableSnapshotRestoration( nswindow_t object );

// Signature from Objective-C Runtime: v enableSnapshotRestoration @ :
void 				nswindow_enableSnapshotRestoration( nswindow_t object );

// Signature from Objective-C Runtime: @ snapshotFromRect:options: @ : {CGRect={CGPoint=dd}{CGSize=dd}} Q
nsobject_t 			nswindow_snapshotFromRect( nswindow_t object, CGRect arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: {CGPoint=dd} topLeftPoint @ :
CGPoint 			nswindow_topLeftPoint( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} cascadeTopLeftFromPoint: @ : {CGPoint=dd}
CGPoint 			nswindow_cascadeTopLeftFromPoint( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setExcludedFromWindowsMenu: @ : c
void 				nswindow_setExcludedFromWindowsMenu( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setToolbarStyle: @ : q
void 				nswindow_setToolbarStyle( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: Q resizeFlags @ :
unsigned long long 	nswindow_resizeFlags( nswindow_t object );

// Signature from Objective-C Runtime: @ windowSectionController @ :
nsobject_t 			nswindow_windowSectionController( nswindow_t object );

// Signature from Objective-C Runtime: v toggleUsingSmallToolbarIcons: @ : @
void 				nswindow_toggleUsingSmallToolbarIcons( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setTitlebarSeparatorStyle: @ : q
void 				nswindow_setTitlebarSeparatorStyle( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v changeToolbarDisplayModeToNumber: @ : @
void 				nswindow_changeToolbarDisplayModeToNumber( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v changeToolbarDisplayMode: @ : @
void 				nswindow_changeToolbarDisplayMode( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q backingType @ :
unsigned long long 	nswindow_backingType( nswindow_t object );

// Signature from Objective-C Runtime: c canStoreColor @ :
char 				nswindow_canStoreColor( nswindow_t object );

// Signature from Objective-C Runtime: c allowsConcurrentViewDrawing @ :
char 				nswindow_allowsConcurrentViewDrawing( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} frameOrigin @ :
CGPoint 			nswindow_frameOrigin( nswindow_t object );

// Signature from Objective-C Runtime: q gState @ :
long long 			nswindow_gState( nswindow_t object );

// Signature from Objective-C Runtime: c hasKeyAppearanceIncludingSheets: @ : c
char 				nswindow_hasKeyAppearanceIncludingSheets( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setDisplaysWhenScreenProfileChanges: @ : c
void 				nswindow_setDisplaysWhenScreenProfileChanges( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setAutorecalculatesContentBorderThickness:forEdge: @ : c Q
void 				nswindow_setAutorecalculatesContentBorderThickness( nswindow_t object, char arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: c hasDynamicDepthLimit @ :
char 				nswindow_hasDynamicDepthLimit( nswindow_t object );

// Signature from Objective-C Runtime: v guessDockTitle: @ : @
void 				nswindow_guessDockTitle( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v lockButtonClicked: @ : @
void 				nswindow_lockButtonClicked( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c allowsInteriorShadow @ :
char 				nswindow_allowsInteriorShadow( nswindow_t object );

// Signature from Objective-C Runtime: c isFlushWindowDisabled @ :
char 				nswindow_isFlushWindowDisabled( nswindow_t object );

// Signature from Objective-C Runtime: Q shadowStyle @ :
unsigned long long 	nswindow_shadowStyle( nswindow_t object );

// Signature from Objective-C Runtime: @ shadowParameters @ :
nsobject_t 			nswindow_shadowParameters( nswindow_t object );

// Signature from Objective-C Runtime: c viewsNeedDisplay @ :
char 				nswindow_viewsNeedDisplay( nswindow_t object );

// Signature from Objective-C Runtime: v changeToolBarDisplayModeToDisplayMode: @ : Q
void 				nswindow_changeToolBarDisplayModeToDisplayMode( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} mouseConfinementRect @ :
CGRect 				nswindow_mouseConfinementRect( nswindow_t object );

// Signature from Objective-C Runtime: c displaysWhenScreenProfileChanges @ :
char 				nswindow_displaysWhenScreenProfileChanges( nswindow_t object );

// Signature from Objective-C Runtime: v setUnsnappedFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				nswindow_setUnsnappedFrame( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} unsnappedFrame @ :
CGRect 				nswindow_unsnappedFrame( nswindow_t object );

// Signature from Objective-C Runtime: @ defaultButtonCell @ :
nsobject_t 			nswindow_defaultButtonCell( nswindow_t object );

// Signature from Objective-C Runtime: v resignMainAppearance @ :
void 				nswindow_resignMainAppearance( nswindow_t object );

// Signature from Objective-C Runtime: v acquireMainAppearance @ :
void 				nswindow_acquireMainAppearance( nswindow_t object );

// Signature from Objective-C Runtime: c isRestorable @ :
char 				nswindow_isRestorable( nswindow_t object );

// Signature from Objective-C Runtime: v cacheMiniwindowTitle:guess: @ : @ c
void 				nswindow_cacheMiniwindowTitle( nswindow_t object, nsobject_t arg0, char arg1 );

// Signature from Objective-C Runtime: @ timeMachineDelegate @ :
nsobject_t 			nswindow_timeMachineDelegate( nswindow_t object );

// Signature from Objective-C Runtime: c hasMainAppearance @ :
char 				nswindow_hasMainAppearance( nswindow_t object );

// Signature from Objective-C Runtime: @ dataWithEPSInsideRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
nsobject_t 			nswindow_dataWithEPSInsideRect( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: @ dataWithPDFInsideRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
nsobject_t 			nswindow_dataWithPDFInsideRect( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: c registerScrollViewSeparatorTrackingAdapter: @ : @
char 				nswindow_registerScrollViewSeparatorTrackingAdapter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unregisterScrollViewSeparatorTrackingAdapter: @ : @
void 				nswindow_unregisterScrollViewSeparatorTrackingAdapter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v editTitle: @ : @
void 				nswindow_editTitle( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ animationForKeyPath: @ : @
nsobject_t 			nswindow_animationForKeyPath( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v adjustLayoutForResolutionChangeToRetina: @ : c
void 				nswindow_adjustLayoutForResolutionChangeToRetina( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v rebuildLayoutFromScratch @ :
void 				nswindow_rebuildLayoutFromScratch( nswindow_t object );

// Signature from Objective-C Runtime: c isPreferenceToolbarWindow @ :
char 				nswindow_isPreferenceToolbarWindow( nswindow_t object );

// Signature from Objective-C Runtime: q titlebarSeparatorStyle @ :
long long 			nswindow_titlebarSeparatorStyle( nswindow_t object );

// Signature from Objective-C Runtime: q contentTitlebarSeparatorStyle @ :
long long 			nswindow_contentTitlebarSeparatorStyle( nswindow_t object );

// Signature from Objective-C Runtime: v setContentTitlebarSeparatorStyle: @ : q
void 				nswindow_setContentTitlebarSeparatorStyle( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setTitleWithRepresentedFilename: @ : @
void 				nswindow_setTitleWithRepresentedFilename( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v addDocumentIconButton @ :
void 				nswindow_addDocumentIconButton( nswindow_t object );

// Signature from Objective-C Runtime: v insertTitlebarAccessoryViewController:atIndex: @ : @ q
void 				nswindow_insertTitlebarAccessoryViewController( nswindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: c titlebarBlurFiltersDisabled @ :
char 				nswindow_titlebarBlurFiltersDisabled( nswindow_t object );

// Signature from Objective-C Runtime: v setTitlebarBlurFiltersDisabled: @ : c
void 				nswindow_setTitlebarBlurFiltersDisabled( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} frameTopLeftPoint @ :
CGPoint 			nswindow_frameTopLeftPoint( nswindow_t object );

// Signature from Objective-C Runtime: v setContentResizeIncrements: @ : {CGSize=dd}
void 				nswindow_setContentResizeIncrements( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} contentResizeIncrements @ :
CGSize 				nswindow_contentResizeIncrements( nswindow_t object );

// Signature from Objective-C Runtime: v setContentAspectRatio: @ : {CGSize=dd}
void 				nswindow_setContentAspectRatio( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} contentAspectRatio @ :
CGSize 				nswindow_contentAspectRatio( nswindow_t object );

// Signature from Objective-C Runtime: Q shadowOptionsForActiveAppearance: @ : c
unsigned long long 	nswindow_shadowOptionsForActiveAppearance( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v useOptimizedDrawing: @ : c
void 				nswindow_useOptimizedDrawing( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setKeyView: @ : @
void 				nswindow_setKeyView( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c autorecalculatesKeyViewLoop @ :
char 				nswindow_autorecalculatesKeyViewLoop( nswindow_t object );

// Signature from Objective-C Runtime: v runToolbarConfigurationPalette: @ : @
void 				nswindow_runToolbarConfigurationPalette( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setShowsLockButton: @ : c
void 				nswindow_setShowsLockButton( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setMouseConfinementRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				nswindow_setMouseConfinementRect( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: c isReleasedWhenClosed @ :
char 				nswindow_isReleasedWhenClosed( nswindow_t object );

// Signature from Objective-C Runtime: c isZoomed @ :
char 				nswindow_isZoomed( nswindow_t object );

// Signature from Objective-C Runtime: @ contentSeparatorColor @ :
nsobject_t 			nswindow_contentSeparatorColor( nswindow_t object );

// Signature from Objective-C Runtime: @ contentInsetColor @ :
nsobject_t 			nswindow_contentInsetColor( nswindow_t object );

// Signature from Objective-C Runtime: v setShowsContentSeparator:forEdge: @ : c Q
void 				nswindow_setShowsContentSeparator( nswindow_t object, char arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: v setDynamicDepthLimit: @ : c
void 				nswindow_setDynamicDepthLimit( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v orderBack: @ : @
void 				nswindow_orderBack( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v orderFrontRegardless @ :
void 				nswindow_orderFrontRegardless( nswindow_t object );

// Signature from Objective-C Runtime: v setMiniwindowImage: @ : @
void 				nswindow_setMiniwindowImage( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setMiniwindowTitle: @ : @
void 				nswindow_setMiniwindowTitle( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ miniwindowImage @ :
nsobject_t 			nswindow_miniwindowImage( nswindow_t object );

// Signature from Objective-C Runtime: c isOneShot @ :
char 				nswindow_isOneShot( nswindow_t object );

// Signature from Objective-C Runtime: v cacheImageInRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				nswindow_cacheImageInRect( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v restoreCachedImage @ :
void 				nswindow_restoreCachedImage( nswindow_t object );

// Signature from Objective-C Runtime: v discardCachedImage @ :
void 				nswindow_discardCachedImage( nswindow_t object );

// Signature from Objective-C Runtime: v invalidateShadow @ :
void 				nswindow_invalidateShadow( nswindow_t object );

// Signature from Objective-C Runtime: c canMoveToCurrentSpaceOnScreen: @ : @
char 				nswindow_canMoveToCurrentSpaceOnScreen( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setMinFullScreenContentSize: @ : {CGSize=dd}
void 				nswindow_setMinFullScreenContentSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v setMaxFullScreenContentSize: @ : {CGSize=dd}
void 				nswindow_setMaxFullScreenContentSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v setAutofill: @ : c
void 				nswindow_setAutofill( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c autofill @ :
char 				nswindow_autofill( nswindow_t object );

// Signature from Objective-C Runtime: v setAutofillColor: @ : @
void 				nswindow_setAutofillColor( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ autofillColor @ :
nsobject_t 			nswindow_autofillColor( nswindow_t object );

// Signature from Objective-C Runtime: v setShowsResizeIndicator: @ : c
void 				nswindow_setShowsResizeIndicator( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c showsResizeIndicator @ :
char 				nswindow_showsResizeIndicator( nswindow_t object );

// Signature from Objective-C Runtime: v setSharingType: @ : Q
void 				nswindow_setSharingType( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: Q sharingType @ :
unsigned long long 	nswindow_sharingType( nswindow_t object );

// Signature from Objective-C Runtime: v setPreferredBackingLocation: @ : Q
void 				nswindow_setPreferredBackingLocation( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: Q preferredBackingLocation @ :
unsigned long long 	nswindow_preferredBackingLocation( nswindow_t object );

// Signature from Objective-C Runtime: Q backingLocation @ :
unsigned long long 	nswindow_backingLocation( nswindow_t object );

// Signature from Objective-C Runtime: v setAllowsConcurrentViewDrawing: @ : c
void 				nswindow_setAllowsConcurrentViewDrawing( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} maxTitlebarTitleRect @ :
CGRect 				nswindow_maxTitlebarTitleRect( nswindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} titlebarTitleRect @ :
CGRect 				nswindow_titlebarTitleRect( nswindow_t object );

// Signature from Objective-C Runtime: @ titlebarTitleFont @ :
nsobject_t 			nswindow_titlebarTitleFont( nswindow_t object );

// Signature from Objective-C Runtime: @ appearanceSource @ :
nsobject_t 			nswindow_appearanceSource( nswindow_t object );

// Signature from Objective-C Runtime: c titleHidden @ :
char 				nswindow_titleHidden( nswindow_t object );

// Signature from Objective-C Runtime: v setTitleHidden: @ : c
void 				nswindow_setTitleHidden( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setTitleMode: @ : q
void 				nswindow_setTitleMode( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: q titleMode @ :
long long 			nswindow_titleMode( nswindow_t object );

// Signature from Objective-C Runtime: v setTitlebarAppearsTransparentWhenFullscreen: @ : c
void 				nswindow_setTitlebarAppearsTransparentWhenFullscreen( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c titlebarDrawsBottomDividerWhenTransparent @ :
char 				nswindow_titlebarDrawsBottomDividerWhenTransparent( nswindow_t object );

// Signature from Objective-C Runtime: v setTitlebarDrawsBottomDividerWhenTransparent: @ : c
void 				nswindow_setTitlebarDrawsBottomDividerWhenTransparent( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v addTabbedWindow:ordered: @ : @ q
void 				nswindow_addTabbedWindow( nswindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: c canBeVisibleOnAllSpaces @ :
char 				nswindow_canBeVisibleOnAllSpaces( nswindow_t object );

// Signature from Objective-C Runtime: v setCanBeVisibleOnAllSpaces: @ : c
void 				nswindow_setCanBeVisibleOnAllSpaces( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: d standardWindowTitleButtonsAlphaValue @ :
double 				nswindow_standardWindowTitleButtonsAlphaValue( nswindow_t object );

// Signature from Objective-C Runtime: v setStandardWindowTitleButtonsAlphaValue: @ : d
void 				nswindow_setStandardWindowTitleButtonsAlphaValue( nswindow_t object, double arg0 );

// Signature from Objective-C Runtime: d titlebarHeight @ :
double 				nswindow_titlebarHeight( nswindow_t object );

// Signature from Objective-C Runtime: v setTitlebarHeight: @ : d
void 				nswindow_setTitlebarHeight( nswindow_t object, double arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} standardWindowButtonGroupOffset @ :
CGSize 				nswindow_standardWindowButtonGroupOffset( nswindow_t object );

// Signature from Objective-C Runtime: v setStandardWindowButtonGroupOffset: @ : {CGSize=dd}
void 				nswindow_setStandardWindowButtonGroupOffset( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: c hasColorSensitiveUI @ :
char 				nswindow_hasColorSensitiveUI( nswindow_t object );

// Signature from Objective-C Runtime: v setHasColorSensitiveUI: @ : c
void 				nswindow_setHasColorSensitiveUI( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: ^v windowRefWithCompositedAttribute:andFrameworkScaledAttribute: @ : c c
void* 				nswindow_windowRefWithCompositedAttribute( nswindow_t object, char arg0, char arg1 );

// Signature from Objective-C Runtime: @ initWithWindowRef: @ : ^v
nsobject_t 			nswindow_initWithWindowRef( nswindow_t object, void* arg0 );

// Signature from Objective-C Runtime: c dockTitleIsGuess @ :
char 				nswindow_dockTitleIsGuess( nswindow_t object );

// Signature from Objective-C Runtime: @ showDeminiaturizedWindow @ :
nsobject_t 			nswindow_showDeminiaturizedWindow( nswindow_t object );

// Signature from Objective-C Runtime: v setShadowStyle: @ : Q
void 				nswindow_setShadowStyle( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: @ restoreWindowOnDockDeath @ :
nsobject_t 			nswindow_restoreWindowOnDockDeath( nswindow_t object );

// Signature from Objective-C Runtime: @ restoreWindowOnDockReincarnation @ :
nsobject_t 			nswindow_restoreWindowOnDockReincarnation( nswindow_t object );

// Signature from Objective-C Runtime: v updateInDock @ :
void 				nswindow_updateInDock( nswindow_t object );

// Signature from Objective-C Runtime: v setTimeMachineDelegate: @ : @
void 				nswindow_setTimeMachineDelegate( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c hostsLayersInWindowServer @ :
char 				nswindow_hostsLayersInWindowServer( nswindow_t object );

// Signature from Objective-C Runtime: c canHostLayersInWindowServer @ :
char 				nswindow_canHostLayersInWindowServer( nswindow_t object );

// Signature from Objective-C Runtime: v setCanHostLayersInWindowServer: @ : c
void 				nswindow_setCanHostLayersInWindowServer( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilitySubtitleUIElementAttribute @ :
nsobject_t 			nswindow_accessibilitySubtitleUIElementAttribute( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilityAddDeferredNotification: @ : @
void 				nswindow_accessibilityAddDeferredNotification( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilitySetPositionAttribute: @ : @
void 				nswindow_accessibilitySetPositionAttribute( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMainAttribute @ :
nsobject_t 			nswindow_accessibilityMainAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsMainAttributeSettable @ :
char 				nswindow_accessibilityIsMainAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilitySetMainAttribute: @ : @
void 				nswindow_accessibilitySetMainAttribute( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMinimizedAttribute @ :
nsobject_t 			nswindow_accessibilityMinimizedAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsMinimizedAttributeSettable @ :
char 				nswindow_accessibilityIsMinimizedAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilitySetMinimizedAttribute: @ : @
void 				nswindow_accessibilitySetMinimizedAttribute( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCloseButtonAttribute @ :
nsobject_t 			nswindow_accessibilityCloseButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsCloseButtonAttributeSettable @ :
char 				nswindow_accessibilityIsCloseButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityZoomButtonAttribute @ :
nsobject_t 			nswindow_accessibilityZoomButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsZoomButtonAttributeSettable @ :
char 				nswindow_accessibilityIsZoomButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityMinimizeButtonAttribute @ :
nsobject_t 			nswindow_accessibilityMinimizeButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsMinimizeButtonAttributeSettable @ :
char 				nswindow_accessibilityIsMinimizeButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityToolbarButtonAttribute @ :
nsobject_t 			nswindow_accessibilityToolbarButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsToolbarButtonAttributeSettable @ :
char 				nswindow_accessibilityIsToolbarButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityFullScreenButtonAttribute @ :
nsobject_t 			nswindow_accessibilityFullScreenButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsFullScreenButtonAttributeSettable @ :
char 				nswindow_accessibilityIsFullScreenButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityFullScreenAttribute @ :
nsobject_t 			nswindow_accessibilityFullScreenAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsFullScreenAttributeSettable @ :
char 				nswindow_accessibilityIsFullScreenAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilitySetFullScreenAttribute: @ : @
void 				nswindow_accessibilitySetFullScreenAttribute( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityProxyAttribute @ :
nsobject_t 			nswindow_accessibilityProxyAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsProxyAttributeSettable @ :
char 				nswindow_accessibilityIsProxyAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsGrowAreaAttributeSettable @ :
char 				nswindow_accessibilityIsGrowAreaAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityDefaultButtonAttribute @ :
nsobject_t 			nswindow_accessibilityDefaultButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsDefaultButtonAttributeSettable @ :
char 				nswindow_accessibilityIsDefaultButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityCancelButtonAttribute @ :
nsobject_t 			nswindow_accessibilityCancelButtonAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsCancelButtonAttributeSettable @ :
char 				nswindow_accessibilityIsCancelButtonAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityDocumentAttribute @ :
nsobject_t 			nswindow_accessibilityDocumentAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsDocumentAttributeSettable @ :
char 				nswindow_accessibilityIsDocumentAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityModalAttribute @ :
nsobject_t 			nswindow_accessibilityModalAttribute( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsModalAttributeSettable @ :
char 				nswindow_accessibilityIsModalAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityIsSectionsAttributeSettable @ :
char 				nswindow_accessibilityIsSectionsAttributeSettable( nswindow_t object );

// Signature from Objective-C Runtime: c hasCloseBox @ :
char 				nswindow_hasCloseBox( nswindow_t object );

// Signature from Objective-C Runtime: c isMiniaturizable @ :
char 				nswindow_isMiniaturizable( nswindow_t object );

// Signature from Objective-C Runtime: c isModalPanel @ :
char 				nswindow_isModalPanel( nswindow_t object );

// Signature from Objective-C Runtime: c isZoomable @ :
char 				nswindow_isZoomable( nswindow_t object );

// Signature from Objective-C Runtime: q orderedIndex @ :
long long 			nswindow_orderedIndex( nswindow_t object );

// Signature from Objective-C Runtime: v setIsMiniaturized: @ : c
void 				nswindow_setIsMiniaturized( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setIsVisible: @ : c
void 				nswindow_setIsVisible( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setIsZoomed: @ : c
void 				nswindow_setIsZoomed( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setOrderedIndex: @ : q
void 				nswindow_setOrderedIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ boundsAsQDRect @ :
nsobject_t 			nswindow_boundsAsQDRect( nswindow_t object );

// Signature from Objective-C Runtime: v setBoundsAsQDRect: @ : @
void 				nswindow_setBoundsAsQDRect( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c view:acceptsFirstMouseEvent:initialKeyWindow: @ : @ @ @
char 				nswindow_view( nswindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v exerciseAmbiguityInLayout @ :
void 				nswindow_exerciseAmbiguityInLayout( nswindow_t object );

// Signature from Objective-C Runtime: v visualizeConstraints: @ : @
void 				nswindow_visualizeConstraints( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilitySendDeferredNotifications @ :
void 				nswindow_accessibilitySendDeferredNotifications( nswindow_t object );

// Signature from Objective-C Runtime: v setRemoteUIElement: @ : @
void 				nswindow_setRemoteUIElement( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q liveResizeEdges @ :
unsigned long long 	nswindow_liveResizeEdges( nswindow_t object );

// Signature from Objective-C Runtime: @ anchorItemForOrientation: @ : q
nsobject_t 			nswindow_anchorItemForOrientation( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAnchorItem:forOrientation: @ : @ q
void 				nswindow_setAnchorItem( nswindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			nswindow_retain( nswindow_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	nswindow_retainCount( nswindow_t object );

// Signature from Objective-C Runtime: v userActivityWasContinued: @ : @
void 				nswindow_userActivityWasContinued( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c acceptsFirstResponder @ :
char 				nswindow_acceptsFirstResponder( nswindow_t object );

// Signature from Objective-C Runtime: v tabletPoint: @ : @
void 				nswindow_tabletPoint( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v pressureChangeWithEvent: @ : @
void 				nswindow_pressureChangeWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilitySubrole: @ : @
void 				nswindow_setAccessibilitySubrole( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySubrole @ :
nsobject_t 			nswindow_accessibilitySubrole( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityDecrementButton @ :
nsobject_t 			nswindow_accessibilityDecrementButton( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityIncrementButton @ :
nsobject_t 			nswindow_accessibilityIncrementButton( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityChildren @ :
nsobject_t 			nswindow_accessibilityChildren( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityRole @ :
nsobject_t 			nswindow_accessibilityRole( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityLabel @ :
nsobject_t 			nswindow_accessibilityLabel( nswindow_t object );

// Signature from Objective-C Runtime: q accessibilityIndex @ :
long long 			nswindow_accessibilityIndex( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityCustomActions @ :
nsobject_t 			nswindow_accessibilityCustomActions( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityChildrenInNavigationOrder @ :
nsobject_t 			nswindow_accessibilityChildrenInNavigationOrder( nswindow_t object );

// Signature from Objective-C Runtime: c isAccessibilityElement @ :
char 				nswindow_isAccessibilityElement( nswindow_t object );

// Signature from Objective-C Runtime: @ nextResponder @ :
nsobject_t 			nswindow_nextResponder( nswindow_t object );

// Signature from Objective-C Runtime: q accessibilityRowCount @ :
long long 			nswindow_accessibilityRowCount( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityVisibleChildren @ :
nsobject_t 			nswindow_accessibilityVisibleChildren( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityIndex: @ : q
void 				nswindow_setAccessibilityIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityRoleDescription @ :
nsobject_t 			nswindow_accessibilityRoleDescription( nswindow_t object );

// Signature from Objective-C Runtime: q accessibilityColumnCount @ :
long long 			nswindow_accessibilityColumnCount( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilitySelectedChildren @ :
nsobject_t 			nswindow_accessibilitySelectedChildren( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelectedChildren: @ : @
void 				nswindow_setAccessibilitySelectedChildren( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySelectedCells @ :
nsobject_t 			nswindow_accessibilitySelectedCells( nswindow_t object );

// Signature from Objective-C Runtime: v mouseEntered: @ : @
void 				nswindow_mouseEntered( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v mouseMoved: @ : @
void 				nswindow_mouseMoved( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v mouseExited: @ : @
void 				nswindow_mouseExited( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityLabel: @ : @
void 				nswindow_setAccessibilityLabel( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setTouchBar: @ : @
void 				nswindow_setTouchBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ touchBar @ :
nsobject_t 			nswindow_touchBar( nswindow_t object );

// Signature from Objective-C Runtime: v invalidateRestorableState @ :
void 				nswindow_invalidateRestorableState( nswindow_t object );

// Signature from Objective-C Runtime: c isAccessibilityFocused @ :
char 				nswindow_isAccessibilityFocused( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityIdentifier @ :
nsobject_t 			nswindow_accessibilityIdentifier( nswindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityLayoutPointForScreenPoint: @ : {CGPoint=dd}
CGPoint 			nswindow_accessibilityLayoutPointForScreenPoint( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} accessibilityLayoutSizeForScreenSize: @ : {CGSize=dd}
CGSize 				nswindow_accessibilityLayoutSizeForScreenSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityScreenPointForLayoutPoint: @ : {CGPoint=dd}
CGPoint 			nswindow_accessibilityScreenPointForLayoutPoint( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} accessibilityScreenSizeForLayoutSize: @ : {CGSize=dd}
CGSize 				nswindow_accessibilityScreenSizeForLayoutSize( nswindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: @ accessibilityCellForColumn:row: @ : q q
nsobject_t 			nswindow_accessibilityCellForColumn( nswindow_t object, long long arg0, long long arg1 );

// Signature from Objective-C Runtime: @ accessibilityAttributedStringForRange: @ : {_NSRange=QQ}
nsobject_t 			nswindow_accessibilityAttributedStringForRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityRangeForLine: @ : q
_NSRange 			nswindow_accessibilityRangeForLine( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityStringForRange: @ : {_NSRange=QQ}
nsobject_t 			nswindow_accessibilityStringForRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityRangeForPosition: @ : {CGPoint=dd}
_NSRange 			nswindow_accessibilityRangeForPosition( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityRangeForIndex: @ : q
_NSRange 			nswindow_accessibilityRangeForIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrameForRange: @ : {_NSRange=QQ}
CGRect 				nswindow_accessibilityFrameForRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: @ accessibilityRTFForRange: @ : {_NSRange=QQ}
nsobject_t 			nswindow_accessibilityRTFForRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityStyleRangeForIndex: @ : q
_NSRange 			nswindow_accessibilityStyleRangeForIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: q accessibilityLineForIndex: @ : q
long long 			nswindow_accessibilityLineForIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: c accessibilityPerformCancel @ :
char 				nswindow_accessibilityPerformCancel( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformConfirm @ :
char 				nswindow_accessibilityPerformConfirm( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformDecrement @ :
char 				nswindow_accessibilityPerformDecrement( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformDelete @ :
char 				nswindow_accessibilityPerformDelete( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformIncrement @ :
char 				nswindow_accessibilityPerformIncrement( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformPick @ :
char 				nswindow_accessibilityPerformPick( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformPress @ :
char 				nswindow_accessibilityPerformPress( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformRaise @ :
char 				nswindow_accessibilityPerformRaise( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformShowAlternateUI @ :
char 				nswindow_accessibilityPerformShowAlternateUI( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformShowDefaultUI @ :
char 				nswindow_accessibilityPerformShowDefaultUI( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformShowMenu @ :
char 				nswindow_accessibilityPerformShowMenu( nswindow_t object );

// Signature from Objective-C Runtime: c isAccessibilitySelectorAllowed: @ : :
char 				nswindow_isAccessibilitySelectorAllowed( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityElement: @ : c
void 				nswindow_setAccessibilityElement( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setAccessibilityFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				nswindow_setAccessibilityFrame( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setAccessibilityFocused: @ : c
void 				nswindow_setAccessibilityFocused( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityActivationPoint @ :
CGPoint 			nswindow_accessibilityActivationPoint( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityActivationPoint: @ : {CGPoint=dd}
void 				nswindow_setAccessibilityActivationPoint( nswindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: @ accessibilityTopLevelUIElement @ :
nsobject_t 			nswindow_accessibilityTopLevelUIElement( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityTopLevelUIElement: @ : @
void 				nswindow_setAccessibilityTopLevelUIElement( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityURL @ :
nsobject_t 			nswindow_accessibilityURL( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityURL: @ : @
void 				nswindow_setAccessibilityURL( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityValue @ :
nsobject_t 			nswindow_accessibilityValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityValue: @ : @
void 				nswindow_setAccessibilityValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityValueDescription @ :
nsobject_t 			nswindow_accessibilityValueDescription( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityValueDescription: @ : @
void 				nswindow_setAccessibilityValueDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityVisibleChildren: @ : @
void 				nswindow_setAccessibilityVisibleChildren( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTitle @ :
nsobject_t 			nswindow_accessibilityTitle( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityTitle: @ : @
void 				nswindow_setAccessibilityTitle( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTitleUIElement @ :
nsobject_t 			nswindow_accessibilityTitleUIElement( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityTitleUIElement: @ : @
void 				nswindow_setAccessibilityTitleUIElement( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityNextContents @ :
nsobject_t 			nswindow_accessibilityNextContents( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityNextContents: @ : @
void 				nswindow_setAccessibilityNextContents( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityOrientation @ :
long long 			nswindow_accessibilityOrientation( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityOrientation: @ : q
void 				nswindow_setAccessibilityOrientation( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityOverflowButton @ :
nsobject_t 			nswindow_accessibilityOverflowButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityOverflowButton: @ : @
void 				nswindow_setAccessibilityOverflowButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityParent: @ : @
void 				nswindow_setAccessibilityParent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityPlaceholderValue @ :
nsobject_t 			nswindow_accessibilityPlaceholderValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityPlaceholderValue: @ : @
void 				nswindow_setAccessibilityPlaceholderValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityPreviousContents @ :
nsobject_t 			nswindow_accessibilityPreviousContents( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityPreviousContents: @ : @
void 				nswindow_setAccessibilityPreviousContents( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRole: @ : @
void 				nswindow_setAccessibilityRole( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRoleDescription: @ : @
void 				nswindow_setAccessibilityRoleDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySearchButton @ :
nsobject_t 			nswindow_accessibilitySearchButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySearchButton: @ : @
void 				nswindow_setAccessibilitySearchButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySearchMenu @ :
nsobject_t 			nswindow_accessibilitySearchMenu( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySearchMenu: @ : @
void 				nswindow_setAccessibilitySearchMenu( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilitySelected @ :
char 				nswindow_isAccessibilitySelected( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelected: @ : c
void 				nswindow_setAccessibilitySelected( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityServesAsTitleForUIElements @ :
nsobject_t 			nswindow_accessibilityServesAsTitleForUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityServesAsTitleForUIElements: @ : @
void 				nswindow_setAccessibilityServesAsTitleForUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityShownMenu @ :
nsobject_t 			nswindow_accessibilityShownMenu( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityShownMenu: @ : @
void 				nswindow_setAccessibilityShownMenu( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMinValue @ :
nsobject_t 			nswindow_accessibilityMinValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMinValue: @ : @
void 				nswindow_setAccessibilityMinValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMaxValue @ :
nsobject_t 			nswindow_accessibilityMaxValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMaxValue: @ : @
void 				nswindow_setAccessibilityMaxValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityLinkedUIElements @ :
nsobject_t 			nswindow_accessibilityLinkedUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityLinkedUIElements: @ : @
void 				nswindow_setAccessibilityLinkedUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityWindow @ :
nsobject_t 			nswindow_accessibilityWindow( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityWindow: @ : @
void 				nswindow_setAccessibilityWindow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityIdentifier: @ : @
void 				nswindow_setAccessibilityIdentifier( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityHelp @ :
nsobject_t 			nswindow_accessibilityHelp( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHelp: @ : @
void 				nswindow_setAccessibilityHelp( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityFilename @ :
nsobject_t 			nswindow_accessibilityFilename( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityFilename: @ : @
void 				nswindow_setAccessibilityFilename( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityExpanded @ :
char 				nswindow_isAccessibilityExpanded( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityExpanded: @ : c
void 				nswindow_setAccessibilityExpanded( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c isAccessibilityEdited @ :
char 				nswindow_isAccessibilityEdited( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityEdited: @ : c
void 				nswindow_setAccessibilityEdited( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c isAccessibilityEnabled @ :
char 				nswindow_isAccessibilityEnabled( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityEnabled: @ : c
void 				nswindow_setAccessibilityEnabled( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setAccessibilityChildren: @ : @
void 				nswindow_setAccessibilityChildren( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityChildrenInNavigationOrder: @ : @
void 				nswindow_setAccessibilityChildrenInNavigationOrder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityClearButton @ :
nsobject_t 			nswindow_accessibilityClearButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityClearButton: @ : @
void 				nswindow_setAccessibilityClearButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCancelButton @ :
nsobject_t 			nswindow_accessibilityCancelButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityCancelButton: @ : @
void 				nswindow_setAccessibilityCancelButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityProtectedContent @ :
char 				nswindow_isAccessibilityProtectedContent( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityProtectedContent: @ : c
void 				nswindow_setAccessibilityProtectedContent( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityContents @ :
nsobject_t 			nswindow_accessibilityContents( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityContents: @ : @
void 				nswindow_setAccessibilityContents( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityAlternateUIVisible @ :
char 				nswindow_isAccessibilityAlternateUIVisible( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityAlternateUIVisible: @ : c
void 				nswindow_setAccessibilityAlternateUIVisible( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilitySharedFocusElements @ :
nsobject_t 			nswindow_accessibilitySharedFocusElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySharedFocusElements: @ : @
void 				nswindow_setAccessibilitySharedFocusElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityRequired @ :
char 				nswindow_isAccessibilityRequired( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityRequired: @ : c
void 				nswindow_setAccessibilityRequired( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomRotors @ :
nsobject_t 			nswindow_accessibilityCustomRotors( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityCustomRotors: @ : @
void 				nswindow_setAccessibilityCustomRotors( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityApplicationFocusedUIElement @ :
nsobject_t 			nswindow_accessibilityApplicationFocusedUIElement( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityApplicationFocusedUIElement: @ : @
void 				nswindow_setAccessibilityApplicationFocusedUIElement( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMainWindow @ :
nsobject_t 			nswindow_accessibilityMainWindow( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMainWindow: @ : @
void 				nswindow_setAccessibilityMainWindow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityHidden @ :
char 				nswindow_isAccessibilityHidden( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHidden: @ : c
void 				nswindow_setAccessibilityHidden( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: c isAccessibilityFrontmost @ :
char 				nswindow_isAccessibilityFrontmost( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityFrontmost: @ : c
void 				nswindow_setAccessibilityFrontmost( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityFocusedWindow @ :
nsobject_t 			nswindow_accessibilityFocusedWindow( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityFocusedWindow: @ : @
void 				nswindow_setAccessibilityFocusedWindow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityWindows @ :
nsobject_t 			nswindow_accessibilityWindows( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityWindows: @ : @
void 				nswindow_setAccessibilityWindows( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityExtrasMenuBar @ :
nsobject_t 			nswindow_accessibilityExtrasMenuBar( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityExtrasMenuBar: @ : @
void 				nswindow_setAccessibilityExtrasMenuBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMenuBar @ :
nsobject_t 			nswindow_accessibilityMenuBar( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMenuBar: @ : @
void 				nswindow_setAccessibilityMenuBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityColumnTitles @ :
nsobject_t 			nswindow_accessibilityColumnTitles( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityColumnTitles: @ : @
void 				nswindow_setAccessibilityColumnTitles( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityOrderedByRow @ :
char 				nswindow_isAccessibilityOrderedByRow( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityOrderedByRow: @ : c
void 				nswindow_setAccessibilityOrderedByRow( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: q accessibilityHorizontalUnits @ :
long long 			nswindow_accessibilityHorizontalUnits( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHorizontalUnits: @ : q
void 				nswindow_setAccessibilityHorizontalUnits( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: q accessibilityVerticalUnits @ :
long long 			nswindow_accessibilityVerticalUnits( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVerticalUnits: @ : q
void 				nswindow_setAccessibilityVerticalUnits( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityHorizontalUnitDescription @ :
nsobject_t 			nswindow_accessibilityHorizontalUnitDescription( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHorizontalUnitDescription: @ : @
void 				nswindow_setAccessibilityHorizontalUnitDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityVerticalUnitDescription @ :
nsobject_t 			nswindow_accessibilityVerticalUnitDescription( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVerticalUnitDescription: @ : @
void 				nswindow_setAccessibilityVerticalUnitDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityHandles @ :
nsobject_t 			nswindow_accessibilityHandles( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHandles: @ : @
void 				nswindow_setAccessibilityHandles( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityWarningValue @ :
nsobject_t 			nswindow_accessibilityWarningValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityWarningValue: @ : @
void 				nswindow_setAccessibilityWarningValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCriticalValue @ :
nsobject_t 			nswindow_accessibilityCriticalValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityCriticalValue: @ : @
void 				nswindow_setAccessibilityCriticalValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityDisclosed @ :
char 				nswindow_isAccessibilityDisclosed( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDisclosed: @ : c
void 				nswindow_setAccessibilityDisclosed( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityDisclosedByRow @ :
nsobject_t 			nswindow_accessibilityDisclosedByRow( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDisclosedByRow: @ : @
void 				nswindow_setAccessibilityDisclosedByRow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDisclosedRows @ :
nsobject_t 			nswindow_accessibilityDisclosedRows( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDisclosedRows: @ : @
void 				nswindow_setAccessibilityDisclosedRows( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityDisclosureLevel @ :
long long 			nswindow_accessibilityDisclosureLevel( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDisclosureLevel: @ : q
void 				nswindow_setAccessibilityDisclosureLevel( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityMarkerUIElements @ :
nsobject_t 			nswindow_accessibilityMarkerUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMarkerUIElements: @ : @
void 				nswindow_setAccessibilityMarkerUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMarkerValues @ :
nsobject_t 			nswindow_accessibilityMarkerValues( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMarkerValues: @ : @
void 				nswindow_setAccessibilityMarkerValues( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMarkerGroupUIElement @ :
nsobject_t 			nswindow_accessibilityMarkerGroupUIElement( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMarkerGroupUIElement: @ : @
void 				nswindow_setAccessibilityMarkerGroupUIElement( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityUnits @ :
long long 			nswindow_accessibilityUnits( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityUnits: @ : q
void 				nswindow_setAccessibilityUnits( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityUnitDescription @ :
nsobject_t 			nswindow_accessibilityUnitDescription( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityUnitDescription: @ : @
void 				nswindow_setAccessibilityUnitDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityRulerMarkerType @ :
long long 			nswindow_accessibilityRulerMarkerType( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityRulerMarkerType: @ : q
void 				nswindow_setAccessibilityRulerMarkerType( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityMarkerTypeDescription @ :
nsobject_t 			nswindow_accessibilityMarkerTypeDescription( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMarkerTypeDescription: @ : @
void 				nswindow_setAccessibilityMarkerTypeDescription( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityHorizontalScrollBar @ :
nsobject_t 			nswindow_accessibilityHorizontalScrollBar( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHorizontalScrollBar: @ : @
void 				nswindow_setAccessibilityHorizontalScrollBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityVerticalScrollBar @ :
nsobject_t 			nswindow_accessibilityVerticalScrollBar( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVerticalScrollBar: @ : @
void 				nswindow_setAccessibilityVerticalScrollBar( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityAllowedValues @ :
nsobject_t 			nswindow_accessibilityAllowedValues( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityAllowedValues: @ : @
void 				nswindow_setAccessibilityAllowedValues( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityLabelUIElements @ :
nsobject_t 			nswindow_accessibilityLabelUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityLabelUIElements: @ : @
void 				nswindow_setAccessibilityLabelUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: f accessibilityLabelValue @ :
float 				nswindow_accessibilityLabelValue( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityLabelValue: @ : f
void 				nswindow_setAccessibilityLabelValue( nswindow_t object, float arg0 );

// Signature from Objective-C Runtime: @ accessibilitySplitters @ :
nsobject_t 			nswindow_accessibilitySplitters( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySplitters: @ : @
void 				nswindow_setAccessibilitySplitters( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityDecrementButton: @ : @
void 				nswindow_setAccessibilityDecrementButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityIncrementButton: @ : @
void 				nswindow_setAccessibilityIncrementButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTabs @ :
nsobject_t 			nswindow_accessibilityTabs( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityTabs: @ : @
void 				nswindow_setAccessibilityTabs( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityHeader @ :
nsobject_t 			nswindow_accessibilityHeader( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHeader: @ : @
void 				nswindow_setAccessibilityHeader( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityColumnCount: @ : q
void 				nswindow_setAccessibilityColumnCount( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRowCount: @ : q
void 				nswindow_setAccessibilityRowCount( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityColumns @ :
nsobject_t 			nswindow_accessibilityColumns( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityColumns: @ : @
void 				nswindow_setAccessibilityColumns( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityRows @ :
nsobject_t 			nswindow_accessibilityRows( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityRows: @ : @
void 				nswindow_setAccessibilityRows( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityVisibleRows @ :
nsobject_t 			nswindow_accessibilityVisibleRows( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVisibleRows: @ : @
void 				nswindow_setAccessibilityVisibleRows( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySelectedRows @ :
nsobject_t 			nswindow_accessibilitySelectedRows( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelectedRows: @ : @
void 				nswindow_setAccessibilitySelectedRows( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityVisibleColumns @ :
nsobject_t 			nswindow_accessibilityVisibleColumns( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVisibleColumns: @ : @
void 				nswindow_setAccessibilityVisibleColumns( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilitySelectedColumns @ :
nsobject_t 			nswindow_accessibilitySelectedColumns( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelectedColumns: @ : @
void 				nswindow_setAccessibilitySelectedColumns( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilitySortDirection @ :
long long 			nswindow_accessibilitySortDirection( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySortDirection: @ : q
void 				nswindow_setAccessibilitySortDirection( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityRowHeaderUIElements @ :
nsobject_t 			nswindow_accessibilityRowHeaderUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityRowHeaderUIElements: @ : @
void 				nswindow_setAccessibilityRowHeaderUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilitySelectedCells: @ : @
void 				nswindow_setAccessibilitySelectedCells( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityVisibleCells @ :
nsobject_t 			nswindow_accessibilityVisibleCells( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVisibleCells: @ : @
void 				nswindow_setAccessibilityVisibleCells( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityColumnHeaderUIElements @ :
nsobject_t 			nswindow_accessibilityColumnHeaderUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityColumnHeaderUIElements: @ : @
void 				nswindow_setAccessibilityColumnHeaderUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityRowIndexRange @ :
_NSRange 			nswindow_accessibilityRowIndexRange( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityRowIndexRange: @ : {_NSRange=QQ}
void 				nswindow_setAccessibilityRowIndexRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityColumnIndexRange @ :
_NSRange 			nswindow_accessibilityColumnIndexRange( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityColumnIndexRange: @ : {_NSRange=QQ}
void 				nswindow_setAccessibilityColumnIndexRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: q accessibilityInsertionPointLineNumber @ :
long long 			nswindow_accessibilityInsertionPointLineNumber( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityInsertionPointLineNumber: @ : q
void 				nswindow_setAccessibilityInsertionPointLineNumber( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilitySharedCharacterRange @ :
_NSRange 			nswindow_accessibilitySharedCharacterRange( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySharedCharacterRange: @ : {_NSRange=QQ}
void 				nswindow_setAccessibilitySharedCharacterRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: @ accessibilitySharedTextUIElements @ :
nsobject_t 			nswindow_accessibilitySharedTextUIElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySharedTextUIElements: @ : @
void 				nswindow_setAccessibilitySharedTextUIElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilityVisibleCharacterRange @ :
_NSRange 			nswindow_accessibilityVisibleCharacterRange( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityVisibleCharacterRange: @ : {_NSRange=QQ}
void 				nswindow_setAccessibilityVisibleCharacterRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: q accessibilityNumberOfCharacters @ :
long long 			nswindow_accessibilityNumberOfCharacters( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityNumberOfCharacters: @ : q
void 				nswindow_setAccessibilityNumberOfCharacters( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilitySelectedText @ :
nsobject_t 			nswindow_accessibilitySelectedText( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelectedText: @ : @
void 				nswindow_setAccessibilitySelectedText( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {_NSRange=QQ} accessibilitySelectedTextRange @ :
_NSRange 			nswindow_accessibilitySelectedTextRange( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelectedTextRange: @ : {_NSRange=QQ}
void 				nswindow_setAccessibilitySelectedTextRange( nswindow_t object, _NSRange arg0 );

// Signature from Objective-C Runtime: @ accessibilitySelectedTextRanges @ :
nsobject_t 			nswindow_accessibilitySelectedTextRanges( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilitySelectedTextRanges: @ : @
void 				nswindow_setAccessibilitySelectedTextRanges( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityToolbarButton @ :
nsobject_t 			nswindow_accessibilityToolbarButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityToolbarButton: @ : @
void 				nswindow_setAccessibilityToolbarButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityModal @ :
char 				nswindow_isAccessibilityModal( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityModal: @ : c
void 				nswindow_setAccessibilityModal( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityProxy @ :
nsobject_t 			nswindow_accessibilityProxy( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityProxy: @ : @
void 				nswindow_setAccessibilityProxy( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityMain @ :
char 				nswindow_isAccessibilityMain( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMain: @ : c
void 				nswindow_setAccessibilityMain( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityFullScreenButton @ :
nsobject_t 			nswindow_accessibilityFullScreenButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityFullScreenButton: @ : @
void 				nswindow_setAccessibilityFullScreenButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityGrowArea @ :
nsobject_t 			nswindow_accessibilityGrowArea( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityGrowArea: @ : @
void 				nswindow_setAccessibilityGrowArea( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDocument @ :
nsobject_t 			nswindow_accessibilityDocument( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDocument: @ : @
void 				nswindow_setAccessibilityDocument( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDefaultButton @ :
nsobject_t 			nswindow_accessibilityDefaultButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDefaultButton: @ : @
void 				nswindow_setAccessibilityDefaultButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCloseButton @ :
nsobject_t 			nswindow_accessibilityCloseButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityCloseButton: @ : @
void 				nswindow_setAccessibilityCloseButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityZoomButton @ :
nsobject_t 			nswindow_accessibilityZoomButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityZoomButton: @ : @
void 				nswindow_setAccessibilityZoomButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityMinimizeButton @ :
nsobject_t 			nswindow_accessibilityMinimizeButton( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMinimizeButton: @ : @
void 				nswindow_setAccessibilityMinimizeButton( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityMinimized @ :
char 				nswindow_isAccessibilityMinimized( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMinimized: @ : c
void 				nswindow_setAccessibilityMinimized( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: v setAccessibilityCustomActions: @ : @
void 				nswindow_setAccessibilityCustomActions( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c presentError: @ : @
char 				nswindow_presentError( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ willPresentError: @ : @
nsobject_t 			nswindow_willPresentError( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c resignFirstResponder @ :
char 				nswindow_resignFirstResponder( nswindow_t object );

// Signature from Objective-C Runtime: c becomeFirstResponder @ :
char 				nswindow_becomeFirstResponder( nswindow_t object );

// Signature from Objective-C Runtime: v scrollWheel: @ : @
void 				nswindow_scrollWheel( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNextResponder: @ : @
void 				nswindow_setNextResponder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c validateProposedFirstResponder:forEvent: @ : @ @
char 				nswindow_validateProposedFirstResponder( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ accessibilityResultsForSearchPredicate: @ : @
nsobject_t 			nswindow_accessibilityResultsForSearchPredicate( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityHeaderForColumnIndex: @ : q
nsobject_t 			nswindow_accessibilityHeaderForColumnIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityHeaderForRowIndex: @ : q
nsobject_t 			nswindow_accessibilityHeaderForRowIndex( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityAuditIssues @ :
nsobject_t 			nswindow_accessibilityAuditIssues( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityAuditIssues: @ : @
void 				nswindow_setAccessibilityAuditIssues( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityAutoInteractable @ :
char 				nswindow_isAccessibilityAutoInteractable( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityAutoInteractable: @ : c
void 				nswindow_setAccessibilityAutoInteractable( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: q accessibilityContainerType @ :
long long 			nswindow_accessibilityContainerType( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityContainerType: @ : q
void 				nswindow_setAccessibilityContainerType( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ accessibilityUserInputLabels @ :
nsobject_t 			nswindow_accessibilityUserInputLabels( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityUserInputLabels: @ : @
void 				nswindow_setAccessibilityUserInputLabels( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityAttributedUserInputLabels @ :
nsobject_t 			nswindow_accessibilityAttributedUserInputLabels( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityAttributedUserInputLabels: @ : @
void 				nswindow_setAccessibilityAttributedUserInputLabels( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomChoosers @ :
nsobject_t 			nswindow_accessibilityCustomChoosers( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityCustomChoosers: @ : @
void 				nswindow_setAccessibilityCustomChoosers( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityEnhancedUserInterface @ :
char 				nswindow_isAccessibilityEnhancedUserInterface( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityEnhancedUserInterface: @ : c
void 				nswindow_setAccessibilityEnhancedUserInterface( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilityFunctionRowTopLevelElements @ :
nsobject_t 			nswindow_accessibilityFunctionRowTopLevelElements( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityFunctionRowTopLevelElements: @ : @
void 				nswindow_setAccessibilityFunctionRowTopLevelElements( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isAccessibilityMimicNativeView @ :
char 				nswindow_isAccessibilityMimicNativeView( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityMimicNativeView: @ : c
void 				nswindow_setAccessibilityMimicNativeView( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ accessibilitySections @ :
nsobject_t 			nswindow_accessibilitySections( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityHeaderGroup @ :
nsobject_t 			nswindow_accessibilityHeaderGroup( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityHeaderGroup: @ : @
void 				nswindow_setAccessibilityHeaderGroup( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrameInParentSpace @ :
CGRect 				nswindow_accessibilityFrameInParentSpace( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityFrameInParentSpace: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				nswindow_setAccessibilityFrameInParentSpace( nswindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: @ accessibilityPreviousContentSibling @ :
nsobject_t 			nswindow_accessibilityPreviousContentSibling( nswindow_t object );

// Signature from Objective-C Runtime: v setPreviousContentSibling: @ : @
void 				nswindow_setPreviousContentSibling( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityNextContentSibling @ :
nsobject_t 			nswindow_accessibilityNextContentSibling( nswindow_t object );

// Signature from Objective-C Runtime: v setNextContentSibling: @ : @
void 				nswindow_setNextContentSibling( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityContentSiblingAbove @ :
nsobject_t 			nswindow_accessibilityContentSiblingAbove( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityContentSiblingAbove: @ : @
void 				nswindow_setAccessibilityContentSiblingAbove( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityContentSiblingBelow @ :
nsobject_t 			nswindow_accessibilityContentSiblingBelow( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityContentSiblingBelow: @ : @
void 				nswindow_setAccessibilityContentSiblingBelow( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilityOverridesAlwaysTakePrecedence @ :
char 				nswindow_accessibilityOverridesAlwaysTakePrecedence( nswindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityOverridesAlwaysTakePrecedence: @ : c
void 				nswindow_setAccessibilityOverridesAlwaysTakePrecedence( nswindow_t object, char arg0 );

// Signature from Objective-C Runtime: @ makeTouchBar @ :
nsobject_t 			nswindow_makeTouchBar( nswindow_t object );

// Signature from Objective-C Runtime: v mouseDragged: @ : @
void 				nswindow_mouseDragged( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v mouseUp: @ : @
void 				nswindow_mouseUp( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v interpretKeyEvents: @ : @
void 				nswindow_interpretKeyEvents( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v magnifyWithEvent: @ : @
void 				nswindow_magnifyWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v translateWithEvent: @ : @
void 				nswindow_translateWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v touchesBeganWithEvent: @ : @
void 				nswindow_touchesBeganWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v touchesMovedWithEvent: @ : @
void 				nswindow_touchesMovedWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v touchesEndedWithEvent: @ : @
void 				nswindow_touchesEndedWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v touchesCancelledWithEvent: @ : @
void 				nswindow_touchesCancelledWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v rightMouseUp: @ : @
void 				nswindow_rightMouseUp( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v keyUp: @ : @
void 				nswindow_keyUp( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v flagsChanged: @ : @
void 				nswindow_flagsChanged( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v rightMouseDragged: @ : @
void 				nswindow_rightMouseDragged( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v otherMouseDown: @ : @
void 				nswindow_otherMouseDown( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v otherMouseDragged: @ : @
void 				nswindow_otherMouseDragged( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v otherMouseUp: @ : @
void 				nswindow_otherMouseUp( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ userActivity @ :
nsobject_t 			nswindow_userActivity( nswindow_t object );

// Signature from Objective-C Runtime: v updateUserActivityState: @ : @
void 				nswindow_updateUserActivityState( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v restoreUserActivityState: @ : @
void 				nswindow_restoreUserActivityState( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setUserActivity: @ : @
void 				nswindow_setUserActivity( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v insertText: @ : @
void 				nswindow_insertText( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v flushBufferedKeyEvents @ :
void 				nswindow_flushBufferedKeyEvents( nswindow_t object );

// Signature from Objective-C Runtime: @ servicesRequestor @ :
nsobject_t 			nswindow_servicesRequestor( nswindow_t object );

// Signature from Objective-C Runtime: v quickAction:didFailWithRequestor:error: @ : @ @ @
void 				nswindow_quickAction( nswindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ additionalQuickActionItemSource @ :
nsobject_t 			nswindow_additionalQuickActionItemSource( nswindow_t object );

// Signature from Objective-C Runtime: @ colorFactory @ :
nsobject_t 			nswindow_colorFactory( nswindow_t object );

// Signature from Objective-C Runtime: Q interfaceStyle @ :
unsigned long long 	nswindow_interfaceStyle( nswindow_t object );

// Signature from Objective-C Runtime: v setInterfaceStyle: @ : Q
void 				nswindow_setInterfaceStyle( nswindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: @ dependencyInfo @ :
nsobject_t 			nswindow_dependencyInfo( nswindow_t object );

// Signature from Objective-C Runtime: v didBecomeActiveFirstResponder @ :
void 				nswindow_didBecomeActiveFirstResponder( nswindow_t object );

// Signature from Objective-C Runtime: v didResignActiveFirstResponder @ :
void 				nswindow_didResignActiveFirstResponder( nswindow_t object );

// Signature from Objective-C Runtime: v rotateWithEvent: @ : @
void 				nswindow_rotateWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v noResponderFor: @ : :
void 				nswindow_noResponderFor( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: c wantsForwardedScrollEventsForAxis: @ : q
char 				nswindow_wantsForwardedScrollEventsForAxis( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: c wantsScrollEventsForSwipeTrackingOnAxis: @ : q
char 				nswindow_wantsScrollEventsForSwipeTrackingOnAxis( nswindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setDependencyInfo: @ : @
void 				nswindow_setDependencyInfo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v invalidateRequestor @ :
void 				nswindow_invalidateRequestor( nswindow_t object );

// Signature from Objective-C Runtime: v tabletProximity: @ : @
void 				nswindow_tabletProximity( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v smartMagnifyWithEvent: @ : @
void 				nswindow_smartMagnifyWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v swipeWithEvent: @ : @
void 				nswindow_swipeWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v beginGestureWithEvent: @ : @
void 				nswindow_beginGestureWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v endGestureWithEvent: @ : @
void 				nswindow_endGestureWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v navigateWithEvent: @ : @
void 				nswindow_navigateWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v changeModeWithEvent: @ : @
void 				nswindow_changeModeWithEvent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c wantsForwardedScrollEvents @ :
char 				nswindow_wantsForwardedScrollEvents( nswindow_t object );

// Signature from Objective-C Runtime: v showContextHelp: @ : @
void 				nswindow_showContextHelp( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ presentationWindowForError:originatedInWindow: @ : @ @
nsobject_t 			nswindow_presentationWindowForError( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ ns_widgetType @ :
nsobject_t 			nswindow_ns_widgetType( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityOverriddenAttributes @ :
nsobject_t 			nswindow_accessibilityOverriddenAttributes( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityReplaceRange:withText: @ : {_NSRange=QQ} @
char 				nswindow_accessibilityReplaceRange( nswindow_t object, _NSRange arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: Q accessibilityArrayAttributeCount: @ : @
unsigned long long 	nswindow_accessibilityArrayAttributeCount( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q accessibilityIndexOfChild: @ : @
unsigned long long 	nswindow_accessibilityIndexOfChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityArrayAttributeValues:index:maxCount: @ : @ Q Q
nsobject_t 			nswindow_accessibilityArrayAttributeValues( nswindow_t object, nsobject_t arg0, unsigned long long arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: @ accessibilityParameterizedAttributeNames @ :
nsobject_t 			nswindow_accessibilityParameterizedAttributeNames( nswindow_t object );

// Signature from Objective-C Runtime: @ accessibilityIndexForChildUIElementAttributeForParameter: @ : @
nsobject_t 			nswindow_accessibilityIndexForChildUIElementAttributeForParameter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityAttributedValueForStringAttributeAttributeForParameter: @ : @
nsobject_t 			nswindow_accessibilityAttributedValueForStringAttributeAttributeForParameter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTemporaryChildren @ :
nsobject_t 			nswindow_accessibilityTemporaryChildren( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityPerformShowMenuOfChild: @ : @
char 				nswindow_accessibilityPerformShowMenuOfChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: i accessibilityPresenterProcessIdentifier @ :
int 				nswindow_accessibilityPresenterProcessIdentifier( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilitySupportsNotifications @ :
char 				nswindow_accessibilitySupportsNotifications( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilityShouldSendNotification: @ : @
char 				nswindow_accessibilityShouldSendNotification( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilityAllowsOverriddenAttributesWhenIgnored @ :
char 				nswindow_accessibilityAllowsOverriddenAttributesWhenIgnored( nswindow_t object );

// Signature from Objective-C Runtime: c accessibilitySetOverrideValue:forAttribute: @ : @ @
char 				nswindow_accessibilitySetOverrideValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v accessibilityEncodeOverriddenAttributes: @ : @
void 				nswindow_accessibilityEncodeOverriddenAttributes( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityDecodeOverriddenAttributes: @ : @
void 				nswindow_accessibilityDecodeOverriddenAttributes( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c accessibilitySupportsCustomElementData @ :
char 				nswindow_accessibilitySupportsCustomElementData( nswindow_t object );

// Signature from Objective-C Runtime: v bind:toObject:withKeyPath:options: @ : @ @ @ @
void 				nswindow_bind( nswindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				nswindow_awakeFromNib( nswindow_t object );

// Signature from Objective-C Runtime: v unbind: @ : @
void 				nswindow_unbind( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # valueClassForBinding: @ : @
nsclass_t 			nswindow_valueClassForBinding( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NS_observationForKeyPath:options:block: @ : @ Q @?
nsobject_t 			nswindow_NS_observationForKeyPath( nswindow_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ NS_observationForKeyPaths:options:block: @ : @ Q @?
nsobject_t 			nswindow_NS_observationForKeyPaths( nswindow_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ optionDescriptionsForBinding: @ : @
nsobject_t 			nswindow_optionDescriptionsForBinding( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ exposedBindings @ :
nsobject_t 			nswindow_exposedBindings( nswindow_t object );

// Signature from Objective-C Runtime: @ infoForBinding: @ : @
nsobject_t 			nswindow_infoForBinding( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				nswindow_prepareForInterfaceBuilder( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilityAddTemporaryChild: @ : @
void 				nswindow_accessibilityAddTemporaryChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityRemoveTemporaryChild: @ : @
void 				nswindow_accessibilityRemoveTemporaryChild( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ NSLifeguard_autorelease @ :
nsobject_t 			nswindow_NSLifeguard_autorelease( nswindow_t object );

// Signature from Objective-C Runtime: v accessibilitySetPresenterProcessIdentifier: @ : i
void 				nswindow_accessibilitySetPresenterProcessIdentifier( nswindow_t object, int arg0 );

// Signature from Objective-C Runtime: @ NS_tiledLayerVisibleRect @ :
nsobject_t 			nswindow_NS_tiledLayerVisibleRect( nswindow_t object );

// Signature from Objective-C Runtime: v NS_addTiledLayerDescendent: @ : @
void 				nswindow_NS_addTiledLayerDescendent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v NS_removeTiledLayerDescendent: @ : @
void 				nswindow_NS_removeTiledLayerDescendent( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c CAMLTypeSupportedForKey: @ : @
char 				nswindow_CAMLTypeSupportedForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			nswindow_CAMLTypeForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c CA_validateValue:forKey: @ : @ @
char 				nswindow_CA_validateValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				nswindow_encodeWithCAMLWriter( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=dddddddddB}
nsobject_t 			nswindow_CA_interpolateValues( nswindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			nswindow_CAMLType( nswindow_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			nswindow_CA_archivingValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			nswindow_CA_roundToIntegerFromValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			nswindow_CA_addValue( nswindow_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			nswindow_CA_interpolateValue( nswindow_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				nswindow_CA_distanceToValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				nswindow_CA_prepareRenderValue( nswindow_t object );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}} CA_copyRenderValue @ :
Object* 			nswindow_CA_copyRenderValue( nswindow_t object );

// Signature from Objective-C Runtime: c supportsRBSXPCSecureCoding @ :
char 				nswindow_supportsRBSXPCSecureCoding( nswindow_t object );

// Signature from Objective-C Runtime: c RBSIsXPCObject @ :
char 				nswindow_RBSIsXPCObject( nswindow_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			nswindow_NSRepresentation( nswindow_t object );

// Signature from Objective-C Runtime: c supportsBSXPCSecureCoding @ :
char 				nswindow_supportsBSXPCSecureCoding( nswindow_t object );

// Signature from Objective-C Runtime: c bs_isPlistableType @ :
char 				nswindow_bs_isPlistableType( nswindow_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			nswindow_bs_secureEncoded( nswindow_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			nswindow_bs_encoded( nswindow_t object );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			nswindow_classForCoder( nswindow_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			nswindow_replacementObjectForCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			nswindow_awakeAfterUsingCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c implementsSelector: @ : :
char 				nswindow_implementsSelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				nswindow_setObservationInfo( nswindow_t object, void* arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			nswindow_replacementObjectForPortCoder( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				nswindow_willChangeValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				nswindow_didChangeValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			nswindow_dictionaryWithValuesForKeys( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			nswindow_valueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			nswindow_valueForUndefinedKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			nswindow_classForKeyedArchiver( nswindow_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			nswindow_replacementObjectForKeyedArchiver( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			nswindow_valueForKeyPath( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			nswindow_replacementObjectForArchiver( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			nswindow_classForArchiver( nswindow_t object );

// Signature from Objective-C Runtime: @ attributeKeys @ :
nsobject_t 			nswindow_attributeKeys( nswindow_t object );

// Signature from Objective-C Runtime: @ toOneRelationshipKeys @ :
nsobject_t 			nswindow_toOneRelationshipKeys( nswindow_t object );

// Signature from Objective-C Runtime: @ toManyRelationshipKeys @ :
nsobject_t 			nswindow_toManyRelationshipKeys( nswindow_t object );

// Signature from Objective-C Runtime: @ inverseForRelationshipKey: @ : @
nsobject_t 			nswindow_inverseForRelationshipKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ classDescription @ :
nsobject_t 			nswindow_classDescription( nswindow_t object );

// Signature from Objective-C Runtime: @ copyScriptingValue:forKey:withProperties: @ : @ @ @
nsobject_t 			nswindow_copyScriptingValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* nswindow_methodDescriptionForSelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ newScriptingObjectOfClass:forValueForKey:withContentsValue:properties: @ : # @ @ @
nsobject_t 			nswindow_newScriptingObjectOfClass( nswindow_t object, nsclass_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: @ handleQueryWithUnboundKey: @ : @
nsobject_t 			nswindow_handleQueryWithUnboundKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v handleTakeValue:forUnboundKey: @ : @ @
void 				nswindow_handleTakeValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ storedValueForKey: @ : @
nsobject_t 			nswindow_storedValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v takeStoredValue:forKey: @ : @ @
void 				nswindow_takeStoredValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v takeValue:forKey: @ : @ @
void 				nswindow_takeValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valuesForKeys: @ : @
nsobject_t 			nswindow_valuesForKeys( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v takeValuesFromDictionary: @ : @
void 				nswindow_takeValuesFromDictionary( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v unableToSetNilForKey: @ : @
void 				nswindow_unableToSetNilForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ keyValueBindingForKey:typeMask: @ : @ Q
nsobject_t 			nswindow_keyValueBindingForKey( nswindow_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ createKeyValueBindingForKey:typeMask: @ : @ Q
nsobject_t 			nswindow_createKeyValueBindingForKey( nswindow_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			nswindow_mutableArrayValueForKeyPath( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			nswindow_mutableOrderedSetValueForKeyPath( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			nswindow_mutableSetValueForKeyPath( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				nswindow_removeObservation( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				nswindow_receiveObservedValue( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				nswindow_receiveObservedError( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				nswindow_finishObserving( nswindow_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				nswindow_setObservation( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			nswindow_className( nswindow_t object );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			nswindow_addChainedObservers( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			nswindow_addObserverBlock( nswindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			nswindow_addObservationTransformer( nswindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				nswindow_setNilValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			nswindow_mutableArrayValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			nswindow_mutableOrderedSetValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			nswindow_mutableSetValueForKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				nswindow_setValuesForKeysWithDictionary( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				nswindow_willChange( nswindow_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				nswindow_didChange( nswindow_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				nswindow_observationInfo( nswindow_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			nswindow_autoContentAccessingProxy( nswindow_t object );

// Signature from Objective-C Runtime: @ coerceValue:forKey: @ : @ @
nsobject_t 			nswindow_coerceValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setScriptingProperties: @ : @
void 				nswindow_setScriptingProperties( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scriptingValueForSpecifier: @ : @
nsobject_t 			nswindow_scriptingValueForSpecifier( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scriptingProperties @ :
nsobject_t 			nswindow_scriptingProperties( nswindow_t object );

// Signature from Objective-C Runtime: @ coerceValueForScriptingProperties: @ : @
nsobject_t 			nswindow_coerceValueForScriptingProperties( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ valueAtIndex:inPropertyWithKey: @ : Q @
nsobject_t 			nswindow_valueAtIndex( nswindow_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valueWithName:inPropertyWithKey: @ : @ @
nsobject_t 			nswindow_valueWithName( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ valueWithUniqueID:inPropertyWithKey: @ : @ @
nsobject_t 			nswindow_valueWithUniqueID( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v insertValue:atIndex:inPropertyWithKey: @ : @ Q @
void 				nswindow_insertValue( nswindow_t object, nsobject_t arg0, unsigned long long arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v replaceValueAtIndex:inPropertyWithKey:withValue: @ : Q @ @
void 				nswindow_replaceValueAtIndex( nswindow_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v removeValueAtIndex:fromPropertyWithKey: @ : Q @
void 				nswindow_removeValueAtIndex( nswindow_t object, unsigned long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			nswindow_classForPortCoder( nswindow_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				nswindow_performSelector( nswindow_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: I classCode @ :
unsigned int 		nswindow_classCode( nswindow_t object );

// Signature from Objective-C Runtime: c isEqualTo: @ : @
char 				nswindow_isEqualTo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLessThanOrEqualTo: @ : @
char 				nswindow_isLessThanOrEqualTo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLessThan: @ : @
char 				nswindow_isLessThan( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isGreaterThanOrEqualTo: @ : @
char 				nswindow_isGreaterThanOrEqualTo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isGreaterThan: @ : @
char 				nswindow_isGreaterThan( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isNotEqualTo: @ : @
char 				nswindow_isNotEqualTo( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c doesContain: @ : @
char 				nswindow_doesContain( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isLike: @ : @
char 				nswindow_isLike( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isCaseInsensitiveLike: @ : @
char 				nswindow_isCaseInsensitiveLike( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ c @
void 				nswindow_performSelectorOnMainThread( nswindow_t object, nsselector_t arg0, nsobject_t arg1, char arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				nswindow_performSelectorInBackground( nswindow_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ classDescriptionForDestinationKey: @ : @
nsobject_t 			nswindow_classDescriptionForDestinationKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ entityName @ :
nsobject_t 			nswindow_entityName( nswindow_t object );

// Signature from Objective-C Runtime: c ownsDestinationObjectsForRelationshipKey: @ : @
char 				nswindow_ownsDestinationObjectsForRelationshipKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isToManyKey: @ : @
char 				nswindow_isToManyKey( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeObject:fromPropertyWithKey: @ : @ @
void 				nswindow_removeObject( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v addObject:toPropertyWithKey: @ : @ @
void 				nswindow_addObject( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ validateTakeValue:forKeyPath: @ : @ @
nsobject_t 			nswindow_validateTakeValue( nswindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ allPropertyKeys @ :
nsobject_t 			nswindow_allPropertyKeys( nswindow_t object );

// Signature from Objective-C Runtime: v clearProperties @ :
void 				nswindow_clearProperties( nswindow_t object );

// Signature from Objective-C Runtime: v flushKeyBindings @ :
void 				nswindow_flushKeyBindings( nswindow_t object );

// Signature from Objective-C Runtime: v takeStoredValuesFromDictionary: @ : @
void 				nswindow_takeStoredValuesFromDictionary( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c isNSDate__ @ :
char 				nswindow_isNSDate__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSString__ @ :
char 				nswindow_isNSString__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSCFConstantString__ @ :
char 				nswindow_isNSCFConstantString__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSNumber__ @ :
char 				nswindow_isNSNumber__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSArray__ @ :
char 				nswindow_isNSArray__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSDictionary__ @ :
char 				nswindow_isNSDictionary__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSSet__ @ :
char 				nswindow_isNSSet__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSData__ @ :
char 				nswindow_isNSData__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSObject__ @ :
char 				nswindow_isNSObject__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSOrderedSet__ @ :
char 				nswindow_isNSOrderedSet__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSTimeZone__ @ :
char 				nswindow_isNSTimeZone__( nswindow_t object );

// Signature from Objective-C Runtime: c isNSValue__ @ :
char 				nswindow_isNSValue__( nswindow_t object );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				nswindow_doesNotRecognizeSelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			nswindow_methodSignatureForSelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			nswindow_autorelease( nswindow_t object );

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			nswindow_copy( nswindow_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				nswindow_finalize( nswindow_t object );

// Signature from Objective-C Runtime: c isEqual: @ : @
char 				nswindow_isEqual( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			nswindow_class( nswindow_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			nswindow_self( nswindow_t object );

// Signature from Objective-C Runtime: c isProxy @ :
char 				nswindow_isProxy( nswindow_t object );

// Signature from Objective-C Runtime: c isKindOfClass: @ : #
char 				nswindow_isKindOfClass( nswindow_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: c isMemberOfClass: @ : #
char 				nswindow_isMemberOfClass( nswindow_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: c conformsToProtocol: @ : @
char 				nswindow_conformsToProtocol( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: c respondsToSelector: @ : :
char 				nswindow_respondsToSelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			nswindow_zone( nswindow_t object );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	nswindow_hash( nswindow_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			nswindow_superclass( nswindow_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			nswindow_debugDescription( nswindow_t object );

// Signature from Objective-C Runtime: c retainWeakReference @ :
char 				nswindow_retainWeakReference( nswindow_t object );

// Signature from Objective-C Runtime: c allowsWeakReference @ :
char 				nswindow_allowsWeakReference( nswindow_t object );

// Signature from Objective-C Runtime: c isFault @ :
char 				nswindow_isFault( nswindow_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				nswindow_forwardInvocation( nswindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			nswindow_forwardingTargetForSelector( nswindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			nswindow_mutableCopy( nswindow_t object );

// Signature from Objective-C Runtime: v initialize @ :
void 				nswindow_initialize( );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversForKey: @ : @
char 				nswindow_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setUserTabbingPreference: @ : q
void 				nswindow_setUserTabbingPreference( long long arg0 );

// Signature from Objective-C Runtime: c shouldPreferWindowTabbingForEvent:withIdentifier: @ : @ @
char 				nswindow_shouldPreferWindowTabbingForEvent( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: q userTabbingPreference @ :
long long 			nswindow_userTabbingPreference( );

// Signature from Objective-C Runtime: c allowsAutomaticWindowTabbing @ :
char 				nswindow_allowsAutomaticWindowTabbing( );

// Signature from Objective-C Runtime: v setAllowsAutomaticWindowTabbing: @ : c
void 				nswindow_setAllowsAutomaticWindowTabbing( char arg0 );

// Signature from Objective-C Runtime: @ defaultAnimationForKey: @ : @
nsobject_t 			nswindow_defaultAnimationForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ windowNumbersWithOptions: @ : Q
nsobject_t 			nswindow_windowNumbersWithOptions( unsigned long long arg0 );

// Signature from Objective-C Runtime: q windowNumberAtPoint:belowWindowWithWindowNumber: @ : {CGPoint=dd} q
long long 			nswindow_windowNumberAtPoint( CGPoint arg0, long long arg1 );

// Signature from Objective-C Runtime: i defaultDepthLimit @ :
int 				nswindow_defaultDepthLimit( );

// Signature from Objective-C Runtime: # frameViewClassForStyleMask: @ : Q
nsclass_t 			nswindow_frameViewClassForStyleMask( unsigned long long arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} minContentSizeForMinFrameSize:styleMask: @ : {CGSize=dd} Q
CGSize 				nswindow_minContentSizeForMinFrameSize( CGSize arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: d minFrameWidthWithTitle:styleMask: @ : @ Q
double 				nswindow_minFrameWidthWithTitle( nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingEffectiveAppearance @ :
nsobject_t 			nswindow_keyPathsForValuesAffectingEffectiveAppearance( );

// Signature from Objective-C Runtime: @ windowWithContentViewController: @ : @
nsobject_t 			nswindow_windowWithContentViewController( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffecting_appearanceForAttachedPopovers @ :
nsobject_t 			nswindow_keyPathsForValuesAffecting_appearanceForAttachedPopovers( );

// Signature from Objective-C Runtime: @ defaultAnimationForKeyPath: @ : @
nsobject_t 			nswindow_defaultAnimationForKeyPath( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingUndoManager @ :
nsobject_t 			nswindow_keyPathsForValuesAffectingUndoManager( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingTitlebarBlendingMode @ :
nsobject_t 			nswindow_keyPathsForValuesAffectingTitlebarBlendingMode( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingContentLayoutRect @ :
nsobject_t 			nswindow_keyPathsForValuesAffectingContentLayoutRect( );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversOf_borderView @ :
char 				nswindow_automaticallyNotifiesObserversOf_borderView( );

// Signature from Objective-C Runtime: d standardContentBorderThicknessForEdge:borderSize:styleMask: @ : Q Q Q
double 				nswindow_standardContentBorderThicknessForEdge( unsigned long long arg0, unsigned long long arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: v removeFrameUsingName: @ : @
void 				nswindow_removeFrameUsingName( nsobject_t arg0 );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversOfAppearance @ :
char 				nswindow_automaticallyNotifiesObserversOfAppearance( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingAppearance @ :
nsobject_t 			nswindow_keyPathsForValuesAffectingAppearance( );

// Signature from Objective-C Runtime: ^{OpaqueCUIRendererRef=} coreUIRenderer @ :
OpaqueCUIRendererRef* nswindow_coreUIRenderer( );

// Signature from Objective-C Runtime: c canBeResizedFromInterior @ :
char 				nswindow_canBeResizedFromInterior( );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversOfTouchBar @ :
char 				nswindow_automaticallyNotifiesObserversOfTouchBar( );

// Signature from Objective-C Runtime: c automaticallyTracksDependenciesOnValueForKey: @ : @
char 				nswindow_automaticallyTracksDependenciesOnValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ restorableStateKeyPaths @ :
nsobject_t 			nswindow_restorableStateKeyPaths( );

// Signature from Objective-C Runtime: c automaticallyNotifiesObserversOfServicesRequestor @ :
char 				nswindow_automaticallyNotifiesObserversOfServicesRequestor( );

// Signature from Objective-C Runtime: @ defaultPlaceholderForMarker:withBinding: @ : @ @
nsobject_t 			nswindow_defaultPlaceholderForMarker( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v exposeBinding: @ : @
void 				nswindow_exposeBinding( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setDefaultPlaceholder:forMarker:withBinding: @ : @ @ @
void 				nswindow_setDefaultPlaceholder( nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: c CA_automaticallyNotifiesObservers: @ : #
char 				nswindow_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: c CA_encodesPropertyConditionally:type: @ : I i
char 				nswindow_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			nswindow_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			nswindow_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			nswindow_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			nswindow_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			nswindow_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			nswindow_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			nswindow_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: v load @ :
void 				nswindow_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			nswindow_version( );

// Signature from Objective-C Runtime: c instancesImplementSelector: @ : :
char 				nswindow_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v poseAsClass: @ : #
void 				nswindow_poseAsClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				nswindow_setVersion( long long arg0 );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			nswindow_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			nswindow_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: c useStoredAccessor @ :
char 				nswindow_useStoredAccessor( );

// Signature from Objective-C Runtime: c accessInstanceVariablesDirectly @ :
char 				nswindow_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* nswindow_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			nswindow_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				nswindow_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				nswindow_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v flushAllKeyBindings @ :
void 				nswindow_flushAllKeyBindings( );

// Signature from Objective-C Runtime: v flushClassKeyBindings @ :
void 				nswindow_flushClassKeyBindings( );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			nswindow_SFSQLiteClassName( );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			nswindow_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			nswindow_copyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			nswindow_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			nswindow_new( );

// Signature from Objective-C Runtime: c resolveInstanceMethod: @ : :
char 				nswindow_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: c resolveClassMethod: @ : :
char 				nswindow_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
nswindow_t 			nswindow_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			nswindow_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: c isSubclassOfClass: @ : #
char 				nswindow_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: c isAncestorOfObject: @ : @
char 				nswindow_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: c instancesRespondToSelector: @ : :
char 				nswindow_instancesRespondToSelector( nsselector_t arg0 );

#endif