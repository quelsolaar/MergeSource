/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_UIAPPLICATION_HEADER
#define SHIMMER_C_OCOA_UIAPPLICATION_HEADER

typedef void*	uiapplication_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: v dealloc @ :
void 				uiapplication_dealloc( uiapplication_t object );

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			uiapplication_init( uiapplication_t object );

// Signature from Objective-C Runtime: @ delegate @ :
nsobject_t 			uiapplication_delegate( uiapplication_t object );

// Signature from Objective-C Runtime: v setDelegate: @ : @
void 				uiapplication_setDelegate( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isSuspended @ :
bool 				uiapplication_isSuspended( uiapplication_t object );

// Signature from Objective-C Runtime: @ userHomeDirectory @ :
nsobject_t 			uiapplication_userHomeDirectory( uiapplication_t object );

// Signature from Objective-C Runtime: v suspend @ :
void 				uiapplication_suspend( uiapplication_t object );

// Signature from Objective-C Runtime: q applicationState @ :
long long 			uiapplication_applicationState( uiapplication_t object );

// Signature from Objective-C Runtime: v setAlternateIconName:completionHandler: @ : @ @?
void 				uiapplication_setAlternateIconName( uiapplication_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: @ alternateIconName @ :
nsobject_t 			uiapplication_alternateIconName( uiapplication_t object );

// Signature from Objective-C Runtime: v openURL:options:completionHandler: @ : @ @ @?
void 				uiapplication_openURL( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: v sendEvent: @ : @
void 				uiapplication_sendEvent( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isLocked @ :
bool 				uiapplication_isLocked( uiapplication_t object );

// Signature from Objective-C Runtime: @ preferredContentSizeCategory @ :
nsobject_t 			uiapplication_preferredContentSizeCategory( uiapplication_t object );

// Signature from Objective-C Runtime: q interfaceOrientation @ :
long long 			uiapplication_interfaceOrientation( uiapplication_t object );

// Signature from Objective-C Runtime: q userInterfaceLayoutDirection @ :
long long 			uiapplication_userInterfaceLayoutDirection( uiapplication_t object );

// Signature from Objective-C Runtime: @ nextResponder @ :
nsobject_t 			uiapplication_nextResponder( uiapplication_t object );

// Signature from Objective-C Runtime: B becomeFirstResponder @ :
bool 				uiapplication_becomeFirstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: v beginIgnoringInteractionEvents @ :
void 				uiapplication_beginIgnoringInteractionEvents( uiapplication_t object );

// Signature from Objective-C Runtime: v endIgnoringInteractionEvents @ :
void 				uiapplication_endIgnoringInteractionEvents( uiapplication_t object );

// Signature from Objective-C Runtime: v pressesBegan:withEvent: @ : @ @
void 				uiapplication_pressesBegan( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesEnded:withEvent: @ : @ @
void 				uiapplication_pressesEnded( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesCancelled:withEvent: @ : @ @
void 				uiapplication_pressesCancelled( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B canPerformAction:withSender: @ : : @
bool 				uiapplication_canPerformAction( uiapplication_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ keyCommands @ :
nsobject_t 			uiapplication_keyCommands( uiapplication_t object );

// Signature from Objective-C Runtime: v showHelp: @ : @
void 				uiapplication_showHelp( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v startDictation: @ : @
void 				uiapplication_startDictation( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v orderFrontCharacterPalette: @ : @
void 				uiapplication_orderFrontCharacterPalette( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isFrontBoard @ :
bool 				uiapplication_isFrontBoard( uiapplication_t object );

// Signature from Objective-C Runtime: v willDisplayMiniAlert @ :
void 				uiapplication_willDisplayMiniAlert( uiapplication_t object );

// Signature from Objective-C Runtime: v didDismissMiniAlert @ :
void 				uiapplication_didDismissMiniAlert( uiapplication_t object );

// Signature from Objective-C Runtime: B isStatusBarHidden @ :
bool 				uiapplication_isStatusBarHidden( uiapplication_t object );

// Signature from Objective-C Runtime: v setIgnoresInteractionEvents: @ : B
void 				uiapplication_setIgnoresInteractionEvents( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: B sendAction:to:from:forEvent: @ : : @ @ @
bool 				uiapplication_sendAction( uiapplication_t object, nsselector_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: q statusBarStyle @ :
long long 			uiapplication_statusBarStyle( uiapplication_t object );

// Signature from Objective-C Runtime: d statusBarHeight @ :
double 				uiapplication_statusBarHeight( uiapplication_t object );

// Signature from Objective-C Runtime: B disablesFrontBoardImplicitWindowScenes @ :
bool 				uiapplication_disablesFrontBoardImplicitWindowScenes( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationDidResume @ :
void 				uiapplication_applicationDidResume( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationWillSuspend @ :
void 				uiapplication_applicationWillSuspend( uiapplication_t object );

// Signature from Objective-C Runtime: B reportApplicationSuspended @ :
bool 				uiapplication_reportApplicationSuspended( uiapplication_t object );

// Signature from Objective-C Runtime: d defaultImageSnapshotExpiration @ :
double 				uiapplication_defaultImageSnapshotExpiration( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationSuspend @ :
void 				uiapplication_applicationSuspend( uiapplication_t object );

// Signature from Objective-C Runtime: v setStatusBarStyle: @ : q
void 				uiapplication_setStatusBarStyle( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v setStatusBarHidden: @ : B
void 				uiapplication_setStatusBarHidden( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v workspace:didReceiveActions: @ : @ @
void 				uiapplication_workspace( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ statusBar @ :
nsobject_t 			uiapplication_statusBar( uiapplication_t object );

// Signature from Objective-C Runtime: @ statusBarWindow @ :
nsobject_t 			uiapplication_statusBarWindow( uiapplication_t object );

// Signature from Objective-C Runtime: @ keyWindow @ :
nsobject_t 			uiapplication_keyWindow( uiapplication_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} statusBarFrame @ :
CGRect 				uiapplication_statusBarFrame( uiapplication_t object );

// Signature from Objective-C Runtime: B supportsMultipleScenes @ :
bool 				uiapplication_supportsMultipleScenes( uiapplication_t object );

// Signature from Objective-C Runtime: v ignoreSnapshotOnNextApplicationLaunch @ :
void 				uiapplication_ignoreSnapshotOnNextApplicationLaunch( uiapplication_t object );

// Signature from Objective-C Runtime: v didReceiveMemoryWarning @ :
void 				uiapplication_didReceiveMemoryWarning( uiapplication_t object );

// Signature from Objective-C Runtime: Q beginBackgroundTaskWithName:expirationHandler: @ : @ @?
unsigned long long 	uiapplication_beginBackgroundTaskWithName( uiapplication_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: v endBackgroundTask: @ : Q
void 				uiapplication_endBackgroundTask( uiapplication_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v startedTest: @ : @
void 				uiapplication_startedTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishedTest: @ : @
void 				uiapplication_finishedTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ connectedScenes @ :
nsobject_t 			uiapplication_connectedScenes( uiapplication_t object );

// Signature from Objective-C Runtime: q activeInterfaceOrientation @ :
long long 			uiapplication_activeInterfaceOrientation( uiapplication_t object );

// Signature from Objective-C Runtime: @ windows @ :
nsobject_t 			uiapplication_windows( uiapplication_t object );

// Signature from Objective-C Runtime: v setIdleTimerDisabled: @ : B
void 				uiapplication_setIdleTimerDisabled( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: B canOpenURL: @ : @
bool 				uiapplication_canOpenURL( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isSuspendedEventsOnly @ :
bool 				uiapplication_isSuspendedEventsOnly( uiapplication_t object );

// Signature from Objective-C Runtime: d statusBarHeightForOrientation: @ : q
double 				uiapplication_statusBarHeightForOrientation( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: @ textInputMode @ :
nsobject_t 			uiapplication_textInputMode( uiapplication_t object );

// Signature from Objective-C Runtime: v setHardwareKeyboardLayoutName: @ : @
void 				uiapplication_setHardwareKeyboardLayoutName( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v handleKeyEvent: @ : ^{__GSEvent=}
void 				uiapplication_handleKeyEvent( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: B launchedToTest @ :
bool 				uiapplication_launchedToTest( uiapplication_t object );

// Signature from Objective-C Runtime: B isSuspendedUnderLock @ :
bool 				uiapplication_isSuspendedUnderLock( uiapplication_t object );

// Signature from Objective-C Runtime: v setCapsLockDelayOverride: @ : d
void 				uiapplication_setCapsLockDelayOverride( uiapplication_t object, double arg0 );

// Signature from Objective-C Runtime: B isKeyCommand: @ : @
bool 				uiapplication_isKeyCommand( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B handleKeyCommand:repeatable:beforeKeyEvent: @ : @ B B
bool 				uiapplication_handleKeyCommand( uiapplication_t object, nsobject_t arg0, bool arg1, bool arg2 );

// Signature from Objective-C Runtime: v handleKeyUIEvent: @ : @
void 				uiapplication_handleKeyUIEvent( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B systemIsAnimatingApplicationLifecycleEvent @ :
bool 				uiapplication_systemIsAnimatingApplicationLifecycleEvent( uiapplication_t object );

// Signature from Objective-C Runtime: v activityContinuationManager:displayProgressUI:dismissalHandler: @ : @ @ @?
void 				uiapplication_activityContinuationManager( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ activityContinuationManagerUserCancelledError: @ : @
nsobject_t 			uiapplication_activityContinuationManagerUserCancelledError( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B activityContinuationManagerHandleErrorsByConfiguringProgressUI: @ : @
bool 				uiapplication_activityContinuationManagerHandleErrorsByConfiguringProgressUI( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setApplicationIconBadgeNumber: @ : q
void 				uiapplication_setApplicationIconBadgeNumber( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: q applicationIconBadgeNumber @ :
long long 			uiapplication_applicationIconBadgeNumber( uiapplication_t object );

// Signature from Objective-C Runtime: @ statusBarWithWindow: @ : @
nsobject_t 			uiapplication_statusBarWithWindow( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setApplicationSupportsShakeToEdit: @ : B
void 				uiapplication_setApplicationSupportsShakeToEdit( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v registerPlatformSpecificLaunchOptions:transitionContext: @ : @? @
void 				uiapplication_registerPlatformSpecificLaunchOptions( uiapplication_t object, nsobject_t* arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v proximityStateChanged: @ : B
void 				uiapplication_proximityStateChanged( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setProximityEventsEnabled: @ : B
void 				uiapplication_setProximityEventsEnabled( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v startedSubTest:forTest: @ : @ @
void 				uiapplication_startedSubTest( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v finishedSubTest:forTest: @ : @ @
void 				uiapplication_finishedSubTest( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setReceivesMemoryWarnings: @ : B
void 				uiapplication_setReceivesMemoryWarnings( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v pushRunLoopMode:requester: @ : @ @
void 				uiapplication_pushRunLoopMode( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ userInfoDictionaryForRunLoopMode:requester: @ : @ @
nsobject_t 			uiapplication_userInfoDictionaryForRunLoopMode( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v popRunLoopMode:requester: @ : @ @
void 				uiapplication_popRunLoopMode( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} statusBarFrameForOrientation: @ : q
CGRect 				uiapplication_statusBarFrameForOrientation( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v setStatusBarOrientation:fromOrientation:windowScene:animationParameters:updateBlock: @ : q q @ @ @?
void 				uiapplication_setStatusBarOrientation( uiapplication_t object, long long arg0, long long arg1, nsobject_t arg2, nsobject_t arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: Q supportedInterfaceOrientationsForWindow: @ : @
unsigned long long 	uiapplication_supportedInterfaceOrientationsForWindow( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v suspendReturningToLastApp: @ : B
void 				uiapplication_suspendReturningToLastApp( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v applicationWillTerminate @ :
void 				uiapplication_applicationWillTerminate( uiapplication_t object );

// Signature from Objective-C Runtime: B isRunningQuitTest @ :
bool 				uiapplication_isRunningQuitTest( uiapplication_t object );

// Signature from Objective-C Runtime: B isRunningSuspendTest @ :
bool 				uiapplication_isRunningSuspendTest( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationOpenToShortCut: @ : @
void 				uiapplication_applicationOpenToShortCut( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v applicationOpenURL: @ : @
void 				uiapplication_applicationOpenURL( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ nameOfDefaultImageToUpdateAtSuspension @ :
nsobject_t 			uiapplication_nameOfDefaultImageToUpdateAtSuspension( uiapplication_t object );

// Signature from Objective-C Runtime: v prepareForDefaultImageSnapshot @ :
void 				uiapplication_prepareForDefaultImageSnapshot( uiapplication_t object );

// Signature from Objective-C Runtime: B removeDefaultImage:forScreen: @ : @ @
bool 				uiapplication_removeDefaultImage( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v prepareForDefaultImageSnapshotForScreen: @ : @
void 				uiapplication_prepareForDefaultImageSnapshotForScreen( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v extendSnapshotContext:forSnapshotAction: @ : @ @
void 				uiapplication_extendSnapshotContext( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v addStatusBarItem: @ : i
void 				uiapplication_addStatusBarItem( uiapplication_t object, int arg0 );

// Signature from Objective-C Runtime: v removeStatusBarItem: @ : i
void 				uiapplication_removeStatusBarItem( uiapplication_t object, int arg0 );

// Signature from Objective-C Runtime: @ currentUserNotificationSettings @ :
nsobject_t 			uiapplication_currentUserNotificationSettings( uiapplication_t object );

// Signature from Objective-C Runtime: v registerUserNotificationSettings: @ : @
void 				uiapplication_registerUserNotificationSettings( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q pureUserInterfaceLayoutDirection @ :
long long 			uiapplication_pureUserInterfaceLayoutDirection( uiapplication_t object );

// Signature from Objective-C Runtime: B applicationSupportsShakeToEdit @ :
bool 				uiapplication_applicationSupportsShakeToEdit( uiapplication_t object );

// Signature from Objective-C Runtime: v userDefaultsDidChange: @ : @
void 				uiapplication_userDefaultsDidChange( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setSystemVolumeHUDEnabled:forAudioCategory: @ : B @
void 				uiapplication_setSystemVolumeHUDEnabled( uiapplication_t object, bool arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B handleTestURL: @ : @
bool 				uiapplication_handleTestURL( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v registerForRemoteNotifications @ :
void 				uiapplication_registerForRemoteNotifications( uiapplication_t object );

// Signature from Objective-C Runtime: v terminateWithSuccess @ :
void 				uiapplication_terminateWithSuccess( uiapplication_t object );

// Signature from Objective-C Runtime: @ shortcutService @ :
nsobject_t 			uiapplication_shortcutService( uiapplication_t object );

// Signature from Objective-C Runtime: v setShortcutService: @ : @
void 				uiapplication_setShortcutService( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B handleEvent:withNewEvent: @ : ^{__GSEvent=} @
bool 				uiapplication_handleEvent( uiapplication_t object, __GSEvent* arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v applicationDidEndResumeAnimation @ :
void 				uiapplication_applicationDidEndResumeAnimation( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationDidBeginSuspendAnimation @ :
void 				uiapplication_applicationDidBeginSuspendAnimation( uiapplication_t object );

// Signature from Objective-C Runtime: v lockDevice: @ : ^{__GSEvent=}
void 				uiapplication_lockDevice( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v vibrateForDuration: @ : i
void 				uiapplication_vibrateForDuration( uiapplication_t object, int arg0 );

// Signature from Objective-C Runtime: v setBacklightLevel: @ : f
void 				uiapplication_setBacklightLevel( uiapplication_t object, float arg0 );

// Signature from Objective-C Runtime: v acceleratedInX:Y:Z: @ : f f f
void 				uiapplication_acceleratedInX( uiapplication_t object, float arg0, float arg1, float arg2 );

// Signature from Objective-C Runtime: ^{__GSKeyboard=} GSKeyboardForHWLayout:forceRebuild:createIfNeeded: @ : @ B B
__GSKeyboard* 		uiapplication_GSKeyboardForHWLayout( uiapplication_t object, nsobject_t arg0, bool arg1, bool arg2 );

// Signature from Objective-C Runtime: B handleKeyUpCommand: @ : @
bool 				uiapplication_handleKeyUpCommand( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setExpectsFaceContact:inLandscape: @ : B B
void 				uiapplication_setExpectsFaceContact( uiapplication_t object, bool arg0, bool arg1 );

// Signature from Objective-C Runtime: v setNetworkActivityIndicatorVisible: @ : B
void 				uiapplication_setNetworkActivityIndicatorVisible( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v workspaceShouldExit:withTransitionContext: @ : @ @
void 				uiapplication_workspaceShouldExit( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v layoutMonitor:didUpdateDisplayLayout:withContext: @ : @ @ @
void 				uiapplication_layoutMonitor( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v pushRegistry:didUpdatePushCredentials:forType: @ : @ @ @
void 				uiapplication_pushRegistry( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v prepareSnapshotsWithAction:forScene:completion: @ : @ @ @?
void 				uiapplication_prepareSnapshotsWithAction( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: @ repeatedActionWillInvokeWithObject:forPhase: @ : @ Q
nsobject_t 			uiapplication_repeatedActionWillInvokeWithObject( uiapplication_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: @ statusBarSystemNavigationAction: @ : @
nsobject_t 			uiapplication_statusBarSystemNavigationAction( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q overriddenRequestedStyleFromStyle: @ : q
long long 			uiapplication_overriddenRequestedStyleFromStyle( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: B shouldLaunchSafe @ :
bool 				uiapplication_shouldLaunchSafe( uiapplication_t object );

// Signature from Objective-C Runtime: B isIgnoringInteractionEvents @ :
bool 				uiapplication_isIgnoringInteractionEvents( uiapplication_t object );

// Signature from Objective-C Runtime: @ idleTimerDisabledReasons @ :
nsobject_t 			uiapplication_idleTimerDisabledReasons( uiapplication_t object );

// Signature from Objective-C Runtime: B isIdleTimerDisabled @ :
bool 				uiapplication_isIdleTimerDisabled( uiapplication_t object );

// Signature from Objective-C Runtime: B isNetworkActivityIndicatorVisible @ :
bool 				uiapplication_isNetworkActivityIndicatorVisible( uiapplication_t object );

// Signature from Objective-C Runtime: B handleDoubleHeightStatusBarTapWithStyleOverride: @ : Q
bool 				uiapplication_handleDoubleHeightStatusBarTapWithStyleOverride( uiapplication_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: B handleStatusBarHoverActionForRegion: @ : q
bool 				uiapplication_handleStatusBarHoverActionForRegion( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: q statusBarOrientation @ :
long long 			uiapplication_statusBarOrientation( uiapplication_t object );

// Signature from Objective-C Runtime: d statusBarOrientationAnimationDuration @ :
double 				uiapplication_statusBarOrientationAnimationDuration( uiapplication_t object );

// Signature from Objective-C Runtime: v addStatusBarStyleOverrides: @ : Q
void 				uiapplication_addStatusBarStyleOverrides( uiapplication_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v removeStatusBarStyleOverrides: @ : Q
void 				uiapplication_removeStatusBarStyleOverrides( uiapplication_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setGlowAnimationEnabled:forStyle: @ : B q
void 				uiapplication_setGlowAnimationEnabled( uiapplication_t object, bool arg0, long long arg1 );

// Signature from Objective-C Runtime: v setDoubleHeightStatusText:forStyle: @ : @ q
void 				uiapplication_setDoubleHeightStatusText( uiapplication_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: v setDoubleHeightPrefixText: @ : @
void 				uiapplication_setDoubleHeightPrefixText( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v applicationWillSuspendForEventsOnly @ :
void 				uiapplication_applicationWillSuspendForEventsOnly( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationWillSuspendUnderLock @ :
void 				uiapplication_applicationWillSuspendUnderLock( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationDidResumeFromUnderLock @ :
void 				uiapplication_applicationDidResumeFromUnderLock( uiapplication_t object );

// Signature from Objective-C Runtime: v applicationDidResumeForEventsOnly @ :
void 				uiapplication_applicationDidResumeForEventsOnly( uiapplication_t object );

// Signature from Objective-C Runtime: B isRunningInTaskSwitcher @ :
bool 				uiapplication_isRunningInTaskSwitcher( uiapplication_t object );

// Signature from Objective-C Runtime: v mediaKeyDown: @ : ^{__GSEvent=}
void 				uiapplication_mediaKeyDown( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v mediaKeyUp: @ : ^{__GSEvent=}
void 				uiapplication_mediaKeyUp( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v lockButtonDown: @ : ^{__GSEvent=}
void 				uiapplication_lockButtonDown( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v lockButtonUp: @ : ^{__GSEvent=}
void 				uiapplication_lockButtonUp( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v headsetButtonDown: @ : ^{__GSEvent=}
void 				uiapplication_headsetButtonDown( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v headsetButtonUp: @ : ^{__GSEvent=}
void 				uiapplication_headsetButtonUp( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v headsetAvailabilityChanged: @ : ^{__GSEvent=}
void 				uiapplication_headsetAvailabilityChanged( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v menuButtonDown: @ : ^{__GSEvent=}
void 				uiapplication_menuButtonDown( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v menuButtonUp: @ : ^{__GSEvent=}
void 				uiapplication_menuButtonUp( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v ringerChanged: @ : i
void 				uiapplication_ringerChanged( uiapplication_t object, int arg0 );

// Signature from Objective-C Runtime: v setWantsVolumeButtonEvents: @ : B
void 				uiapplication_setWantsVolumeButtonEvents( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setWantsLockEvents: @ : B
void 				uiapplication_setWantsLockEvents( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v volumeChanged: @ : ^{__GSEvent=}
void 				uiapplication_volumeChanged( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v accessoryKeyStateChanged: @ : ^{__GSEvent=}
void 				uiapplication_accessoryKeyStateChanged( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v resetIdleTimerAndUndim @ :
void 				uiapplication_resetIdleTimerAndUndim( uiapplication_t object );

// Signature from Objective-C Runtime: v updateSuspendedSettings: @ : @
void 				uiapplication_updateSuspendedSettings( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isHandlingOpenShortCut @ :
bool 				uiapplication_isHandlingOpenShortCut( uiapplication_t object );

// Signature from Objective-C Runtime: B isHandlingURL @ :
bool 				uiapplication_isHandlingURL( uiapplication_t object );

// Signature from Objective-C Runtime: v showNetworkPromptsIfNecessary: @ : B
void 				uiapplication_showNetworkPromptsIfNecessary( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setUsesBackgroundNetwork: @ : B
void 				uiapplication_setUsesBackgroundNetwork( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: B usesBackgroundNetwork @ :
bool 				uiapplication_usesBackgroundNetwork( uiapplication_t object );

// Signature from Objective-C Runtime: @ userLibraryDirectory @ :
nsobject_t 			uiapplication_userLibraryDirectory( uiapplication_t object );

// Signature from Objective-C Runtime: @ userCachesDirectory @ :
nsobject_t 			uiapplication_userCachesDirectory( uiapplication_t object );

// Signature from Objective-C Runtime: @ pathToDefaultImageNamed:forScreen: @ : @ @
nsobject_t 			uiapplication_pathToDefaultImageNamed( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B launchApplicationWithIdentifier:suspended: @ : @ B
bool 				uiapplication_launchApplicationWithIdentifier( uiapplication_t object, nsobject_t arg0, bool arg1 );

// Signature from Objective-C Runtime: v setNewsstandIconImage: @ : @
void 				uiapplication_setNewsstandIconImage( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setApplicationBadgeString: @ : @
void 				uiapplication_setApplicationBadgeString( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isProtectedDataAvailable @ :
bool 				uiapplication_isProtectedDataAvailable( uiapplication_t object );

// Signature from Objective-C Runtime: v addWebClipToHomeScreen: @ : @
void 				uiapplication_addWebClipToHomeScreen( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v motionBegan:withEvent: @ : q @
void 				uiapplication_motionBegan( uiapplication_t object, long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v motionEnded:withEvent: @ : q @
void 				uiapplication_motionEnded( uiapplication_t object, long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v motionCancelled:withEvent: @ : q @
void 				uiapplication_motionCancelled( uiapplication_t object, long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v noteActiveInterfaceOrientationWillChangeToOrientation: @ : q
void 				uiapplication_noteActiveInterfaceOrientationWillChangeToOrientation( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v noteActiveInterfaceOrientationDidChangeToOrientation:willAnimateWithSettings:fromOrientation: @ : q @ q
void 				uiapplication_noteActiveInterfaceOrientationDidChangeToOrientation( uiapplication_t object, long long arg0, nsobject_t arg1, long long arg2 );

// Signature from Objective-C Runtime: d windowRotationDuration @ :
double 				uiapplication_windowRotationDuration( uiapplication_t object );

// Signature from Objective-C Runtime: v setStatusBarShowsProgress: @ : B
void 				uiapplication_setStatusBarShowsProgress( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: B ignoresInteractionEvents @ :
bool 				uiapplication_ignoresInteractionEvents( uiapplication_t object );

// Signature from Objective-C Runtime: Q blockInteractionEventsCount @ :
unsigned long long 	uiapplication_blockInteractionEventsCount( uiapplication_t object );

// Signature from Objective-C Runtime: v significantTimeChange @ :
void 				uiapplication_significantTimeChange( uiapplication_t object );

// Signature from Objective-C Runtime: v batteryStatusDidChange: @ : @
void 				uiapplication_batteryStatusDidChange( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: f backlightLevel @ :
float 				uiapplication_backlightLevel( uiapplication_t object );

// Signature from Objective-C Runtime: v setProximitySensingEnabled: @ : B
void 				uiapplication_setProximitySensingEnabled( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: B isProximitySensingEnabled @ :
bool 				uiapplication_isProximitySensingEnabled( uiapplication_t object );

// Signature from Objective-C Runtime: v setSuspensionAnimationDelay: @ : d
void 				uiapplication_setSuspensionAnimationDelay( uiapplication_t object, double arg0 );

// Signature from Objective-C Runtime: @ shortcutItems @ :
nsobject_t 			uiapplication_shortcutItems( uiapplication_t object );

// Signature from Objective-C Runtime: v setShortcutItems: @ : @
void 				uiapplication_setShortcutItems( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v handleKeyHIDEvent: @ : ^{__IOHIDEvent=}
void 				uiapplication_handleKeyHIDEvent( uiapplication_t object, __IOHIDEvent* arg0 );

// Signature from Objective-C Runtime: v clearHardwareKeyboardState @ :
void 				uiapplication_clearHardwareKeyboardState( uiapplication_t object );

// Signature from Objective-C Runtime: B isPasscodeRequiredToUnlock @ :
bool 				uiapplication_isPasscodeRequiredToUnlock( uiapplication_t object );

// Signature from Objective-C Runtime: q alertInterfaceOrientation @ :
long long 			uiapplication_alertInterfaceOrientation( uiapplication_t object );

// Signature from Objective-C Runtime: v runModal: @ : @
void 				uiapplication_runModal( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v stopModal @ :
void 				uiapplication_stopModal( uiapplication_t object );

// Signature from Objective-C Runtime: B isRegisteredForRemoteNotifications @ :
bool 				uiapplication_isRegisteredForRemoteNotifications( uiapplication_t object );

// Signature from Objective-C Runtime: v unregisterForRemoteNotifications @ :
void 				uiapplication_unregisterForRemoteNotifications( uiapplication_t object );

// Signature from Objective-C Runtime: Q enabledRemoteNotificationTypes @ :
unsigned long long 	uiapplication_enabledRemoteNotificationTypes( uiapplication_t object );

// Signature from Objective-C Runtime: v registerForRemoteNotificationTypes: @ : Q
void 				uiapplication_registerForRemoteNotificationTypes( uiapplication_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v presentLocalNotificationNow: @ : @
void 				uiapplication_presentLocalNotificationNow( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v scheduleLocalNotification: @ : @
void 				uiapplication_scheduleLocalNotification( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v cancelLocalNotification: @ : @
void 				uiapplication_cancelLocalNotification( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v cancelAllLocalNotifications @ :
void 				uiapplication_cancelAllLocalNotifications( uiapplication_t object );

// Signature from Objective-C Runtime: v setScheduledLocalNotifications: @ : @
void 				uiapplication_setScheduledLocalNotifications( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ scheduledLocalNotifications @ :
nsobject_t 			uiapplication_scheduledLocalNotifications( uiapplication_t object );

// Signature from Objective-C Runtime: B shouldFenceStatusBarRotation @ :
bool 				uiapplication_shouldFenceStatusBarRotation( uiapplication_t object );

// Signature from Objective-C Runtime: d backgroundTimeRemaining @ :
double 				uiapplication_backgroundTimeRemaining( uiapplication_t object );

// Signature from Objective-C Runtime: Q beginBackgroundTaskWithExpirationHandler: @ : @?
unsigned long long 	uiapplication_beginBackgroundTaskWithExpirationHandler( uiapplication_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: B setKeepAliveTimeout:handler: @ : d @?
bool 				uiapplication_setKeepAliveTimeout( uiapplication_t object, double arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: v clearKeepAliveTimeout @ :
void 				uiapplication_clearKeepAliveTimeout( uiapplication_t object );

// Signature from Objective-C Runtime: v setMinimumBackgroundFetchInterval: @ : d
void 				uiapplication_setMinimumBackgroundFetchInterval( uiapplication_t object, double arg0 );

// Signature from Objective-C Runtime: q backgroundRefreshStatus @ :
long long 			uiapplication_backgroundRefreshStatus( uiapplication_t object );

// Signature from Objective-C Runtime: v beginReceivingRemoteControlEvents @ :
void 				uiapplication_beginReceivingRemoteControlEvents( uiapplication_t object );

// Signature from Objective-C Runtime: v endReceivingRemoteControlEvents @ :
void 				uiapplication_endReceivingRemoteControlEvents( uiapplication_t object );

// Signature from Objective-C Runtime: v buildMenuWithBuilder: @ : @
void 				uiapplication_buildMenuWithBuilder( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ openSessions @ :
nsobject_t 			uiapplication_openSessions( uiapplication_t object );

// Signature from Objective-C Runtime: v requestSceneSessionActivation:userActivity:options:errorHandler: @ : @ @ @ @?
void 				uiapplication_requestSceneSessionActivation( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: v requestSceneSessionDestruction:options:errorHandler: @ : @ @ @?
void 				uiapplication_requestSceneSessionDestruction( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: v requestSceneSessionRefresh: @ : @
void 				uiapplication_requestSceneSessionRefresh( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B supportsAlternateIcons @ :
bool 				uiapplication_supportsAlternateIcons( uiapplication_t object );

// Signature from Objective-C Runtime: v saveApplicationPreservationStateWithSessionIdentifier:viewController:beginHandler:completionHandler: @ : @ @ @? @?
void 				uiapplication_saveApplicationPreservationStateWithSessionIdentifier( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: v restoreApplicationPreservationStateWithSessionIdentifier:viewController:beginHandler:completionHandler: @ : @ @ @? @?
void 				uiapplication_restoreApplicationPreservationStateWithSessionIdentifier( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: v removeApplicationPreservationStateWithSessionIdentifier: @ : @
void 				uiapplication_removeApplicationPreservationStateWithSessionIdentifier( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v extendStateRestoration @ :
void 				uiapplication_extendStateRestoration( uiapplication_t object );

// Signature from Objective-C Runtime: v completeStateRestoration @ :
void 				uiapplication_completeStateRestoration( uiapplication_t object );

// Signature from Objective-C Runtime: v installNotificationObserverForNotificationName:forOneNotification:usingBlock: @ : @ B @?
void 				uiapplication_installNotificationObserverForNotificationName( uiapplication_t object, nsobject_t arg0, bool arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: v showKeyboardUsingBlock:withCompletionBlock: @ : @? @?
void 				uiapplication_showKeyboardUsingBlock( uiapplication_t object, nsobject_t* arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: B rotateIfNeeded: @ : q
bool 				uiapplication_rotateIfNeeded( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v runTestForKeyboardBringupAndDismissalWithName:withShowKeyboardBlock:withHideKeyboardBlock:withExtraResultsBlock:withCleanupBlock: @ : @ @? @? @? @?
void 				uiapplication_runTestForKeyboardBringupAndDismissalWithName( uiapplication_t object, nsobject_t arg0, nsobject_t* arg1, nsobject_t* arg2, nsobject_t* arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: v runTestForKeyboardRotationWithName:fromOrientation:withShowKeyboardBlock:withExtraResultsBlock:withCleanupBlock: @ : @ q @? @? @?
void 				uiapplication_runTestForKeyboardRotationWithName( uiapplication_t object, nsobject_t arg0, long long arg1, nsobject_t* arg2, nsobject_t* arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: v runTestForKeyboardSplitAndMergeWithName:withShowKeyboardBlock:withExtraResultsBlock:withCleanupBlock: @ : @ @? @? @?
void 				uiapplication_runTestForKeyboardSplitAndMergeWithName( uiapplication_t object, nsobject_t arg0, nsobject_t* arg1, nsobject_t* arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: v failedTest: @ : @
void 				uiapplication_failedTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v startLeaking @ :
void 				uiapplication_startLeaking( uiapplication_t object );

// Signature from Objective-C Runtime: v stopLeaking @ :
void 				uiapplication_stopLeaking( uiapplication_t object );

// Signature from Objective-C Runtime: v runTest:startingBeforeAnimation:stoppingAfterAnimation: @ : @ @ @
void 				uiapplication_runTest( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: B isLaunchTest: @ : @
bool 				uiapplication_isLaunchTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v startCHUDRecording: @ : @
void 				uiapplication_startCHUDRecording( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v emitPPTStartTracePointForTestName:identifier: @ : @ Q
void 				uiapplication_emitPPTStartTracePointForTestName( uiapplication_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: v installCACommitCompletionBlock: @ : @?
void 				uiapplication_installCACommitCompletionBlock( uiapplication_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ subTest:ForTest:withMetrics: @ : @ @ @
nsobject_t 			uiapplication_subTest( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v emitPPTStartTracePointForSubTestName:identifier:testIdentifier: @ : @ Q Q
void 				uiapplication_emitPPTStartTracePointForSubTestName( uiapplication_t object, nsobject_t arg0, unsigned long long arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: v emitPPTEndTracePointForSubTestName:identifier: @ : @ Q
void 				uiapplication_emitPPTEndTracePointForSubTestName( uiapplication_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: v finishedIPTest:extraResults:withTeardownBlock: @ : @ @ @?
void 				uiapplication_finishedIPTest( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: v emitPPTEndTracePointForTestName:identifier: @ : @ Q
void 				uiapplication_emitPPTEndTracePointForTestName( uiapplication_t object, nsobject_t arg0, unsigned long long arg1 );

// Signature from Objective-C Runtime: B isRunningTest @ :
bool 				uiapplication_isRunningTest( uiapplication_t object );

// Signature from Objective-C Runtime: v stopAndReportResultsForTest:extraResults:waitForNotification:withTeardownBlock: @ : @ @ @ @?
void 				uiapplication_stopAndReportResultsForTest( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: v stopCHUDRecording @ :
void 				uiapplication_stopCHUDRecording( uiapplication_t object );

// Signature from Objective-C Runtime: B shouldRecordExtendedLaunchTime @ :
bool 				uiapplication_shouldRecordExtendedLaunchTime( uiapplication_t object );

// Signature from Objective-C Runtime: v startedAnimationTest: @ : @
void 				uiapplication_startedAnimationTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ resultsForTest: @ : @
nsobject_t 			uiapplication_resultsForTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isPPTAvailable @ :
bool 				uiapplication_isPPTAvailable( uiapplication_t object );

// Signature from Objective-C Runtime: v startedIPTest: @ : @
void 				uiapplication_startedIPTest( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v testPrep:options: @ : @ @
void 				uiapplication_testPrep( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v beginRemoteSheetController:delegate:didEndSelector:contextInfo:requireTopApplication:opaque:presentAnimated: @ : @ @ : ^v B B B
void 				uiapplication_beginRemoteSheetController( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsselector_t arg2, void* arg3, bool arg4, bool arg5, bool arg6 );

// Signature from Objective-C Runtime: v endRemoteSheet: @ : @
void 				uiapplication_endRemoteSheet( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				uiapplication_doesNotRecognizeSelector( uiapplication_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: q selectionAffinity @ :
long long 			uiapplication_selectionAffinity( uiapplication_t object );

// Signature from Objective-C Runtime: B isFirstResponder @ :
bool 				uiapplication_isFirstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: @ firstResponder @ :
nsobject_t 			uiapplication_firstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: v touchesBegan:withEvent: @ : @ @
void 				uiapplication_touchesBegan( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v touchesMoved:withEvent: @ : @ @
void 				uiapplication_touchesMoved( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v touchesEnded:withEvent: @ : @ @
void 				uiapplication_touchesEnded( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v touchesCancelled:withEvent: @ : @ @
void 				uiapplication_touchesCancelled( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesChanged:withEvent: @ : @ @
void 				uiapplication_pressesChanged( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B resignFirstResponder @ :
bool 				uiapplication_resignFirstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: B canBecomeFirstResponder @ :
bool 				uiapplication_canBecomeFirstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: @ inputAccessoryView @ :
nsobject_t 			uiapplication_inputAccessoryView( uiapplication_t object );

// Signature from Objective-C Runtime: @ inputView @ :
nsobject_t 			uiapplication_inputView( uiapplication_t object );

// Signature from Objective-C Runtime: @ inputViewController @ :
nsobject_t 			uiapplication_inputViewController( uiapplication_t object );

// Signature from Objective-C Runtime: q editingInteractionConfiguration @ :
long long 			uiapplication_editingInteractionConfiguration( uiapplication_t object );

// Signature from Objective-C Runtime: @ textInputView @ :
nsobject_t 			uiapplication_textInputView( uiapplication_t object );

// Signature from Objective-C Runtime: v validateCommand: @ : @
void 				uiapplication_validateCommand( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ inputAssistantItem @ :
nsobject_t 			uiapplication_inputAssistantItem( uiapplication_t object );

// Signature from Objective-C Runtime: v reloadInputViews @ :
void 				uiapplication_reloadInputViews( uiapplication_t object );

// Signature from Objective-C Runtime: B canResignFirstResponder @ :
bool 				uiapplication_canResignFirstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: B isEditing @ :
bool 				uiapplication_isEditing( uiapplication_t object );

// Signature from Objective-C Runtime: @ userActivity @ :
nsobject_t 			uiapplication_userActivity( uiapplication_t object );

// Signature from Objective-C Runtime: v encodeRestorableStateWithCoder: @ : @
void 				uiapplication_encodeRestorableStateWithCoder( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v decodeRestorableStateWithCoder: @ : @
void 				uiapplication_decodeRestorableStateWithCoder( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ targetForAction:withSender: @ : : @
nsobject_t 			uiapplication_targetForAction( uiapplication_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ restorationIdentifier @ :
nsobject_t 			uiapplication_restorationIdentifier( uiapplication_t object );

// Signature from Objective-C Runtime: v setRestorationIdentifier: @ : @
void 				uiapplication_setRestorationIdentifier( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setUserActivity: @ : @
void 				uiapplication_setUserActivity( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v updateUserActivityState: @ : @
void 				uiapplication_updateUserActivityState( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v restoreUserActivityState: @ : @
void 				uiapplication_restoreUserActivityState( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v touchesEstimatedPropertiesUpdated: @ : @
void 				uiapplication_touchesEstimatedPropertiesUpdated( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isEditable @ :
bool 				uiapplication_isEditable( uiapplication_t object );

// Signature from Objective-C Runtime: @ undoManager @ :
nsobject_t 			uiapplication_undoManager( uiapplication_t object );

// Signature from Objective-C Runtime: @ pasteConfiguration @ :
nsobject_t 			uiapplication_pasteConfiguration( uiapplication_t object );

// Signature from Objective-C Runtime: v beginSelectionChange @ :
void 				uiapplication_beginSelectionChange( uiapplication_t object );

// Signature from Objective-C Runtime: v endSelectionChange @ :
void 				uiapplication_endSelectionChange( uiapplication_t object );

// Signature from Objective-C Runtime: @ activityItemsConfiguration @ :
nsobject_t 			uiapplication_activityItemsConfiguration( uiapplication_t object );

// Signature from Objective-C Runtime: v setActivityItemsConfiguration: @ : @
void 				uiapplication_setActivityItemsConfiguration( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ inputAccessoryViewController @ :
nsobject_t 			uiapplication_inputAccessoryViewController( uiapplication_t object );

// Signature from Objective-C Runtime: @ interactionAssistant @ :
nsobject_t 			uiapplication_interactionAssistant( uiapplication_t object );

// Signature from Objective-C Runtime: @ textInputSuggestionDelegate @ :
nsobject_t 			uiapplication_textInputSuggestionDelegate( uiapplication_t object );

// Signature from Objective-C Runtime: v set_textInputSource: @ : q
void 				uiapplication_set_textInputSource( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v captureTextFromCamera: @ : @
void 				uiapplication_captureTextFromCamera( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ textInputContextIdentifier @ :
nsobject_t 			uiapplication_textInputContextIdentifier( uiapplication_t object );

// Signature from Objective-C Runtime: @ recentsAccessoryView @ :
nsobject_t 			uiapplication_recentsAccessoryView( uiapplication_t object );

// Signature from Objective-C Runtime: v remoteControlReceivedWithEvent: @ : @
void 				uiapplication_remoteControlReceivedWithEvent( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ nextFirstResponder @ :
nsobject_t 			uiapplication_nextFirstResponder( uiapplication_t object );

// Signature from Objective-C Runtime: v pasteItemProviders: @ : @
void 				uiapplication_pasteItemProviders( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v updateTextAttributesWithConversionHandler: @ : @?
void 				uiapplication_updateTextAttributesWithConversionHandler( uiapplication_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: v scrollWheel: @ : ^{__GSEvent=}
void 				uiapplication_scrollWheel( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v gestureStarted: @ : ^{__GSEvent=}
void 				uiapplication_gestureStarted( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v gestureEnded: @ : ^{__GSEvent=}
void 				uiapplication_gestureEnded( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v gestureChanged: @ : ^{__GSEvent=}
void 				uiapplication_gestureChanged( uiapplication_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v setPasteConfiguration: @ : @
void 				uiapplication_setPasteConfiguration( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B canPasteItemProviders: @ : @
bool 				uiapplication_canPasteItemProviders( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B shouldReloadInputViews @ :
bool 				uiapplication_shouldReloadInputViews( uiapplication_t object );

// Signature from Objective-C Runtime: v reloadInputViewsWithoutReset @ :
void 				uiapplication_reloadInputViewsWithoutReset( uiapplication_t object );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			uiapplication_classForCoder( uiapplication_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			uiapplication_replacementObjectForCoder( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			uiapplication_awakeAfterUsingCoder( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B implementsSelector: @ : :
bool 				uiapplication_implementsSelector( uiapplication_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				uiapplication_setObservationInfo( uiapplication_t object, void* arg0 );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				uiapplication_setValue( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			uiapplication_replacementObjectForPortCoder( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				uiapplication_willChangeValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				uiapplication_didChangeValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			uiapplication_replacementObjectForArchiver( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			uiapplication_classForArchiver( uiapplication_t object );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			uiapplication_valueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			uiapplication_classForKeyedArchiver( uiapplication_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			uiapplication_replacementObjectForKeyedArchiver( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* uiapplication_methodDescriptionForSelector( uiapplication_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			uiapplication_valueForKeyPath( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			uiapplication_mutableArrayValueForKeyPath( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			uiapplication_mutableOrderedSetValueForKeyPath( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			uiapplication_mutableSetValueForKeyPath( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserver:forObservableKeyPath: @ : @ @
nsobject_t 			uiapplication_addObserver( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				uiapplication_removeObservation( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				uiapplication_receiveObservedValue( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				uiapplication_receiveObservedError( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				uiapplication_finishObserving( uiapplication_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				uiapplication_setObservation( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				uiapplication_observeValueForKeyPath( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				uiapplication_removeObserver( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			uiapplication_addChainedObservers( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			uiapplication_addObserverBlock( uiapplication_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			uiapplication_addObservationTransformer( uiapplication_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			uiapplication_valueForUndefinedKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				uiapplication_setNilValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			uiapplication_mutableArrayValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			uiapplication_mutableOrderedSetValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			uiapplication_mutableSetValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			uiapplication_dictionaryWithValuesForKeys( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				uiapplication_setValuesForKeysWithDictionary( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uiapplication_willChange( uiapplication_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uiapplication_didChange( uiapplication_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				uiapplication_observationInfo( uiapplication_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			uiapplication_autoContentAccessingProxy( uiapplication_t object );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			uiapplication_classForPortCoder( uiapplication_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				uiapplication_performSelector( uiapplication_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ B @
void 				uiapplication_performSelectorOnMainThread( uiapplication_t object, nsselector_t arg0, nsobject_t arg1, bool arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				uiapplication_performSelectorInBackground( uiapplication_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B isNSDate__ @ :
bool 				uiapplication_isNSDate__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSString__ @ :
bool 				uiapplication_isNSString__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSCFConstantString__ @ :
bool 				uiapplication_isNSCFConstantString__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSNumber__ @ :
bool 				uiapplication_isNSNumber__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSArray__ @ :
bool 				uiapplication_isNSArray__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSDictionary__ @ :
bool 				uiapplication_isNSDictionary__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSData__ @ :
bool 				uiapplication_isNSData__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSObject__ @ :
bool 				uiapplication_isNSObject__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSOrderedSet__ @ :
bool 				uiapplication_isNSOrderedSet__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSSet__ @ :
bool 				uiapplication_isNSSet__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSTimeZone__ @ :
bool 				uiapplication_isNSTimeZone__( uiapplication_t object );

// Signature from Objective-C Runtime: B isNSValue__ @ :
bool 				uiapplication_isNSValue__( uiapplication_t object );

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			uiapplication_description( uiapplication_t object );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			uiapplication_methodSignatureForSelector( uiapplication_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			uiapplication_className( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityLabel @ :
nsobject_t 			uiapplication_accessibilityLabel( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityLabel: @ : @
void 				uiapplication_setAccessibilityLabel( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityIdentifier: @ : @
void 				uiapplication_setAccessibilityIdentifier( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrame @ :
CGRect 				uiapplication_accessibilityFrame( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityViewIsModal @ :
nsobject_t 			uiapplication_storedAccessibilityViewIsModal( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityElementsHidden @ :
nsobject_t 			uiapplication_storedAccessibilityElementsHidden( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedShouldGroupAccessibilityChildren @ :
nsobject_t 			uiapplication_storedShouldGroupAccessibilityChildren( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityNavigationStyle @ :
nsobject_t 			uiapplication_storedAccessibilityNavigationStyle( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityRespondsToUserInteraction @ :
nsobject_t 			uiapplication_storedAccessibilityRespondsToUserInteraction( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedLabel @ :
nsobject_t 			uiapplication_accessibilityAttributedLabel( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityValue @ :
nsobject_t 			uiapplication_accessibilityValue( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedValue @ :
nsobject_t 			uiapplication_accessibilityAttributedValue( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityHint @ :
nsobject_t 			uiapplication_accessibilityHint( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedHint @ :
nsobject_t 			uiapplication_accessibilityAttributedHint( uiapplication_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityActivationPoint @ :
CGPoint 			uiapplication_accessibilityActivationPoint( uiapplication_t object );

// Signature from Objective-C Runtime: Q accessibilityTraits @ :
unsigned long long 	uiapplication_accessibilityTraits( uiapplication_t object );

// Signature from Objective-C Runtime: B isAccessibilityElement @ :
bool 				uiapplication_isAccessibilityElement( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityContainer @ :
nsobject_t 			uiapplication_accessibilityContainer( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityLanguage @ :
nsobject_t 			uiapplication_accessibilityLanguage( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityPath @ :
nsobject_t 			uiapplication_accessibilityPath( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityViewIsModal @ :
bool 				uiapplication_accessibilityViewIsModal( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityElementsHidden @ :
bool 				uiapplication_accessibilityElementsHidden( uiapplication_t object );

// Signature from Objective-C Runtime: B shouldGroupAccessibilityChildren @ :
bool 				uiapplication_shouldGroupAccessibilityChildren( uiapplication_t object );

// Signature from Objective-C Runtime: q accessibilityNavigationStyle @ :
long long 			uiapplication_accessibilityNavigationStyle( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityRespondsToUserInteraction @ :
bool 				uiapplication_accessibilityRespondsToUserInteraction( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityUserInputLabels @ :
nsobject_t 			uiapplication_accessibilityUserInputLabels( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedUserInputLabels @ :
nsobject_t 			uiapplication_accessibilityAttributedUserInputLabels( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityIdentifier @ :
nsobject_t 			uiapplication_storedAccessibilityIdentifier( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityTraits @ :
nsobject_t 			uiapplication_storedAccessibilityTraits( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedIsAccessibilityElement @ :
nsobject_t 			uiapplication_storedIsAccessibilityElement( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityFrame @ :
nsobject_t 			uiapplication_storedAccessibilityFrame( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityActivationPoint @ :
nsobject_t 			uiapplication_storedAccessibilityActivationPoint( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityHeaderElements @ :
nsobject_t 			uiapplication_accessibilityHeaderElements( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityElementsHidden: @ : B
void 				uiapplication_setAccessibilityElementsHidden( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityViewIsModal: @ : B
void 				uiapplication_setAccessibilityViewIsModal( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedLabel: @ : @
void 				uiapplication_setAccessibilityAttributedLabel( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityValue: @ : @
void 				uiapplication_setAccessibilityValue( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedValue: @ : @
void 				uiapplication_setAccessibilityAttributedValue( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHint: @ : @
void 				uiapplication_setAccessibilityHint( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedHint: @ : @
void 				uiapplication_setAccessibilityAttributedHint( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiapplication_setAccessibilityFrame( uiapplication_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setAccessibilityPath: @ : @
void 				uiapplication_setAccessibilityPath( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityActivationPoint: @ : {CGPoint=dd}
void 				uiapplication_setAccessibilityActivationPoint( uiapplication_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setAccessibilityTraits: @ : Q
void 				uiapplication_setAccessibilityTraits( uiapplication_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setIsAccessibilityElement: @ : B
void 				uiapplication_setIsAccessibilityElement( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityContainer: @ : @
void 				uiapplication_setAccessibilityContainer( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityLanguage: @ : @
void 				uiapplication_setAccessibilityLanguage( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setShouldGroupAccessibilityChildren: @ : B
void 				uiapplication_setShouldGroupAccessibilityChildren( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityNavigationStyle: @ : q
void 				uiapplication_setAccessibilityNavigationStyle( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRespondsToUserInteraction: @ : B
void 				uiapplication_setAccessibilityRespondsToUserInteraction( uiapplication_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityUserInputLabels: @ : @
void 				uiapplication_setAccessibilityUserInputLabels( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedUserInputLabels: @ : @
void 				uiapplication_setAccessibilityAttributedUserInputLabels( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTextualContext @ :
nsobject_t 			uiapplication_accessibilityTextualContext( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityTextualContext: @ : @
void 				uiapplication_setAccessibilityTextualContext( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHeaderElements: @ : @
void 				uiapplication_setAccessibilityHeaderElements( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityElementDidBecomeFocused @ :
void 				uiapplication_accessibilityElementDidBecomeFocused( uiapplication_t object );

// Signature from Objective-C Runtime: v accessibilityElementDidLoseFocus @ :
void 				uiapplication_accessibilityElementDidLoseFocus( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityElementIsFocused @ :
bool 				uiapplication_accessibilityElementIsFocused( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityAssistiveTechnologyFocusedIdentifiers @ :
nsobject_t 			uiapplication_accessibilityAssistiveTechnologyFocusedIdentifiers( uiapplication_t object );

// Signature from Objective-C Runtime: v accessibilityIncrement @ :
void 				uiapplication_accessibilityIncrement( uiapplication_t object );

// Signature from Objective-C Runtime: v accessibilityDecrement @ :
void 				uiapplication_accessibilityDecrement( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityScroll: @ : q
bool 				uiapplication_accessibilityScroll( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: B accessibilityPerformEscape @ :
bool 				uiapplication_accessibilityPerformEscape( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityPerformMagicTap @ :
bool 				uiapplication_accessibilityPerformMagicTap( uiapplication_t object );

// Signature from Objective-C Runtime: B accessibilityActivate @ :
bool 				uiapplication_accessibilityActivate( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityCustomActions: @ : @
void 				uiapplication_setAccessibilityCustomActions( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomActions @ :
nsobject_t 			uiapplication_accessibilityCustomActions( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityIdentification @ :
nsobject_t 			uiapplication_accessibilityIdentification( uiapplication_t object );

// Signature from Objective-C Runtime: v accessibilitySetIdentification: @ : @
void 				uiapplication_accessibilitySetIdentification( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityIdentifier @ :
nsobject_t 			uiapplication_accessibilityIdentifier( uiapplication_t object );

// Signature from Objective-C Runtime: Q defaultAccessibilityTraits @ :
unsigned long long 	uiapplication_defaultAccessibilityTraits( uiapplication_t object );

// Signature from Objective-C Runtime: B isAccessibilityElementByDefault @ :
bool 				uiapplication_isAccessibilityElementByDefault( uiapplication_t object );

// Signature from Objective-C Runtime: B isElementAccessibilityExposedToInterfaceBuilder @ :
bool 				uiapplication_isElementAccessibilityExposedToInterfaceBuilder( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityLocalizedStringKey @ :
nsobject_t 			uiapplication_accessibilityLocalizedStringKey( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityDragSourceDescriptors: @ : @
void 				uiapplication_setAccessibilityDragSourceDescriptors( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDragSourceDescriptors @ :
nsobject_t 			uiapplication_accessibilityDragSourceDescriptors( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityDropPointDescriptors: @ : @
void 				uiapplication_setAccessibilityDropPointDescriptors( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDropPointDescriptors @ :
nsobject_t 			uiapplication_accessibilityDropPointDescriptors( uiapplication_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityContainerType @ :
nsobject_t 			uiapplication_storedAccessibilityContainerType( uiapplication_t object );

// Signature from Objective-C Runtime: q accessibilityElementCount @ :
long long 			uiapplication_accessibilityElementCount( uiapplication_t object );

// Signature from Objective-C Runtime: @ accessibilityElementAtIndex: @ : q
nsobject_t 			uiapplication_accessibilityElementAtIndex( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: q indexOfAccessibilityElement: @ : @
long long 			uiapplication_indexOfAccessibilityElement( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityElements @ :
nsobject_t 			uiapplication_accessibilityElements( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityElements: @ : @
void 				uiapplication_setAccessibilityElements( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityContainerType @ :
long long 			uiapplication_accessibilityContainerType( uiapplication_t object );

// Signature from Objective-C Runtime: v setAccessibilityContainerType: @ : q
void 				uiapplication_setAccessibilityContainerType( uiapplication_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityCustomRotors: @ : @
void 				uiapplication_setAccessibilityCustomRotors( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomRotors @ :
nsobject_t 			uiapplication_accessibilityCustomRotors( uiapplication_t object );

// Signature from Objective-C Runtime: @ uiPresentationManager @ :
nsobject_t 			uiapplication_uiPresentationManager( uiapplication_t object );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				uiapplication_awakeFromNib( uiapplication_t object );

// Signature from Objective-C Runtime: B conformsToProtocolCached: @ : @
bool 				uiapplication_conformsToProtocolCached( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				uiapplication_prepareForInterfaceBuilder( uiapplication_t object );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				uiapplication_CA_distanceToValue( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValueWithColorspace: @ : ^{CGColorSpace=}
Object* 			uiapplication_CA_copyRenderValueWithColorspace( uiapplication_t object, CGColorSpace* arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValue @ :
Object* 			uiapplication_CA_copyRenderValue( uiapplication_t object );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			uiapplication_CA_interpolateValue( uiapplication_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			uiapplication_CA_addValue( uiapplication_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: B CAMLTypeSupportedForKey: @ : @
bool 				uiapplication_CAMLTypeSupportedForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			uiapplication_CAMLTypeForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B CA_validateValue:forKey: @ : @ @
bool 				uiapplication_CA_validateValue( uiapplication_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				uiapplication_encodeWithCAMLWriter( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=ddddddddddddddB}
nsobject_t 			uiapplication_CA_interpolateValues( uiapplication_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			uiapplication_CAMLType( uiapplication_t object );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				uiapplication_CA_prepareRenderValue( uiapplication_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			uiapplication_CA_archivingValueForKey( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			uiapplication_CA_roundToIntegerFromValue( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initFromPQLResultSet:error: @ : @ ^@
nsobject_t 			uiapplication_initFromPQLResultSet( uiapplication_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: B supportsRBSXPCSecureCoding @ :
bool 				uiapplication_supportsRBSXPCSecureCoding( uiapplication_t object );

// Signature from Objective-C Runtime: B RBSIsXPCObject @ :
bool 				uiapplication_RBSIsXPCObject( uiapplication_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			uiapplication_NSRepresentation( uiapplication_t object );

// Signature from Objective-C Runtime: @ pep_onMainThread @ :
nsobject_t 			uiapplication_pep_onMainThread( uiapplication_t object );

// Signature from Objective-C Runtime: @ pep_onThread: @ : @
nsobject_t 			uiapplication_pep_onThread( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ pep_onOperationQueue:priority: @ : @ q
nsobject_t 			uiapplication_pep_onOperationQueue( uiapplication_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: @ pep_onMainThreadIfNecessary @ :
nsobject_t 			uiapplication_pep_onMainThreadIfNecessary( uiapplication_t object );

// Signature from Objective-C Runtime: @ pep_afterDelay: @ : d
nsobject_t 			uiapplication_pep_afterDelay( uiapplication_t object, double arg0 );

// Signature from Objective-C Runtime: @ pep_getInvocation: @ : ^@
nsobject_t 			uiapplication_pep_getInvocation( uiapplication_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ stringValueSafe: @ : ^i
nsobject_t 			uiapplication_stringValueSafe( uiapplication_t object, int* arg0 );

// Signature from Objective-C Runtime: r* utf8ValueSafe: @ : ^i
char* 				uiapplication_utf8ValueSafe( uiapplication_t object, int* arg0 );

// Signature from Objective-C Runtime: B boolValueSafe @ :
bool 				uiapplication_boolValueSafe( uiapplication_t object );

// Signature from Objective-C Runtime: q int64ValueSafe @ :
long long 			uiapplication_int64ValueSafe( uiapplication_t object );

// Signature from Objective-C Runtime: d doubleValueSafe @ :
double 				uiapplication_doubleValueSafe( uiapplication_t object );

// Signature from Objective-C Runtime: B un_safeBoolValue @ :
bool 				uiapplication_un_safeBoolValue( uiapplication_t object );

// Signature from Objective-C Runtime: B supportsBSXPCSecureCoding @ :
bool 				uiapplication_supportsBSXPCSecureCoding( uiapplication_t object );

// Signature from Objective-C Runtime: B bs_isPlistableType @ :
bool 				uiapplication_bs_isPlistableType( uiapplication_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			uiapplication_bs_secureEncoded( uiapplication_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			uiapplication_bs_encoded( uiapplication_t object );

// Signature from Objective-C Runtime: v releaseOnMainThread @ :
void 				uiapplication_releaseOnMainThread( uiapplication_t object );

// Signature from Objective-C Runtime: B isProxy @ :
bool 				uiapplication_isProxy( uiapplication_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	uiapplication_retainCount( uiapplication_t object );

// Signature from Objective-C Runtime: B isEqual: @ : @
bool 				uiapplication_isEqual( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			uiapplication_class( uiapplication_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			uiapplication_self( uiapplication_t object );

// Signature from Objective-C Runtime: B isKindOfClass: @ : #
bool 				uiapplication_isKindOfClass( uiapplication_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B isMemberOfClass: @ : #
bool 				uiapplication_isMemberOfClass( uiapplication_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B conformsToProtocol: @ : @
bool 				uiapplication_conformsToProtocol( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B respondsToSelector: @ : :
bool 				uiapplication_respondsToSelector( uiapplication_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			uiapplication_retain( uiapplication_t object );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			uiapplication_autorelease( uiapplication_t object );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			uiapplication_zone( uiapplication_t object );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	uiapplication_hash( uiapplication_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			uiapplication_superclass( uiapplication_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			uiapplication_debugDescription( uiapplication_t object );

// Signature from Objective-C Runtime: B retainWeakReference @ :
bool 				uiapplication_retainWeakReference( uiapplication_t object );

// Signature from Objective-C Runtime: B allowsWeakReference @ :
bool 				uiapplication_allowsWeakReference( uiapplication_t object );

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			uiapplication_copy( uiapplication_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				uiapplication_finalize( uiapplication_t object );

// Signature from Objective-C Runtime: B isFault @ :
bool 				uiapplication_isFault( uiapplication_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				uiapplication_forwardInvocation( uiapplication_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			uiapplication_forwardingTargetForSelector( uiapplication_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			uiapplication_mutableCopy( uiapplication_t object );

// Signature from Objective-C Runtime: @ sharedApplication @ :
nsobject_t 			uiapplication_sharedApplication( );

// Signature from Objective-C Runtime: @ displayIdentifier @ :
nsobject_t 			uiapplication_displayIdentifier( );

// Signature from Objective-C Runtime: @ stringForInterfaceOrientation: @ : q
nsobject_t 			uiapplication_stringForInterfaceOrientation( long long arg0 );

// Signature from Objective-C Runtime: q statusBarStyleForString: @ : @
long long 			uiapplication_statusBarStyleForString( nsobject_t arg0 );

// Signature from Objective-C Runtime: q interfaceOrientationForString: @ : @
long long 			uiapplication_interfaceOrientationForString( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ stringForStatusBarStyle: @ : q
nsobject_t 			uiapplication_stringForStatusBarStyle( long long arg0 );

// Signature from Objective-C Runtime: @ stringForStatusBarStyleOverrides: @ : Q
nsobject_t 			uiapplication_stringForStatusBarStyleOverrides( unsigned long long arg0 );

// Signature from Objective-C Runtime: B registerAsSystemApp @ :
bool 				uiapplication_registerAsSystemApp( );

// Signature from Objective-C Runtime: B runStatusBarServer @ :
bool 				uiapplication_runStatusBarServer( );

// Signature from Objective-C Runtime: B isRunningInStoreDemoMode @ :
bool 				uiapplication_isRunningInStoreDemoMode( );

// Signature from Objective-C Runtime: q runningInStoreDemoModeFProgramNumber @ :
long long 			uiapplication_runningInStoreDemoModeFProgramNumber( );

// Signature from Objective-C Runtime: B shouldMakeUIForDefaultPNG @ :
bool 				uiapplication_shouldMakeUIForDefaultPNG( );

// Signature from Objective-C Runtime: @ displayManagerObserver @ :
nsobject_t 			uiapplication_displayManagerObserver( );

// Signature from Objective-C Runtime: B shouldBackgroundMainThreadOnSuspendedLaunch @ :
bool 				uiapplication_shouldBackgroundMainThreadOnSuspendedLaunch( );

// Signature from Objective-C Runtime: B isRunningEventPump @ :
bool 				uiapplication_isRunningEventPump( );

// Signature from Objective-C Runtime: B rendersLocally @ :
bool 				uiapplication_rendersLocally( );

// Signature from Objective-C Runtime: v registerObjectForStateRestoration:restorationIdentifier: @ : @ @
void 				uiapplication_registerObjectForStateRestoration( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ objectWithRestorationIdentifierPath: @ : @
nsobject_t 			uiapplication_objectWithRestorationIdentifierPath( nsobject_t arg0 );

// Signature from Objective-C Runtime: v clearTextInputContextIdentifier: @ : @
void 				uiapplication_clearTextInputContextIdentifier( nsobject_t arg0 );

// Signature from Objective-C Runtime: v load @ :
void 				uiapplication_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			uiapplication_version( );

// Signature from Objective-C Runtime: B instancesImplementSelector: @ : :
bool 				uiapplication_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				uiapplication_setVersion( long long arg0 );

// Signature from Objective-C Runtime: B automaticallyNotifiesObserversForKey: @ : @
bool 				uiapplication_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* uiapplication_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: B accessInstanceVariablesDirectly @ :
bool 				uiapplication_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			uiapplication_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				uiapplication_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			uiapplication_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			uiapplication_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				uiapplication_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			uiapplication_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			uiapplication_SFSQLiteClassName( );

// Signature from Objective-C Runtime: B CA_automaticallyNotifiesObservers: @ : #
bool 				uiapplication_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: B CA_encodesPropertyConditionally:type: @ : I i
bool 				uiapplication_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			uiapplication_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: B isSelectorExcludedFromWebScript: @ : :
bool 				uiapplication_isSelectorExcludedFromWebScript( nsselector_t arg0 );

// Signature from Objective-C Runtime: B isKeyExcludedFromWebScript: @ : r*
bool 				uiapplication_isKeyExcludedFromWebScript( char* arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			uiapplication_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			uiapplication_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			uiapplication_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			uiapplication_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			uiapplication_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			uiapplication_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			uiapplication_copyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			uiapplication_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: v initialize @ :
void 				uiapplication_initialize( );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			uiapplication_new( );

// Signature from Objective-C Runtime: B resolveInstanceMethod: @ : :
bool 				uiapplication_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: B resolveClassMethod: @ : :
bool 				uiapplication_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
uiapplication_t 	uiapplication_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			uiapplication_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: B isSubclassOfClass: @ : #
bool 				uiapplication_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: B isAncestorOfObject: @ : @
bool 				uiapplication_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: B instancesRespondToSelector: @ : :
bool 				uiapplication_instancesRespondToSelector( nsselector_t arg0 );

#endif