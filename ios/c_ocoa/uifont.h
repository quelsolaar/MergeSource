/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_UIFONT_HEADER
#define SHIMMER_C_OCOA_UIFONT_HEADER

typedef void*	uifont_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			uifont_description( uifont_t object );

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			uifont_init( uifont_t object );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			uifont_copyWithZone( uifont_t object, _NSZone* arg0 );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			uifont_classForCoder( uifont_t object );

// Signature from Objective-C Runtime: v encodeWithCoder: @ : @
void 				uifont_encodeWithCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initWithCoder: @ : @
nsobject_t 			uifont_initWithCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ familyName @ :
nsobject_t 			uifont_familyName( uifont_t object );

// Signature from Objective-C Runtime: @ fontName @ :
nsobject_t 			uifont_fontName( uifont_t object );

// Signature from Objective-C Runtime: @ verticalFont @ :
nsobject_t 			uifont_verticalFont( uifont_t object );

// Signature from Objective-C Runtime: {CGSize=dd} advancementForGlyph: @ : S
CGSize 				uifont_advancementForGlyph( uifont_t object, unsigned short arg0 );

// Signature from Objective-C Runtime: d pointSize @ :
double 				uifont_pointSize( uifont_t object );

// Signature from Objective-C Runtime: B isVertical @ :
bool 				uifont_isVertical( uifont_t object );

// Signature from Objective-C Runtime: d xHeight @ :
double 				uifont_xHeight( uifont_t object );

// Signature from Objective-C Runtime: d descender @ :
double 				uifont_descender( uifont_t object );

// Signature from Objective-C Runtime: d underlineThickness @ :
double 				uifont_underlineThickness( uifont_t object );

// Signature from Objective-C Runtime: d ascender @ :
double 				uifont_ascender( uifont_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} boundingRectForFont @ :
CGRect 				uifont_boundingRectForFont( uifont_t object );

// Signature from Objective-C Runtime: v getAdvancements:forCGGlyphs:count: @ : ^{CGSize=dd} r^S Q
void 				uifont_getAdvancements( uifont_t object, CGSize* arg0, unsigned short* arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: v getVerticalOriginTranslations:forCGGlyphs:count: @ : ^{CGSize=dd} r^S Q
void 				uifont_getVerticalOriginTranslations( uifont_t object, CGSize* arg0, unsigned short* arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: v applyToGraphicsContext: @ : @
void 				uifont_applyToGraphicsContext( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: Q getCaretPositions:forGlyph:maximumLength: @ : ^d I Q
unsigned long long 	uifont_getCaretPositions( uifont_t object, double* arg0, unsigned int arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: Q numberOfGlyphs @ :
unsigned long long 	uifont_numberOfGlyphs( uifont_t object );

// Signature from Objective-C Runtime: Q renderingMode @ :
unsigned long long 	uifont_renderingMode( uifont_t object );

// Signature from Objective-C Runtime: I hyphenGlyphForLocale: @ : @
unsigned int 		uifont_hyphenGlyphForLocale( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v getBoundingRects:forCGGlyphs:count: @ : ^{CGRect={CGPoint=dd}{CGSize=dd}} r^S Q
void 				uifont_getBoundingRects( uifont_t object, CGRect* arg0, unsigned short* arg1, unsigned long long arg2 );

// Signature from Objective-C Runtime: @ screenFontWithRenderingMode: @ : Q
nsobject_t 			uifont_screenFontWithRenderingMode( uifont_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: S glyphWithName: @ : @
unsigned short 		uifont_glyphWithName( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ fontWithSize: @ : d
nsobject_t 			uifont_fontWithSize( uifont_t object, double arg0 );

// Signature from Objective-C Runtime: @ fontDescriptor @ :
nsobject_t 			uifont_fontDescriptor( uifont_t object );

// Signature from Objective-C Runtime: @ coveredCharacterSet @ :
nsobject_t 			uifont_coveredCharacterSet( uifont_t object );

// Signature from Objective-C Runtime: @ bestMatchingFontForCharacters:length:attributes:actualCoveredLength: @ : r^S Q @ ^Q
nsobject_t 			uifont_bestMatchingFontForCharacters( uifont_t object, unsigned short* arg0, unsigned long long arg1, nsobject_t arg2, unsigned long long* arg3 );

// Signature from Objective-C Runtime: @ lastResortFont @ :
nsobject_t 			uifont_lastResortFont( uifont_t object );

// Signature from Objective-C Runtime: i traits @ :
int 				uifont_traits( uifont_t object );

// Signature from Objective-C Runtime: @ textStyleForScaling @ :
nsobject_t 			uifont_textStyleForScaling( uifont_t object );

// Signature from Objective-C Runtime: d pointSizeForScaling @ :
double 				uifont_pointSizeForScaling( uifont_t object );

// Signature from Objective-C Runtime: d maximumPointSizeAfterScaling @ :
double 				uifont_maximumPointSizeAfterScaling( uifont_t object );

// Signature from Objective-C Runtime: @ initWithMarkupDescription: @ : @
nsobject_t 			uifont_initWithMarkupDescription( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isIBTextStyleFont @ :
bool 				uifont_isIBTextStyleFont( uifont_t object );

// Signature from Objective-C Runtime: B isIBFontMetricsScaledFont @ :
bool 				uifont_isIBFontMetricsScaledFont( uifont_t object );

// Signature from Objective-C Runtime: d readableWidth @ :
double 				uifont_readableWidth( uifont_t object );

// Signature from Objective-C Runtime: @ initWithFamilyName:traits:size: @ : @ i d
nsobject_t 			uifont_initWithFamilyName( uifont_t object, nsobject_t arg0, int arg1, double arg2 );

// Signature from Objective-C Runtime: @ familyNameForCSSFontFamilyValueForWebKit: @ : B
nsobject_t 			uifont_familyNameForCSSFontFamilyValueForWebKit( uifont_t object, bool arg0 );

// Signature from Objective-C Runtime: @ markupDescriptionForWebKit:pointSize:sizeUnit: @ : B f @
nsobject_t 			uifont_markupDescriptionForWebKit( uifont_t object, bool arg0, float arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ markupDescription @ :
nsobject_t 			uifont_markupDescription( uifont_t object );

// Signature from Objective-C Runtime: d lineHeight @ :
double 				uifont_lineHeight( uifont_t object );

// Signature from Objective-C Runtime: @ initWithName:size: @ : @ d
nsobject_t 			uifont_initWithName( uifont_t object, nsobject_t arg0, double arg1 );

// Signature from Objective-C Runtime: @ htmlMarkupDescription @ :
nsobject_t 			uifont_htmlMarkupDescription( uifont_t object );

// Signature from Objective-C Runtime: Q mostCompatibleStringEncoding @ :
unsigned long long 	uifont_mostCompatibleStringEncoding( uifont_t object );

// Signature from Objective-C Runtime: d leading @ :
double 				uifont_leading( uifont_t object );

// Signature from Objective-C Runtime: d capHeight @ :
double 				uifont_capHeight( uifont_t object );

// Signature from Objective-C Runtime: B isSystemFont @ :
bool 				uifont_isSystemFont( uifont_t object );

// Signature from Objective-C Runtime: B isFixedPitch @ :
bool 				uifont_isFixedPitch( uifont_t object );

// Signature from Objective-C Runtime: ^{__CTFont=} CTFont @ :
__CTFont* 			uifont_CTFont( uifont_t object );

// Signature from Objective-C Runtime: v setInContext: @ : ^{CGContext=}
void 				uifont_setInContext( uifont_t object, CGContext* arg0 );

// Signature from Objective-C Runtime: d underlinePosition @ :
double 				uifont_underlinePosition( uifont_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			uifont_replacementObjectForCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			uifont_awakeAfterUsingCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B implementsSelector: @ : :
bool 				uifont_implementsSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				uifont_setObservationInfo( uifont_t object, void* arg0 );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				uifont_setValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			uifont_replacementObjectForPortCoder( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				uifont_willChangeValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				uifont_didChangeValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			uifont_replacementObjectForArchiver( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			uifont_classForArchiver( uifont_t object );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			uifont_valueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			uifont_classForKeyedArchiver( uifont_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			uifont_replacementObjectForKeyedArchiver( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* uifont_methodDescriptionForSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			uifont_valueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			uifont_mutableArrayValueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			uifont_mutableOrderedSetValueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			uifont_mutableSetValueForKeyPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserver:forObservableKeyPath: @ : @ @
nsobject_t 			uifont_addObserver( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				uifont_removeObservation( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				uifont_receiveObservedValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				uifont_receiveObservedError( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				uifont_finishObserving( uifont_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				uifont_setObservation( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				uifont_observeValueForKeyPath( uifont_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				uifont_removeObserver( uifont_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			uifont_addChainedObservers( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			uifont_addObserverBlock( uifont_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			uifont_addObservationTransformer( uifont_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			uifont_valueForUndefinedKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				uifont_setNilValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			uifont_mutableArrayValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			uifont_mutableOrderedSetValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			uifont_mutableSetValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			uifont_dictionaryWithValuesForKeys( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				uifont_setValuesForKeysWithDictionary( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uifont_willChange( uifont_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uifont_didChange( uifont_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				uifont_observationInfo( uifont_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			uifont_autoContentAccessingProxy( uifont_t object );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			uifont_classForPortCoder( uifont_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				uifont_performSelector( uifont_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ B @
void 				uifont_performSelectorOnMainThread( uifont_t object, nsselector_t arg0, nsobject_t arg1, bool arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				uifont_performSelectorInBackground( uifont_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B isNSDate__ @ :
bool 				uifont_isNSDate__( uifont_t object );

// Signature from Objective-C Runtime: B isNSString__ @ :
bool 				uifont_isNSString__( uifont_t object );

// Signature from Objective-C Runtime: B isNSCFConstantString__ @ :
bool 				uifont_isNSCFConstantString__( uifont_t object );

// Signature from Objective-C Runtime: B isNSNumber__ @ :
bool 				uifont_isNSNumber__( uifont_t object );

// Signature from Objective-C Runtime: B isNSArray__ @ :
bool 				uifont_isNSArray__( uifont_t object );

// Signature from Objective-C Runtime: B isNSDictionary__ @ :
bool 				uifont_isNSDictionary__( uifont_t object );

// Signature from Objective-C Runtime: B isNSData__ @ :
bool 				uifont_isNSData__( uifont_t object );

// Signature from Objective-C Runtime: B isNSObject__ @ :
bool 				uifont_isNSObject__( uifont_t object );

// Signature from Objective-C Runtime: B isNSOrderedSet__ @ :
bool 				uifont_isNSOrderedSet__( uifont_t object );

// Signature from Objective-C Runtime: B isNSSet__ @ :
bool 				uifont_isNSSet__( uifont_t object );

// Signature from Objective-C Runtime: B isNSTimeZone__ @ :
bool 				uifont_isNSTimeZone__( uifont_t object );

// Signature from Objective-C Runtime: B isNSValue__ @ :
bool 				uifont_isNSValue__( uifont_t object );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				uifont_doesNotRecognizeSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			uifont_methodSignatureForSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			uifont_className( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityLabel @ :
nsobject_t 			uifont_accessibilityLabel( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityLabel: @ : @
void 				uifont_setAccessibilityLabel( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityIdentifier: @ : @
void 				uifont_setAccessibilityIdentifier( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrame @ :
CGRect 				uifont_accessibilityFrame( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityViewIsModal @ :
nsobject_t 			uifont_storedAccessibilityViewIsModal( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityElementsHidden @ :
nsobject_t 			uifont_storedAccessibilityElementsHidden( uifont_t object );

// Signature from Objective-C Runtime: @ storedShouldGroupAccessibilityChildren @ :
nsobject_t 			uifont_storedShouldGroupAccessibilityChildren( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityNavigationStyle @ :
nsobject_t 			uifont_storedAccessibilityNavigationStyle( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityRespondsToUserInteraction @ :
nsobject_t 			uifont_storedAccessibilityRespondsToUserInteraction( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedLabel @ :
nsobject_t 			uifont_accessibilityAttributedLabel( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityValue @ :
nsobject_t 			uifont_accessibilityValue( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedValue @ :
nsobject_t 			uifont_accessibilityAttributedValue( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityHint @ :
nsobject_t 			uifont_accessibilityHint( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedHint @ :
nsobject_t 			uifont_accessibilityAttributedHint( uifont_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityActivationPoint @ :
CGPoint 			uifont_accessibilityActivationPoint( uifont_t object );

// Signature from Objective-C Runtime: Q accessibilityTraits @ :
unsigned long long 	uifont_accessibilityTraits( uifont_t object );

// Signature from Objective-C Runtime: B isAccessibilityElement @ :
bool 				uifont_isAccessibilityElement( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityContainer @ :
nsobject_t 			uifont_accessibilityContainer( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityLanguage @ :
nsobject_t 			uifont_accessibilityLanguage( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityPath @ :
nsobject_t 			uifont_accessibilityPath( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityViewIsModal @ :
bool 				uifont_accessibilityViewIsModal( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityElementsHidden @ :
bool 				uifont_accessibilityElementsHidden( uifont_t object );

// Signature from Objective-C Runtime: B shouldGroupAccessibilityChildren @ :
bool 				uifont_shouldGroupAccessibilityChildren( uifont_t object );

// Signature from Objective-C Runtime: q accessibilityNavigationStyle @ :
long long 			uifont_accessibilityNavigationStyle( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityRespondsToUserInteraction @ :
bool 				uifont_accessibilityRespondsToUserInteraction( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityUserInputLabels @ :
nsobject_t 			uifont_accessibilityUserInputLabels( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedUserInputLabels @ :
nsobject_t 			uifont_accessibilityAttributedUserInputLabels( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityIdentifier @ :
nsobject_t 			uifont_storedAccessibilityIdentifier( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityTraits @ :
nsobject_t 			uifont_storedAccessibilityTraits( uifont_t object );

// Signature from Objective-C Runtime: @ storedIsAccessibilityElement @ :
nsobject_t 			uifont_storedIsAccessibilityElement( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityFrame @ :
nsobject_t 			uifont_storedAccessibilityFrame( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityActivationPoint @ :
nsobject_t 			uifont_storedAccessibilityActivationPoint( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityHeaderElements @ :
nsobject_t 			uifont_accessibilityHeaderElements( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityElementsHidden: @ : B
void 				uifont_setAccessibilityElementsHidden( uifont_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityViewIsModal: @ : B
void 				uifont_setAccessibilityViewIsModal( uifont_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedLabel: @ : @
void 				uifont_setAccessibilityAttributedLabel( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityValue: @ : @
void 				uifont_setAccessibilityValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedValue: @ : @
void 				uifont_setAccessibilityAttributedValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHint: @ : @
void 				uifont_setAccessibilityHint( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedHint: @ : @
void 				uifont_setAccessibilityAttributedHint( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uifont_setAccessibilityFrame( uifont_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setAccessibilityPath: @ : @
void 				uifont_setAccessibilityPath( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityActivationPoint: @ : {CGPoint=dd}
void 				uifont_setAccessibilityActivationPoint( uifont_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setAccessibilityTraits: @ : Q
void 				uifont_setAccessibilityTraits( uifont_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setIsAccessibilityElement: @ : B
void 				uifont_setIsAccessibilityElement( uifont_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityContainer: @ : @
void 				uifont_setAccessibilityContainer( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityLanguage: @ : @
void 				uifont_setAccessibilityLanguage( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setShouldGroupAccessibilityChildren: @ : B
void 				uifont_setShouldGroupAccessibilityChildren( uifont_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityNavigationStyle: @ : q
void 				uifont_setAccessibilityNavigationStyle( uifont_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRespondsToUserInteraction: @ : B
void 				uifont_setAccessibilityRespondsToUserInteraction( uifont_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityUserInputLabels: @ : @
void 				uifont_setAccessibilityUserInputLabels( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedUserInputLabels: @ : @
void 				uifont_setAccessibilityAttributedUserInputLabels( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTextualContext @ :
nsobject_t 			uifont_accessibilityTextualContext( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityTextualContext: @ : @
void 				uifont_setAccessibilityTextualContext( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHeaderElements: @ : @
void 				uifont_setAccessibilityHeaderElements( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityElementDidBecomeFocused @ :
void 				uifont_accessibilityElementDidBecomeFocused( uifont_t object );

// Signature from Objective-C Runtime: v accessibilityElementDidLoseFocus @ :
void 				uifont_accessibilityElementDidLoseFocus( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityElementIsFocused @ :
bool 				uifont_accessibilityElementIsFocused( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityAssistiveTechnologyFocusedIdentifiers @ :
nsobject_t 			uifont_accessibilityAssistiveTechnologyFocusedIdentifiers( uifont_t object );

// Signature from Objective-C Runtime: v accessibilityIncrement @ :
void 				uifont_accessibilityIncrement( uifont_t object );

// Signature from Objective-C Runtime: v accessibilityDecrement @ :
void 				uifont_accessibilityDecrement( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityScroll: @ : q
bool 				uifont_accessibilityScroll( uifont_t object, long long arg0 );

// Signature from Objective-C Runtime: B accessibilityPerformEscape @ :
bool 				uifont_accessibilityPerformEscape( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityPerformMagicTap @ :
bool 				uifont_accessibilityPerformMagicTap( uifont_t object );

// Signature from Objective-C Runtime: B accessibilityActivate @ :
bool 				uifont_accessibilityActivate( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityCustomActions: @ : @
void 				uifont_setAccessibilityCustomActions( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomActions @ :
nsobject_t 			uifont_accessibilityCustomActions( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityIdentification @ :
nsobject_t 			uifont_accessibilityIdentification( uifont_t object );

// Signature from Objective-C Runtime: v accessibilitySetIdentification: @ : @
void 				uifont_accessibilitySetIdentification( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityIdentifier @ :
nsobject_t 			uifont_accessibilityIdentifier( uifont_t object );

// Signature from Objective-C Runtime: Q defaultAccessibilityTraits @ :
unsigned long long 	uifont_defaultAccessibilityTraits( uifont_t object );

// Signature from Objective-C Runtime: B isAccessibilityElementByDefault @ :
bool 				uifont_isAccessibilityElementByDefault( uifont_t object );

// Signature from Objective-C Runtime: B isElementAccessibilityExposedToInterfaceBuilder @ :
bool 				uifont_isElementAccessibilityExposedToInterfaceBuilder( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityLocalizedStringKey @ :
nsobject_t 			uifont_accessibilityLocalizedStringKey( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityDragSourceDescriptors: @ : @
void 				uifont_setAccessibilityDragSourceDescriptors( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDragSourceDescriptors @ :
nsobject_t 			uifont_accessibilityDragSourceDescriptors( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityDropPointDescriptors: @ : @
void 				uifont_setAccessibilityDropPointDescriptors( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDropPointDescriptors @ :
nsobject_t 			uifont_accessibilityDropPointDescriptors( uifont_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityContainerType @ :
nsobject_t 			uifont_storedAccessibilityContainerType( uifont_t object );

// Signature from Objective-C Runtime: q accessibilityElementCount @ :
long long 			uifont_accessibilityElementCount( uifont_t object );

// Signature from Objective-C Runtime: @ accessibilityElementAtIndex: @ : q
nsobject_t 			uifont_accessibilityElementAtIndex( uifont_t object, long long arg0 );

// Signature from Objective-C Runtime: q indexOfAccessibilityElement: @ : @
long long 			uifont_indexOfAccessibilityElement( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityElements @ :
nsobject_t 			uifont_accessibilityElements( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityElements: @ : @
void 				uifont_setAccessibilityElements( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityContainerType @ :
long long 			uifont_accessibilityContainerType( uifont_t object );

// Signature from Objective-C Runtime: v setAccessibilityContainerType: @ : q
void 				uifont_setAccessibilityContainerType( uifont_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityCustomRotors: @ : @
void 				uifont_setAccessibilityCustomRotors( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomRotors @ :
nsobject_t 			uifont_accessibilityCustomRotors( uifont_t object );

// Signature from Objective-C Runtime: @ uiPresentationManager @ :
nsobject_t 			uifont_uiPresentationManager( uifont_t object );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				uifont_awakeFromNib( uifont_t object );

// Signature from Objective-C Runtime: B conformsToProtocolCached: @ : @
bool 				uifont_conformsToProtocolCached( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				uifont_prepareForInterfaceBuilder( uifont_t object );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				uifont_CA_distanceToValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValueWithColorspace: @ : ^{CGColorSpace=}
Object* 			uifont_CA_copyRenderValueWithColorspace( uifont_t object, CGColorSpace* arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValue @ :
Object* 			uifont_CA_copyRenderValue( uifont_t object );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			uifont_CA_interpolateValue( uifont_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			uifont_CA_addValue( uifont_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: B CAMLTypeSupportedForKey: @ : @
bool 				uifont_CAMLTypeSupportedForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			uifont_CAMLTypeForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B CA_validateValue:forKey: @ : @ @
bool 				uifont_CA_validateValue( uifont_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				uifont_encodeWithCAMLWriter( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=ddddddddddddddB}
nsobject_t 			uifont_CA_interpolateValues( uifont_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			uifont_CAMLType( uifont_t object );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				uifont_CA_prepareRenderValue( uifont_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			uifont_CA_archivingValueForKey( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			uifont_CA_roundToIntegerFromValue( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initFromPQLResultSet:error: @ : @ ^@
nsobject_t 			uifont_initFromPQLResultSet( uifont_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: B supportsRBSXPCSecureCoding @ :
bool 				uifont_supportsRBSXPCSecureCoding( uifont_t object );

// Signature from Objective-C Runtime: B RBSIsXPCObject @ :
bool 				uifont_RBSIsXPCObject( uifont_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			uifont_NSRepresentation( uifont_t object );

// Signature from Objective-C Runtime: @ pep_onMainThread @ :
nsobject_t 			uifont_pep_onMainThread( uifont_t object );

// Signature from Objective-C Runtime: @ pep_onThread: @ : @
nsobject_t 			uifont_pep_onThread( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ pep_onOperationQueue:priority: @ : @ q
nsobject_t 			uifont_pep_onOperationQueue( uifont_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: @ pep_onMainThreadIfNecessary @ :
nsobject_t 			uifont_pep_onMainThreadIfNecessary( uifont_t object );

// Signature from Objective-C Runtime: @ pep_afterDelay: @ : d
nsobject_t 			uifont_pep_afterDelay( uifont_t object, double arg0 );

// Signature from Objective-C Runtime: @ pep_getInvocation: @ : ^@
nsobject_t 			uifont_pep_getInvocation( uifont_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ stringValueSafe: @ : ^i
nsobject_t 			uifont_stringValueSafe( uifont_t object, int* arg0 );

// Signature from Objective-C Runtime: r* utf8ValueSafe: @ : ^i
char* 				uifont_utf8ValueSafe( uifont_t object, int* arg0 );

// Signature from Objective-C Runtime: B boolValueSafe @ :
bool 				uifont_boolValueSafe( uifont_t object );

// Signature from Objective-C Runtime: q int64ValueSafe @ :
long long 			uifont_int64ValueSafe( uifont_t object );

// Signature from Objective-C Runtime: d doubleValueSafe @ :
double 				uifont_doubleValueSafe( uifont_t object );

// Signature from Objective-C Runtime: B un_safeBoolValue @ :
bool 				uifont_un_safeBoolValue( uifont_t object );

// Signature from Objective-C Runtime: B supportsBSXPCSecureCoding @ :
bool 				uifont_supportsBSXPCSecureCoding( uifont_t object );

// Signature from Objective-C Runtime: B bs_isPlistableType @ :
bool 				uifont_bs_isPlistableType( uifont_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			uifont_bs_secureEncoded( uifont_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			uifont_bs_encoded( uifont_t object );

// Signature from Objective-C Runtime: v releaseOnMainThread @ :
void 				uifont_releaseOnMainThread( uifont_t object );

// Signature from Objective-C Runtime: B isProxy @ :
bool 				uifont_isProxy( uifont_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	uifont_retainCount( uifont_t object );

// Signature from Objective-C Runtime: v dealloc @ :
void 				uifont_dealloc( uifont_t object );

// Signature from Objective-C Runtime: B isEqual: @ : @
bool 				uifont_isEqual( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			uifont_class( uifont_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			uifont_self( uifont_t object );

// Signature from Objective-C Runtime: B isKindOfClass: @ : #
bool 				uifont_isKindOfClass( uifont_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B isMemberOfClass: @ : #
bool 				uifont_isMemberOfClass( uifont_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B conformsToProtocol: @ : @
bool 				uifont_conformsToProtocol( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B respondsToSelector: @ : :
bool 				uifont_respondsToSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			uifont_retain( uifont_t object );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			uifont_autorelease( uifont_t object );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			uifont_zone( uifont_t object );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	uifont_hash( uifont_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			uifont_superclass( uifont_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			uifont_debugDescription( uifont_t object );

// Signature from Objective-C Runtime: B retainWeakReference @ :
bool 				uifont_retainWeakReference( uifont_t object );

// Signature from Objective-C Runtime: B allowsWeakReference @ :
bool 				uifont_allowsWeakReference( uifont_t object );

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			uifont_copy( uifont_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				uifont_finalize( uifont_t object );

// Signature from Objective-C Runtime: B isFault @ :
bool 				uifont_isFault( uifont_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				uifont_forwardInvocation( uifont_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			uifont_forwardingTargetForSelector( uifont_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			uifont_mutableCopy( uifont_t object );

// Signature from Objective-C Runtime: @ preferredContentSizeCategory @ :
nsobject_t 			uifont_preferredContentSizeCategory( );

// Signature from Objective-C Runtime: d defaultFontSize @ :
double 				uifont_defaultFontSize( );

// Signature from Objective-C Runtime: d systemMinimumFontSize @ :
double 				uifont_systemMinimumFontSize( );

// Signature from Objective-C Runtime: B supportsSecureCoding @ :
bool 				uifont_supportsSecureCoding( );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			uifont_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: @ userFontOfSize: @ : d
nsobject_t 			uifont_userFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ fontWithDescriptor:size: @ : @ d
nsobject_t 			uifont_fontWithDescriptor( nsobject_t arg0, double arg1 );

// Signature from Objective-C Runtime: @ fontWithName:size: @ : @ d
nsobject_t 			uifont_fontWithName( nsobject_t arg0, double arg1 );

// Signature from Objective-C Runtime: @ systemFontOfSize: @ : d
nsobject_t 			uifont_systemFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ preferredFontForTextStyle:compatibleWithTraitCollection: @ : @ @
nsobject_t 			uifont_preferredFontForTextStyle( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ ib_preferredFontForTextStyle: @ : @
nsobject_t 			uifont_ib_preferredFontForTextStyle( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ fontWithFamilyName:traits:size: @ : @ i d
nsobject_t 			uifont_fontWithFamilyName( nsobject_t arg0, int arg1, double arg2 );

// Signature from Objective-C Runtime: @ fontWithMarkupDescription: @ : @
nsobject_t 			uifont_fontWithMarkupDescription( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ familyNames @ :
nsobject_t 			uifont_familyNames( );

// Signature from Objective-C Runtime: @ fontNamesForFamilyName: @ : @
nsobject_t 			uifont_fontNamesForFamilyName( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ preferredFontForUsage: @ : @
nsobject_t 			uifont_preferredFontForUsage( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ defaultFontForTextStyle: @ : @
nsobject_t 			uifont_defaultFontForTextStyle( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ boldSystemFontOfSize: @ : d
nsobject_t 			uifont_boldSystemFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ italicSystemFontOfSize: @ : d
nsobject_t 			uifont_italicSystemFontOfSize( double arg0 );

// Signature from Objective-C Runtime: @ monospacedSystemFontOfSize:weight: @ : d d
nsobject_t 			uifont_monospacedSystemFontOfSize( double arg0, double arg1 );

// Signature from Objective-C Runtime: @ monospacedDigitSystemFontOfSize:weight: @ : d d
nsobject_t 			uifont_monospacedDigitSystemFontOfSize( double arg0, double arg1 );

// Signature from Objective-C Runtime: d labelFontSize @ :
double 				uifont_labelFontSize( );

// Signature from Objective-C Runtime: d buttonFontSize @ :
double 				uifont_buttonFontSize( );

// Signature from Objective-C Runtime: d smallSystemFontSize @ :
double 				uifont_smallSystemFontSize( );

// Signature from Objective-C Runtime: d systemFontSize @ :
double 				uifont_systemFontSize( );

// Signature from Objective-C Runtime: v load @ :
void 				uifont_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			uifont_version( );

// Signature from Objective-C Runtime: B instancesImplementSelector: @ : :
bool 				uifont_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				uifont_setVersion( long long arg0 );

// Signature from Objective-C Runtime: B automaticallyNotifiesObserversForKey: @ : @
bool 				uifont_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* uifont_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: B accessInstanceVariablesDirectly @ :
bool 				uifont_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			uifont_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				uifont_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			uifont_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				uifont_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			uifont_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			uifont_SFSQLiteClassName( );

// Signature from Objective-C Runtime: B CA_automaticallyNotifiesObservers: @ : #
bool 				uifont_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: B CA_encodesPropertyConditionally:type: @ : I i
bool 				uifont_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			uifont_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: B isSelectorExcludedFromWebScript: @ : :
bool 				uifont_isSelectorExcludedFromWebScript( nsselector_t arg0 );

// Signature from Objective-C Runtime: B isKeyExcludedFromWebScript: @ : r*
bool 				uifont_isKeyExcludedFromWebScript( char* arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			uifont_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			uifont_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			uifont_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			uifont_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			uifont_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			uifont_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			uifont_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: v initialize @ :
void 				uifont_initialize( );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			uifont_new( );

// Signature from Objective-C Runtime: B resolveInstanceMethod: @ : :
bool 				uifont_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: B resolveClassMethod: @ : :
bool 				uifont_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
uifont_t 			uifont_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			uifont_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: B isSubclassOfClass: @ : #
bool 				uifont_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: B isAncestorOfObject: @ : @
bool 				uifont_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: B instancesRespondToSelector: @ : :
bool 				uifont_instancesRespondToSelector( nsselector_t arg0 );

#endif