/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_UIWINDOW_HEADER
#define SHIMMER_C_OCOA_UIWINDOW_HEADER

typedef void*	uiwindow_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: v dealloc @ :
void 				uiwindow_dealloc( uiwindow_t object );

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			uiwindow_init( uiwindow_t object );

// Signature from Objective-C Runtime: v encodeWithCoder: @ : @
void 				uiwindow_encodeWithCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initWithCoder: @ : @
nsobject_t 			uiwindow_initWithCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ delegate @ :
nsobject_t 			uiwindow_delegate( uiwindow_t object );

// Signature from Objective-C Runtime: v setDelegate: @ : @
void 				uiwindow_setDelegate( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setHidden: @ : B
void 				uiwindow_setHidden( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: d level @ :
double 				uiwindow_level( uiwindow_t object );

// Signature from Objective-C Runtime: @ screen @ :
nsobject_t 			uiwindow_screen( uiwindow_t object );

// Signature from Objective-C Runtime: v setBounds: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_setBounds( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setCenter: @ : {CGPoint=dd}
void 				uiwindow_setCenter( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v sendEvent: @ : @
void 				uiwindow_sendEvent( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeFromSuperview @ :
void 				uiwindow_removeFromSuperview( uiwindow_t object );

// Signature from Objective-C Runtime: @ contentView @ :
nsobject_t 			uiwindow_contentView( uiwindow_t object );

// Signature from Objective-C Runtime: v setFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_setFrame( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setContentView: @ : @
void 				uiwindow_setContentView( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initWithFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
nsobject_t 			uiwindow_initWithFrame( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: @ representation @ :
nsobject_t 			uiwindow_representation( uiwindow_t object );

// Signature from Objective-C Runtime: @ traitCollection @ :
nsobject_t 			uiwindow_traitCollection( uiwindow_t object );

// Signature from Objective-C Runtime: q interfaceOrientation @ :
long long 			uiwindow_interfaceOrientation( uiwindow_t object );

// Signature from Objective-C Runtime: {UIEdgeInsets=dddd} safeAreaInsets @ :
UIEdgeInsets 		uiwindow_safeAreaInsets( uiwindow_t object );

// Signature from Objective-C Runtime: v traitCollectionDidChange: @ : @
void 				uiwindow_traitCollectionDidChange( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isElementAccessibilityExposedToInterfaceBuilder @ :
bool 				uiwindow_isElementAccessibilityExposedToInterfaceBuilder( uiwindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} convertPoint:toWindow: @ : {CGPoint=dd} @
CGPoint 			uiwindow_convertPoint( uiwindow_t object, CGPoint arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} convertRect:toCoordinateSpace: @ : {CGRect={CGPoint=dd}{CGSize=dd}} @
CGRect 				uiwindow_convertRect( uiwindow_t object, CGRect arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ preferredFocusEnvironments @ :
nsobject_t 			uiwindow_preferredFocusEnvironments( uiwindow_t object );

// Signature from Objective-C Runtime: @ parentFocusEnvironment @ :
nsobject_t 			uiwindow_parentFocusEnvironment( uiwindow_t object );

// Signature from Objective-C Runtime: @ preferredFocusedView @ :
nsobject_t 			uiwindow_preferredFocusedView( uiwindow_t object );

// Signature from Objective-C Runtime: @ nextResponder @ :
nsobject_t 			uiwindow_nextResponder( uiwindow_t object );

// Signature from Objective-C Runtime: @ initWithWindowScene: @ : @
nsobject_t 			uiwindow_initWithWindowScene( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setWindowLevel: @ : d
void 				uiwindow_setWindowLevel( uiwindow_t object, double arg0 );

// Signature from Objective-C Runtime: v setRootViewController: @ : @
void 				uiwindow_setRootViewController( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v makeKeyWindow @ :
void 				uiwindow_makeKeyWindow( uiwindow_t object );

// Signature from Objective-C Runtime: v setScreen: @ : @
void 				uiwindow_setScreen( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ rootViewController @ :
nsobject_t 			uiwindow_rootViewController( uiwindow_t object );

// Signature from Objective-C Runtime: d windowLevel @ :
double 				uiwindow_windowLevel( uiwindow_t object );

// Signature from Objective-C Runtime: B becomeFirstResponder @ :
bool 				uiwindow_becomeFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: v makeKey: @ : @
void 				uiwindow_makeKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ firstResponder @ :
nsobject_t 			uiwindow_firstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: B canPerformAction:withSender: @ : : @
bool 				uiwindow_canPerformAction( uiwindow_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v undo: @ : @
void 				uiwindow_undo( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v redo: @ : @
void 				uiwindow_redo( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ windowScene @ :
nsobject_t 			uiwindow_windowScene( uiwindow_t object );

// Signature from Objective-C Runtime: i windowOutput @ :
int 				uiwindow_windowOutput( uiwindow_t object );

// Signature from Objective-C Runtime: v setWindowScene: @ : @
void 				uiwindow_setWindowScene( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setLevel: @ : d
void 				uiwindow_setLevel( uiwindow_t object, double arg0 );

// Signature from Objective-C Runtime: v handleStatusBarChangeFromHeight:toHeight: @ : d d
void 				uiwindow_handleStatusBarChangeFromHeight( uiwindow_t object, double arg0, double arg1 );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				uiwindow_awakeFromNib( uiwindow_t object );

// Signature from Objective-C Runtime: B isRotating @ :
bool 				uiwindow_isRotating( uiwindow_t object );

// Signature from Objective-C Runtime: v beginDisablingInterfaceAutorotation @ :
void 				uiwindow_beginDisablingInterfaceAutorotation( uiwindow_t object );

// Signature from Objective-C Runtime: v endDisablingInterfaceAutorotation @ :
void 				uiwindow_endDisablingInterfaceAutorotation( uiwindow_t object );

// Signature from Objective-C Runtime: B autorotates @ :
bool 				uiwindow_autorotates( uiwindow_t object );

// Signature from Objective-C Runtime: @ restorationIdentifier @ :
nsobject_t 			uiwindow_restorationIdentifier( uiwindow_t object );

// Signature from Objective-C Runtime: v setRestorationIdentifier: @ : @
void 				uiwindow_setRestorationIdentifier( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^v createIOSurfaceWithFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void* 				uiwindow_createIOSurfaceWithFrame( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v makeKeyAndVisible @ :
void 				uiwindow_makeKeyAndVisible( uiwindow_t object );

// Signature from Objective-C Runtime: B isInterfaceAutorotationDisabled @ :
bool 				uiwindow_isInterfaceAutorotationDisabled( uiwindow_t object );

// Signature from Objective-C Runtime: B isUsingOnePartRotationAnimation @ :
bool 				uiwindow_isUsingOnePartRotationAnimation( uiwindow_t object );

// Signature from Objective-C Runtime: @ undoManager @ :
nsobject_t 			uiwindow_undoManager( uiwindow_t object );

// Signature from Objective-C Runtime: v setBecomeKeyOnOrderFront: @ : B
void 				uiwindow_setBecomeKeyOnOrderFront( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B isInternalWindow @ :
bool 				uiwindow_isInternalWindow( uiwindow_t object );

// Signature from Objective-C Runtime: v resignKeyWindow @ :
void 				uiwindow_resignKeyWindow( uiwindow_t object );

// Signature from Objective-C Runtime: B canBecomeKeyWindow @ :
bool 				uiwindow_canBecomeKeyWindow( uiwindow_t object );

// Signature from Objective-C Runtime: @ gestureParent @ :
nsobject_t 			uiwindow_gestureParent( uiwindow_t object );

// Signature from Objective-C Runtime: i bitsPerComponent @ :
int 				uiwindow_bitsPerComponent( uiwindow_t object );

// Signature from Objective-C Runtime: B isTrackingKeyboard @ :
bool 				uiwindow_isTrackingKeyboard( uiwindow_t object );

// Signature from Objective-C Runtime: v updateKeyboardAnimationOptions:duration: @ : Q d
void 				uiwindow_updateKeyboardAnimationOptions( uiwindow_t object, unsigned long long arg0, double arg1 );

// Signature from Objective-C Runtime: v toggleKeyboardLayoutGuideAnimation: @ : B
void 				uiwindow_toggleKeyboardLayoutGuideAnimation( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v updateKeyboardDockedState: @ : B
void 				uiwindow_updateKeyboardDockedState( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B updateKeyboardOffset: @ : {UIOffset=dd}
bool 				uiwindow_updateKeyboardOffset( uiwindow_t object, UIOffset arg0 );

// Signature from Objective-C Runtime: B updateKeyboardSize: @ : {CGSize=dd}
bool 				uiwindow_updateKeyboardSize( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v orderFront: @ : @
void 				uiwindow_orderFront( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v updateKeyboardForAssistantBar: @ : B
void 				uiwindow_updateKeyboardForAssistantBar( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v endDisablingInterfaceAutorotationAnimated: @ : B
void 				uiwindow_endDisablingInterfaceAutorotationAnimated( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B isKeyWindow @ :
bool 				uiwindow_isKeyWindow( uiwindow_t object );

// Signature from Objective-C Runtime: v setResizesToFullScreen: @ : B
void 				uiwindow_setResizesToFullScreen( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B keepContextInBackground @ :
bool 				uiwindow_keepContextInBackground( uiwindow_t object );

// Signature from Objective-C Runtime: v addRootViewControllerViewIfPossible @ :
void 				uiwindow_addRootViewControllerViewIfPossible( uiwindow_t object );

// Signature from Objective-C Runtime: v setAutorotates:forceUpdateInterfaceOrientation: @ : B B
void 				uiwindow_setAutorotates( uiwindow_t object, bool arg0, bool arg1 );

// Signature from Objective-C Runtime: B resizesToFullScreen @ :
bool 				uiwindow_resizesToFullScreen( uiwindow_t object );

// Signature from Objective-C Runtime: v addKeyboardLayoutGuideIfNeeded: @ : @
void 				uiwindow_addKeyboardLayoutGuideIfNeeded( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeKeyboardLayoutGuideIfNeeded: @ : @
void 				uiwindow_removeKeyboardLayoutGuideIfNeeded( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v updateKeyboardTransitionState: @ : B
void 				uiwindow_updateKeyboardTransitionState( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: @ initWithContentRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
nsobject_t 			uiwindow_initWithContentRect( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v makeKeyAndOrderFront: @ : @
void 				uiwindow_makeKeyAndOrderFront( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v orderOut: @ : @
void 				uiwindow_orderOut( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} warpPoint: @ : {CGPoint=dd}
CGPoint 			uiwindow_warpPoint( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} convertWindowToDevice: @ : {CGPoint=dd}
CGPoint 			uiwindow_convertWindowToDevice( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} convertDeviceToWindow: @ : {CGPoint=dd}
CGPoint 			uiwindow_convertDeviceToWindow( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v becomeKeyWindow @ :
void 				uiwindow_becomeKeyWindow( uiwindow_t object );

// Signature from Objective-C Runtime: ^v createIOSurface @ :
void* 				uiwindow_createIOSurface( uiwindow_t object );

// Signature from Objective-C Runtime: v setKeepContextInBackground: @ : B
void 				uiwindow_setKeepContextInBackground( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v set_currentKeyboardTrackingLayoutGuides: @ : @
void 				uiwindow_set_currentKeyboardTrackingLayoutGuides( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B canResizeToFitContent @ :
bool 				uiwindow_canResizeToFitContent( uiwindow_t object );

// Signature from Objective-C Runtime: v setCanResizeToFitContent: @ : B
void 				uiwindow_setCanResizeToFitContent( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B inhibitSetupOrientation @ :
bool 				uiwindow_inhibitSetupOrientation( uiwindow_t object );

// Signature from Objective-C Runtime: B inhibitManualTransform @ :
bool 				uiwindow_inhibitManualTransform( uiwindow_t object );

// Signature from Objective-C Runtime: v keyboardDidHide @ :
void 				uiwindow_keyboardDidHide( uiwindow_t object );

// Signature from Objective-C Runtime: B inhibitTextEffectsRotation @ :
bool 				uiwindow_inhibitTextEffectsRotation( uiwindow_t object );

// Signature from Objective-C Runtime: v setupForOrientation: @ : q
void 				uiwindow_setupForOrientation( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v matchDeviceOrientation: @ : @
void 				uiwindow_matchDeviceOrientation( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v exerciseAmbiguityInLayout @ :
void 				uiwindow_exerciseAmbiguityInLayout( uiwindow_t object );

// Signature from Objective-C Runtime: B hasAmbiguousLayout @ :
bool 				uiwindow_hasAmbiguousLayout( uiwindow_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	uiwindow_retainCount( uiwindow_t object );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			uiwindow_retain( uiwindow_t object );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			uiwindow_autorelease( uiwindow_t object );

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			uiwindow_description( uiwindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} size @ :
CGSize 				uiwindow_size( uiwindow_t object );

// Signature from Objective-C Runtime: B isHidden @ :
bool 				uiwindow_isHidden( uiwindow_t object );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				uiwindow_setValue( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setEnabled: @ : B
void 				uiwindow_setEnabled( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: {CGAffineTransform=dddddd} transform @ :
CGAffineTransform 	uiwindow_transform( uiwindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} position @ :
CGPoint 			uiwindow_position( uiwindow_t object );

// Signature from Objective-C Runtime: v setPosition: @ : {CGPoint=dd}
void 				uiwindow_setPosition( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: B isEnabled @ :
bool 				uiwindow_isEnabled( uiwindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} extent @ :
CGRect 				uiwindow_extent( uiwindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} bounds @ :
CGRect 				uiwindow_bounds( uiwindow_t object );

// Signature from Objective-C Runtime: d alpha @ :
double 				uiwindow_alpha( uiwindow_t object );

// Signature from Objective-C Runtime: B isOpaque @ :
bool 				uiwindow_isOpaque( uiwindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} origin @ :
CGPoint 			uiwindow_origin( uiwindow_t object );

// Signature from Objective-C Runtime: v setSize: @ : {CGSize=dd}
void 				uiwindow_setSize( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} frame @ :
CGRect 				uiwindow_frame( uiwindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} center @ :
CGPoint 			uiwindow_center( uiwindow_t object );

// Signature from Objective-C Runtime: v setTransform: @ : {CGAffineTransform=dddddd}
void 				uiwindow_setTransform( uiwindow_t object, CGAffineTransform arg0 );

// Signature from Objective-C Runtime: @ interactions @ :
nsobject_t 			uiwindow_interactions( uiwindow_t object );

// Signature from Objective-C Runtime: v setInteractions: @ : @
void 				uiwindow_setInteractions( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q contentMode @ :
long long 			uiwindow_contentMode( uiwindow_t object );

// Signature from Objective-C Runtime: @ snapshot @ :
nsobject_t 			uiwindow_snapshot( uiwindow_t object );

// Signature from Objective-C Runtime: @ constraints @ :
nsobject_t 			uiwindow_constraints( uiwindow_t object );

// Signature from Objective-C Runtime: q tag @ :
long long 			uiwindow_tag( uiwindow_t object );

// Signature from Objective-C Runtime: v setOpaque: @ : B
void 				uiwindow_setOpaque( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setNeedsLayout @ :
void 				uiwindow_setNeedsLayout( uiwindow_t object );

// Signature from Objective-C Runtime: @ superview @ :
nsobject_t 			uiwindow_superview( uiwindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} convertSize:toView: @ : {CGSize=dd} @
CGSize 				uiwindow_convertSize( uiwindow_t object, CGSize arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setFrameOrigin: @ : {CGPoint=dd}
void 				uiwindow_setFrameOrigin( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: d contentScaleFactor @ :
double 				uiwindow_contentScaleFactor( uiwindow_t object );

// Signature from Objective-C Runtime: @ initWithSize: @ : {CGSize=dd}
nsobject_t 			uiwindow_initWithSize( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: B needsDisplay @ :
bool 				uiwindow_needsDisplay( uiwindow_t object );

// Signature from Objective-C Runtime: @ backgroundColor @ :
nsobject_t 			uiwindow_backgroundColor( uiwindow_t object );

// Signature from Objective-C Runtime: v setBackgroundColor: @ : @
void 				uiwindow_setBackgroundColor( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNeedsDisplayInRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_setNeedsDisplayInRect( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v addSubview: @ : @
void 				uiwindow_addSubview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} intrinsicContentSize @ :
CGSize 				uiwindow_intrinsicContentSize( uiwindow_t object );

// Signature from Objective-C Runtime: v addInteraction: @ : @
void 				uiwindow_addInteraction( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v layoutSubviews @ :
void 				uiwindow_layoutSubviews( uiwindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} sizeThatFits: @ : {CGSize=dd}
CGSize 				uiwindow_sizeThatFits( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v setTranslatesAutoresizingMaskIntoConstraints: @ : B
void 				uiwindow_setTranslatesAutoresizingMaskIntoConstraints( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: @ layer @ :
nsobject_t 			uiwindow_layer( uiwindow_t object );

// Signature from Objective-C Runtime: @ centerXAnchor @ :
nsobject_t 			uiwindow_centerXAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ widthAnchor @ :
nsobject_t 			uiwindow_widthAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ heightAnchor @ :
nsobject_t 			uiwindow_heightAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: v setContentHuggingPriority:forAxis: @ : f q
void 				uiwindow_setContentHuggingPriority( uiwindow_t object, float arg0, long long arg1 );

// Signature from Objective-C Runtime: v setContentCompressionResistancePriority:forAxis: @ : f q
void 				uiwindow_setContentCompressionResistancePriority( uiwindow_t object, float arg0, long long arg1 );

// Signature from Objective-C Runtime: v addLayoutGuide: @ : @
void 				uiwindow_addLayoutGuide( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ topAnchor @ :
nsobject_t 			uiwindow_topAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ bottomAnchor @ :
nsobject_t 			uiwindow_bottomAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ leadingAnchor @ :
nsobject_t 			uiwindow_leadingAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ trailingAnchor @ :
nsobject_t 			uiwindow_trailingAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ centerYAnchor @ :
nsobject_t 			uiwindow_centerYAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: v layoutIfNeeded @ :
void 				uiwindow_layoutIfNeeded( uiwindow_t object );

// Signature from Objective-C Runtime: B isHiddenOrHasHiddenAncestor @ :
bool 				uiwindow_isHiddenOrHasHiddenAncestor( uiwindow_t object );

// Signature from Objective-C Runtime: @ window @ :
nsobject_t 			uiwindow_window( uiwindow_t object );

// Signature from Objective-C Runtime: B isAccessibilityElementByDefault @ :
bool 				uiwindow_isAccessibilityElementByDefault( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityIgnoresInvertColors: @ : B
void 				uiwindow_setAccessibilityIgnoresInvertColors( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B accessibilityIgnoresInvertColors @ :
bool 				uiwindow_accessibilityIgnoresInvertColors( uiwindow_t object );

// Signature from Objective-C Runtime: v accessibilityUnapplyInvertFilter @ :
void 				uiwindow_accessibilityUnapplyInvertFilter( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityInvertFilterApplied @ :
bool 				uiwindow_accessibilityInvertFilterApplied( uiwindow_t object );

// Signature from Objective-C Runtime: v accessibilityApplyInvertFilter @ :
void 				uiwindow_accessibilityApplyInvertFilter( uiwindow_t object );

// Signature from Objective-C Runtime: @ gestureRecognizers @ :
nsobject_t 			uiwindow_gestureRecognizers( uiwindow_t object );

// Signature from Objective-C Runtime: v updateFocusIfNeeded @ :
void 				uiwindow_updateFocusIfNeeded( uiwindow_t object );

// Signature from Objective-C Runtime: @ coordinateSpace @ :
nsobject_t 			uiwindow_coordinateSpace( uiwindow_t object );

// Signature from Objective-C Runtime: v setNeedsFocusUpdate @ :
void 				uiwindow_setNeedsFocusUpdate( uiwindow_t object );

// Signature from Objective-C Runtime: B shouldUpdateFocusInContext: @ : @
bool 				uiwindow_shouldUpdateFocusInContext( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didUpdateFocusInContext:withAnimationCoordinator: @ : @ @
void 				uiwindow_didUpdateFocusInContext( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ focusItemContainer @ :
nsobject_t 			uiwindow_focusItemContainer( uiwindow_t object );

// Signature from Objective-C Runtime: @ focusGroupIdentifier @ :
nsobject_t 			uiwindow_focusGroupIdentifier( uiwindow_t object );

// Signature from Objective-C Runtime: B areChildrenFocused @ :
bool 				uiwindow_areChildrenFocused( uiwindow_t object );

// Signature from Objective-C Runtime: v setAreChildrenFocused: @ : B
void 				uiwindow_setAreChildrenFocused( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B canBecomeFocused @ :
bool 				uiwindow_canBecomeFocused( uiwindow_t object );

// Signature from Objective-C Runtime: @ focusEffect @ :
nsobject_t 			uiwindow_focusEffect( uiwindow_t object );

// Signature from Objective-C Runtime: q focusGroupPriority @ :
long long 			uiwindow_focusGroupPriority( uiwindow_t object );

// Signature from Objective-C Runtime: B isTransparentFocusItem @ :
bool 				uiwindow_isTransparentFocusItem( uiwindow_t object );

// Signature from Objective-C Runtime: @ focusItemsInRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
nsobject_t 			uiwindow_focusItemsInRect( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v addGestureRecognizer: @ : @
void 				uiwindow_addGestureRecognizer( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeGestureRecognizer: @ : @
void 				uiwindow_removeGestureRecognizer( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B gestureRecognizerShouldBegin: @ : @
bool 				uiwindow_gestureRecognizerShouldBegin( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAutoresizingMask: @ : Q
void 				uiwindow_setAutoresizingMask( uiwindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setUserInteractionEnabled: @ : B
void 				uiwindow_setUserInteractionEnabled( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: @ largeContentTitle @ :
nsobject_t 			uiwindow_largeContentTitle( uiwindow_t object );

// Signature from Objective-C Runtime: @ largeContentImage @ :
nsobject_t 			uiwindow_largeContentImage( uiwindow_t object );

// Signature from Objective-C Runtime: {UIEdgeInsets=dddd} largeContentImageInsets @ :
UIEdgeInsets 		uiwindow_largeContentImageInsets( uiwindow_t object );

// Signature from Objective-C Runtime: B scalesLargeContentImage @ :
bool 				uiwindow_scalesLargeContentImage( uiwindow_t object );

// Signature from Objective-C Runtime: v setClipsToBounds: @ : B
void 				uiwindow_setClipsToBounds( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setContentMode: @ : q
void 				uiwindow_setContentMode( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAlpha: @ : d
void 				uiwindow_setAlpha( uiwindow_t object, double arg0 );

// Signature from Objective-C Runtime: v sizeToFit @ :
void 				uiwindow_sizeToFit( uiwindow_t object );

// Signature from Objective-C Runtime: v addConstraints: @ : @
void 				uiwindow_addConstraints( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ tintColor @ :
nsobject_t 			uiwindow_tintColor( uiwindow_t object );

// Signature from Objective-C Runtime: v setTintColor: @ : @
void 				uiwindow_setTintColor( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isFocused @ :
bool 				uiwindow_isFocused( uiwindow_t object );

// Signature from Objective-C Runtime: v setLayoutMargins: @ : {UIEdgeInsets=dddd}
void 				uiwindow_setLayoutMargins( uiwindow_t object, UIEdgeInsets arg0 );

// Signature from Objective-C Runtime: q tintAdjustmentMode @ :
long long 			uiwindow_tintAdjustmentMode( uiwindow_t object );

// Signature from Objective-C Runtime: v setTintAdjustmentMode: @ : q
void 				uiwindow_setTintAdjustmentMode( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ motionEffects @ :
nsobject_t 			uiwindow_motionEffects( uiwindow_t object );

// Signature from Objective-C Runtime: v addMotionEffect: @ : @
void 				uiwindow_addMotionEffect( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v removeMotionEffect: @ : @
void 				uiwindow_removeMotionEffect( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setMotionEffects: @ : @
void 				uiwindow_setMotionEffects( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ rightAnchor @ :
nsobject_t 			uiwindow_rightAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: v setSemanticContentAttribute: @ : q
void 				uiwindow_setSemanticContentAttribute( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: {UIEdgeInsets=dddd} alignmentRectInsets @ :
UIEdgeInsets 		uiwindow_alignmentRectInsets( uiwindow_t object );

// Signature from Objective-C Runtime: v setNeedsUpdateConstraints @ :
void 				uiwindow_setNeedsUpdateConstraints( uiwindow_t object );

// Signature from Objective-C Runtime: {UIEdgeInsets=dddd} layoutMargins @ :
UIEdgeInsets 		uiwindow_layoutMargins( uiwindow_t object );

// Signature from Objective-C Runtime: v updateConstraintsIfNeeded @ :
void 				uiwindow_updateConstraintsIfNeeded( uiwindow_t object );

// Signature from Objective-C Runtime: @ subviews @ :
nsobject_t 			uiwindow_subviews( uiwindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} systemLayoutSizeFittingSize: @ : {CGSize=dd}
CGSize 				uiwindow_systemLayoutSizeFittingSize( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: v updateConstraints @ :
void 				uiwindow_updateConstraints( uiwindow_t object );

// Signature from Objective-C Runtime: v sendSubviewToBack: @ : @
void 				uiwindow_sendSubviewToBack( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B pointInside:withEvent: @ : {CGPoint=dd} @
bool 				uiwindow_pointInside( uiwindow_t object, CGPoint arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v invalidateIntrinsicContentSize @ :
void 				uiwindow_invalidateIntrinsicContentSize( uiwindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} visibleBounds @ :
CGRect 				uiwindow_visibleBounds( uiwindow_t object );

// Signature from Objective-C Runtime: B isDescendantOfView: @ : @
bool 				uiwindow_isDescendantOfView( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v tintColorDidChange @ :
void 				uiwindow_tintColorDidChange( uiwindow_t object );

// Signature from Objective-C Runtime: @ viewForFirstBaselineLayout @ :
nsobject_t 			uiwindow_viewForFirstBaselineLayout( uiwindow_t object );

// Signature from Objective-C Runtime: @ viewForLastBaselineLayout @ :
nsobject_t 			uiwindow_viewForLastBaselineLayout( uiwindow_t object );

// Signature from Objective-C Runtime: v setFocusEffect: @ : @
void 				uiwindow_setFocusEffect( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v layoutMarginsDidChange @ :
void 				uiwindow_layoutMarginsDidChange( uiwindow_t object );

// Signature from Objective-C Runtime: v removeInteraction: @ : @
void 				uiwindow_removeInteraction( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B preservesSuperviewLayoutMargins @ :
bool 				uiwindow_preservesSuperviewLayoutMargins( uiwindow_t object );

// Signature from Objective-C Runtime: v setPreservesSuperviewLayoutMargins: @ : B
void 				uiwindow_setPreservesSuperviewLayoutMargins( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v layoutBelowIfNeeded @ :
void 				uiwindow_layoutBelowIfNeeded( uiwindow_t object );

// Signature from Objective-C Runtime: v insertSubview:atIndex: @ : @ q
void 				uiwindow_insertSubview( uiwindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: @ layoutMarginsGuide @ :
nsobject_t 			uiwindow_layoutMarginsGuide( uiwindow_t object );

// Signature from Objective-C Runtime: @ lastBaselineAnchor @ :
nsobject_t 			uiwindow_lastBaselineAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: v setEdgesInsettingLayoutMarginsFromSafeArea: @ : Q
void 				uiwindow_setEdgesInsettingLayoutMarginsFromSafeArea( uiwindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v layoutSublayersOfLayer: @ : @
void 				uiwindow_layoutSublayersOfLayer( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setDirectionalLayoutMargins: @ : {NSDirectionalEdgeInsets=dddd}
void 				uiwindow_setDirectionalLayoutMargins( uiwindow_t object, NSDirectionalEdgeInsets arg0 );

// Signature from Objective-C Runtime: v addConstraint: @ : @
void 				uiwindow_addConstraint( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAllowsGroupOpacity: @ : B
void 				uiwindow_setAllowsGroupOpacity( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B translatesAutoresizingMaskIntoConstraints @ :
bool 				uiwindow_translatesAutoresizingMaskIntoConstraints( uiwindow_t object );

// Signature from Objective-C Runtime: Q autoresizingMask @ :
unsigned long long 	uiwindow_autoresizingMask( uiwindow_t object );

// Signature from Objective-C Runtime: B containsView: @ : @
bool 				uiwindow_containsView( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ keyboardSceneDelegate @ :
nsobject_t 			uiwindow_keyboardSceneDelegate( uiwindow_t object );

// Signature from Objective-C Runtime: @ hitTest:withEvent: @ : {CGPoint=dd} @
nsobject_t 			uiwindow_hitTest( uiwindow_t object, CGPoint arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ leftAnchor @ :
nsobject_t 			uiwindow_leftAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: @ safeAreaLayoutGuide @ :
nsobject_t 			uiwindow_safeAreaLayoutGuide( uiwindow_t object );

// Signature from Objective-C Runtime: v setExclusiveTouch: @ : B
void 				uiwindow_setExclusiveTouch( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v removeConstraint: @ : @
void 				uiwindow_removeConstraint( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ firstBaselineAnchor @ :
nsobject_t 			uiwindow_firstBaselineAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: v removeConstraints: @ : @
void 				uiwindow_removeConstraints( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B allowsGroupOpacity @ :
bool 				uiwindow_allowsGroupOpacity( uiwindow_t object );

// Signature from Objective-C Runtime: v safeAreaInsetsDidChange @ :
void 				uiwindow_safeAreaInsetsDidChange( uiwindow_t object );

// Signature from Objective-C Runtime: v didMoveToSuperview @ :
void 				uiwindow_didMoveToSuperview( uiwindow_t object );

// Signature from Objective-C Runtime: v didMoveToWindow @ :
void 				uiwindow_didMoveToWindow( uiwindow_t object );

// Signature from Objective-C Runtime: B isUserInteractionEnabled @ :
bool 				uiwindow_isUserInteractionEnabled( uiwindow_t object );

// Signature from Objective-C Runtime: v addAnimation:forKey: @ : @ @
void 				uiwindow_addAnimation( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setContentScaleFactor: @ : d
void 				uiwindow_setContentScaleFactor( uiwindow_t object, double arg0 );

// Signature from Objective-C Runtime: v drawLayer:inContext: @ : @ ^{CGContext=}
void 				uiwindow_drawLayer( uiwindow_t object, nsobject_t arg0, CGContext* arg1 );

// Signature from Objective-C Runtime: v layerWillDraw: @ : @
void 				uiwindow_layerWillDraw( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ actionForLayer:forKey: @ : @ @
nsobject_t 			uiwindow_actionForLayer( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setAllowsGroupBlending: @ : B
void 				uiwindow_setAllowsGroupBlending( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setNeedsDisplay @ :
void 				uiwindow_setNeedsDisplay( uiwindow_t object );

// Signature from Objective-C Runtime: v exchangeSubviewAtIndex:withSubviewAtIndex: @ : q q
void 				uiwindow_exchangeSubviewAtIndex( uiwindow_t object, long long arg0, long long arg1 );

// Signature from Objective-C Runtime: v bringSubviewToFront: @ : @
void 				uiwindow_bringSubviewToFront( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ textInputView @ :
nsobject_t 			uiwindow_textInputView( uiwindow_t object );

// Signature from Objective-C Runtime: {NSDirectionalEdgeInsets=dddd} directionalLayoutMargins @ :
NSDirectionalEdgeInsets uiwindow_directionalLayoutMargins( uiwindow_t object );

// Signature from Objective-C Runtime: v setEdgesPreservingSuperviewLayoutMargins: @ : Q
void 				uiwindow_setEdgesPreservingSuperviewLayoutMargins( uiwindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} alignmentRectForFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				uiwindow_alignmentRectForFrame( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v drawRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_drawRect( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: B allowsGroupBlending @ :
bool 				uiwindow_allowsGroupBlending( uiwindow_t object );

// Signature from Objective-C Runtime: v didAddSubview: @ : @
void 				uiwindow_didAddSubview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willRemoveSubview: @ : @
void 				uiwindow_willRemoveSubview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B drawViewHierarchyInRect:afterScreenUpdates: @ : {CGRect={CGPoint=dd}{CGSize=dd}} B
bool 				uiwindow_drawViewHierarchyInRect( uiwindow_t object, CGRect arg0, bool arg1 );

// Signature from Objective-C Runtime: B clipsToBounds @ :
bool 				uiwindow_clipsToBounds( uiwindow_t object );

// Signature from Objective-C Runtime: @ minimumContentSizeCategory @ :
nsobject_t 			uiwindow_minimumContentSizeCategory( uiwindow_t object );

// Signature from Objective-C Runtime: v setMinimumContentSizeCategory: @ : @
void 				uiwindow_setMinimumContentSizeCategory( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ maximumContentSizeCategory @ :
nsobject_t 			uiwindow_maximumContentSizeCategory( uiwindow_t object );

// Signature from Objective-C Runtime: v setMaximumContentSizeCategory: @ : @
void 				uiwindow_setMaximumContentSizeCategory( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ appliedContentSizeCategoryLimitsDescription @ :
nsobject_t 			uiwindow_appliedContentSizeCategoryLimitsDescription( uiwindow_t object );

// Signature from Objective-C Runtime: {UIEdgeInsets=dddd} hitTestInsets @ :
UIEdgeInsets 		uiwindow_hitTestInsets( uiwindow_t object );

// Signature from Objective-C Runtime: v setHitTestInsets: @ : {UIEdgeInsets=dddd}
void 				uiwindow_setHitTestInsets( uiwindow_t object, UIEdgeInsets arg0 );

// Signature from Objective-C Runtime: {NSDirectionalEdgeInsets=dddd} hitTestDirectionalInsets @ :
NSDirectionalEdgeInsets uiwindow_hitTestDirectionalInsets( uiwindow_t object );

// Signature from Objective-C Runtime: v setHitTestDirectionalInsets: @ : {NSDirectionalEdgeInsets=dddd}
void 				uiwindow_setHitTestDirectionalInsets( uiwindow_t object, NSDirectionalEdgeInsets arg0 );

// Signature from Objective-C Runtime: v removeLayoutGuide: @ : @
void 				uiwindow_removeLayoutGuide( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willMoveToSuperview: @ : @
void 				uiwindow_willMoveToSuperview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willMoveToWindow: @ : @
void 				uiwindow_willMoveToWindow( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setCompositingMode: @ : q
void 				uiwindow_setCompositingMode( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: q effectiveUserInterfaceLayoutDirection @ :
long long 			uiwindow_effectiveUserInterfaceLayoutDirection( uiwindow_t object );

// Signature from Objective-C Runtime: v setAutoresizesSubviews: @ : B
void 				uiwindow_setAutoresizesSubviews( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: f contentCompressionResistancePriorityForAxis: @ : q
float 				uiwindow_contentCompressionResistancePriorityForAxis( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} frameForAlignmentRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				uiwindow_frameForAlignmentRect( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setTag: @ : q
void 				uiwindow_setTag( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: q semanticContentAttribute @ :
long long 			uiwindow_semanticContentAttribute( uiwindow_t object );

// Signature from Objective-C Runtime: v setCharge: @ : f
void 				uiwindow_setCharge( uiwindow_t object, float arg0 );

// Signature from Objective-C Runtime: v setInsetsLayoutMarginsFromSafeArea: @ : B
void 				uiwindow_setInsetsLayoutMarginsFromSafeArea( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: @ snapshotViewAfterScreenUpdates: @ : B
nsobject_t 			uiwindow_snapshotViewAfterScreenUpdates( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: f contentHuggingPriorityForAxis: @ : q
float 				uiwindow_contentHuggingPriorityForAxis( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: B insetsLayoutMarginsFromSafeArea @ :
bool 				uiwindow_insetsLayoutMarginsFromSafeArea( uiwindow_t object );

// Signature from Objective-C Runtime: v setFocusGroupIdentifier: @ : @
void 				uiwindow_setFocusGroupIdentifier( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setLargeContentTitle: @ : @
void 				uiwindow_setLargeContentTitle( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setShowsLargeContentViewer: @ : B
void 				uiwindow_setShowsLargeContentViewer( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: @ recursiveDescription @ :
nsobject_t 			uiwindow_recursiveDescription( uiwindow_t object );

// Signature from Objective-C Runtime: v setMultipleTouchEnabled: @ : B
void 				uiwindow_setMultipleTouchEnabled( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v forceDisplayIfNeeded @ :
void 				uiwindow_forceDisplayIfNeeded( uiwindow_t object );

// Signature from Objective-C Runtime: {CATransform3D=dddddddddddddddd} transform3D @ :
CATransform3D 		uiwindow_transform3D( uiwindow_t object );

// Signature from Objective-C Runtime: v setTransform3D: @ : {CATransform3D=dddddddddddddddd}
void 				uiwindow_setTransform3D( uiwindow_t object, CATransform3D arg0 );

// Signature from Objective-C Runtime: @ readableContentGuide @ :
nsobject_t 			uiwindow_readableContentGuide( uiwindow_t object );

// Signature from Objective-C Runtime: v setSafeAreaInsets: @ : {UIEdgeInsets=dddd}
void 				uiwindow_setSafeAreaInsets( uiwindow_t object, UIEdgeInsets arg0 );

// Signature from Objective-C Runtime: Q edgesInsettingLayoutMarginsFromSafeArea @ :
unsigned long long 	uiwindow_edgesInsettingLayoutMarginsFromSafeArea( uiwindow_t object );

// Signature from Objective-C Runtime: B layoutMarginsFollowReadableWidth @ :
bool 				uiwindow_layoutMarginsFollowReadableWidth( uiwindow_t object );

// Signature from Objective-C Runtime: v setLayoutMarginsFollowReadableWidth: @ : B
void 				uiwindow_setLayoutMarginsFollowReadableWidth( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B needsUpdateConstraints @ :
bool 				uiwindow_needsUpdateConstraints( uiwindow_t object );

// Signature from Objective-C Runtime: @ viewWithTag: @ : q
nsobject_t 			uiwindow_viewWithTag( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: B endEditing: @ : B
bool 				uiwindow_endEditing( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setOrigin: @ : {CGPoint=dd}
void 				uiwindow_setOrigin( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setMaskView: @ : @
void 				uiwindow_setMaskView( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setDeliversTouchesForGesturesToSuperview: @ : B
void 				uiwindow_setDeliversTouchesForGesturesToSuperview( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B autoresizesSubviews @ :
bool 				uiwindow_autoresizesSubviews( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_superitem @ :
nsobject_t 			uiwindow_nsli_superitem( uiwindow_t object );

// Signature from Objective-C Runtime: q overrideUserInterfaceStyle @ :
long long 			uiwindow_overrideUserInterfaceStyle( uiwindow_t object );

// Signature from Objective-C Runtime: v setOverrideUserInterfaceStyle: @ : q
void 				uiwindow_setOverrideUserInterfaceStyle( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ layoutGuides @ :
nsobject_t 			uiwindow_layoutGuides( uiwindow_t object );

// Signature from Objective-C Runtime: @ resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets: @ : {CGRect={CGPoint=dd}{CGSize=dd}} B {UIEdgeInsets=dddd}
nsobject_t 			uiwindow_resizableSnapshotViewFromRect( uiwindow_t object, CGRect arg0, bool arg1, UIEdgeInsets arg2 );

// Signature from Objective-C Runtime: v updateUserActivityState: @ : @
void 				uiwindow_updateUserActivityState( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v restoreUserActivityState: @ : @
void 				uiwindow_restoreUserActivityState( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNeedsDisplayOnBoundsChange: @ : B
void 				uiwindow_setNeedsDisplayOnBoundsChange( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B needsDisplayOnBoundsChange @ :
bool 				uiwindow_needsDisplayOnBoundsChange( uiwindow_t object );

// Signature from Objective-C Runtime: @ snapshotView @ :
nsobject_t 			uiwindow_snapshotView( uiwindow_t object );

// Signature from Objective-C Runtime: B clearsContextBeforeDrawing @ :
bool 				uiwindow_clearsContextBeforeDrawing( uiwindow_t object );

// Signature from Objective-C Runtime: B cancelTouchTracking @ :
bool 				uiwindow_cancelTouchTracking( uiwindow_t object );

// Signature from Objective-C Runtime: B cancelMouseTracking @ :
bool 				uiwindow_cancelMouseTracking( uiwindow_t object );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} hitRect @ :
CGRect 				uiwindow_hitRect( uiwindow_t object );

// Signature from Objective-C Runtime: v setClipsSubviews: @ : B
void 				uiwindow_setClipsSubviews( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: B useBlockyMagnificationInClassic @ :
bool 				uiwindow_useBlockyMagnificationInClassic( uiwindow_t object );

// Signature from Objective-C Runtime: f charge @ :
float 				uiwindow_charge( uiwindow_t object );

// Signature from Objective-C Runtime: @ inputResponderController @ :
nsobject_t 			uiwindow_inputResponderController( uiwindow_t object );

// Signature from Objective-C Runtime: B showsLargeContentViewer @ :
bool 				uiwindow_showsLargeContentViewer( uiwindow_t object );

// Signature from Objective-C Runtime: v setLargeContentImage: @ : @
void 				uiwindow_setLargeContentImage( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setScalesLargeContentImage: @ : B
void 				uiwindow_setScalesLargeContentImage( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setLargeContentImageInsets: @ : {UIEdgeInsets=dddd}
void 				uiwindow_setLargeContentImageInsets( uiwindow_t object, UIEdgeInsets arg0 );

// Signature from Objective-C Runtime: {CGPoint=dd} frameOrigin @ :
CGPoint 			uiwindow_frameOrigin( uiwindow_t object );

// Signature from Objective-C Runtime: i textEffectsVisibilityLevel @ :
int 				uiwindow_textEffectsVisibilityLevel( uiwindow_t object );

// Signature from Objective-C Runtime: @ maskView @ :
nsobject_t 			uiwindow_maskView( uiwindow_t object );

// Signature from Objective-C Runtime: @ focusGuides @ :
nsobject_t 			uiwindow_focusGuides( uiwindow_t object );

// Signature from Objective-C Runtime: v reduceWidth: @ : d
void 				uiwindow_reduceWidth( uiwindow_t object, double arg0 );

// Signature from Objective-C Runtime: i textEffectsVisibilityLevelInKeyboardWindow @ :
int 				uiwindow_textEffectsVisibilityLevelInKeyboardWindow( uiwindow_t object );

// Signature from Objective-C Runtime: v recursivelyForceDisplayIfNeeded @ :
void 				uiwindow_recursivelyForceDisplayIfNeeded( uiwindow_t object );

// Signature from Objective-C Runtime: v constraintsDidChangeInEngine: @ : @
void 				uiwindow_constraintsDidChangeInEngine( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v resizeSubviewsWithOldSize: @ : {CGSize=dd}
void 				uiwindow_resizeSubviewsWithOldSize( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: @ viewPrintFormatter @ :
nsobject_t 			uiwindow_viewPrintFormatter( uiwindow_t object );

// Signature from Objective-C Runtime: B deliversButtonsForGesturesToSuperview @ :
bool 				uiwindow_deliversButtonsForGesturesToSuperview( uiwindow_t object );

// Signature from Objective-C Runtime: v setGestureRecognizers: @ : @
void 				uiwindow_setGestureRecognizers( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B deliversTouchesForGesturesToSuperview @ :
bool 				uiwindow_deliversTouchesForGesturesToSuperview( uiwindow_t object );

// Signature from Objective-C Runtime: B isMultipleTouchEnabled @ :
bool 				uiwindow_isMultipleTouchEnabled( uiwindow_t object );

// Signature from Objective-C Runtime: v movedToSuperview: @ : @
void 				uiwindow_movedToSuperview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v set_ui_frame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_set_ui_frame( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v set_ui_usesManualLayout: @ : B
void 				uiwindow_set_ui_usesManualLayout( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: q compareTextEffectsOrdering: @ : @
long long 			uiwindow_compareTextEffectsOrdering( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v interactionTintColorDidChange @ :
void 				uiwindow_interactionTintColorDidChange( uiwindow_t object );

// Signature from Objective-C Runtime: @ viewForBaselineLayout @ :
nsobject_t 			uiwindow_viewForBaselineLayout( uiwindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} nsli_engineToUserScalingCoefficients @ :
CGSize 				uiwindow_nsli_engineToUserScalingCoefficients( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_minYVariable @ :
nsobject_t 			uiwindow_nsli_minYVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_boundsHeightVariable @ :
nsobject_t 			uiwindow_nsli_boundsHeightVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_boundsWidthVariable @ :
nsobject_t 			uiwindow_nsli_boundsWidthVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_minXVariable @ :
nsobject_t 			uiwindow_nsli_minXVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_contentHeightVariable @ :
nsobject_t 			uiwindow_nsli_contentHeightVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_contentWidthVariable @ :
nsobject_t 			uiwindow_nsli_contentWidthVariable( uiwindow_t object );

// Signature from Objective-C Runtime: v nsli_addConstraint: @ : @
void 				uiwindow_nsli_addConstraint( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ nsli_layoutMarginsItem @ :
nsobject_t 			uiwindow_nsli_layoutMarginsItem( uiwindow_t object );

// Signature from Objective-C Runtime: B nsli_removeConstraint: @ : @
bool 				uiwindow_nsli_removeConstraint( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ constraintsAffectingLayoutForAxis: @ : q
nsobject_t 			uiwindow_constraintsAffectingLayoutForAxis( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ nsli_layoutEngine @ :
nsobject_t 			uiwindow_nsli_layoutEngine( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_installedConstraints @ :
nsobject_t 			uiwindow_nsli_installedConstraints( uiwindow_t object );

// Signature from Objective-C Runtime: d nsli_marginOffsetForAttribute: @ : q
double 				uiwindow_nsli_marginOffsetForAttribute( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ nsli_description @ :
nsobject_t 			uiwindow_nsli_description( uiwindow_t object );

// Signature from Objective-C Runtime: {CGSize=dd} nsli_engineToUserScalingCoefficientsInEngine: @ : @
CGSize 				uiwindow_nsli_engineToUserScalingCoefficientsInEngine( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide: @ : i @ d @ @
bool 				uiwindow_nsli_lowerAttribute( uiwindow_t object, int arg0, nsobject_t arg1, double arg2, nsobject_t arg3, nsobject_t arg4 );

// Signature from Objective-C Runtime: @ nsli_contentXOffsetVariable @ :
nsobject_t 			uiwindow_nsli_contentXOffsetVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_contentYOffsetVariable @ :
nsobject_t 			uiwindow_nsli_contentYOffsetVariable( uiwindow_t object );

// Signature from Objective-C Runtime: B nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error: @ : ^d @ @ ^@
bool 				uiwindow_nsli_defaultResolvedValue( uiwindow_t object, double* arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: v nsis_valueOfVariable:didChangeInEngine: @ : @ @
void 				uiwindow_nsis_valueOfVariable( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ nsis_descriptionOfVariable: @ : @
nsobject_t 			uiwindow_nsis_descriptionOfVariable( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: i nsis_orientationHintForVariable: @ : @
int 				uiwindow_nsis_orientationHintForVariable( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B nsis_shouldIntegralizeVariable: @ : @
bool 				uiwindow_nsis_shouldIntegralizeVariable( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B nsis_valueOfVariableIsUserObservable: @ : @
bool 				uiwindow_nsis_valueOfVariableIsUserObservable( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} nsli_convertSizeToEngineSpace: @ : {CGSize=dd}
CGSize 				uiwindow_nsli_convertSizeToEngineSpace( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: {CGSize=dd} nsli_convertSizeFromEngineSpace: @ : {CGSize=dd}
CGSize 				uiwindow_nsli_convertSizeFromEngineSpace( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: B nsli_resolvedValue:forSymbolicConstant:inConstraint:error: @ : ^d @ @ ^@
bool 				uiwindow_nsli_resolvedValue( uiwindow_t object, double* arg0, nsobject_t arg1, nsobject_t arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: B nsli_descriptionIncludesPointer @ :
bool 				uiwindow_nsli_descriptionIncludesPointer( uiwindow_t object );

// Signature from Objective-C Runtime: Q nsli_autoresizingMask @ :
unsigned long long 	uiwindow_nsli_autoresizingMask( uiwindow_t object );

// Signature from Objective-C Runtime: B nsli_isFlipped @ :
bool 				uiwindow_nsli_isFlipped( uiwindow_t object );

// Signature from Objective-C Runtime: B nsli_isCollectingConstraintChangesForLaterCoordinatedFlush: @ : @
bool 				uiwindow_nsli_isCollectingConstraintChangesForLaterCoordinatedFlush( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B nsli_canHostIndependentVariableAnchor @ :
bool 				uiwindow_nsli_canHostIndependentVariableAnchor( uiwindow_t object );

// Signature from Objective-C Runtime: B nsli_isLegalConstraintItem @ :
bool 				uiwindow_nsli_isLegalConstraintItem( uiwindow_t object );

// Signature from Objective-C Runtime: B nsli_isRTL @ :
bool 				uiwindow_nsli_isRTL( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_layoutAnchorForAttribute: @ : q
nsobject_t 			uiwindow_nsli_layoutAnchorForAttribute( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: @ nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy: @ : @ q @ d
nsobject_t 			uiwindow_nsli_constraintWithAnchor( uiwindow_t object, nsobject_t arg0, long long arg1, nsobject_t arg2, double arg3 );

// Signature from Objective-C Runtime: @ nsli_widthVariable @ :
nsobject_t 			uiwindow_nsli_widthVariable( uiwindow_t object );

// Signature from Objective-C Runtime: @ nsli_heightVariable @ :
nsobject_t 			uiwindow_nsli_heightVariable( uiwindow_t object );

// Signature from Objective-C Runtime: v solutionDidChangeInEngine: @ : @
void 				uiwindow_solutionDidChangeInEngine( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ engine:markerForConstraintToBreakAmongConstraints: @ : @ @
nsobject_t 			uiwindow_engine( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v stopSettingPresentationValueForKey: @ : @
void 				uiwindow_stopSettingPresentationValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setContentsPosition: @ : i
void 				uiwindow_setContentsPosition( uiwindow_t object, int arg0 );

// Signature from Objective-C Runtime: v setContentStretch: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_setContentStretch( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: B wantsDeepColorDrawing @ :
bool 				uiwindow_wantsDeepColorDrawing( uiwindow_t object );

// Signature from Objective-C Runtime: v setWantsDeepColorDrawing: @ : B
void 				uiwindow_setWantsDeepColorDrawing( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setClearsContextBeforeDrawing: @ : B
void 				uiwindow_setClearsContextBeforeDrawing( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v removeAllGestureRecognizers @ :
void 				uiwindow_removeAllGestureRecognizers( uiwindow_t object );

// Signature from Objective-C Runtime: Q edgesPreservingSuperviewLayoutMargins @ :
unsigned long long 	uiwindow_edgesPreservingSuperviewLayoutMargins( uiwindow_t object );

// Signature from Objective-C Runtime: v setInteractionTintColor: @ : @
void 				uiwindow_setInteractionTintColor( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ interactionTintColor @ :
nsobject_t 			uiwindow_interactionTintColor( uiwindow_t object );

// Signature from Objective-C Runtime: q compositingMode @ :
long long 			uiwindow_compositingMode( uiwindow_t object );

// Signature from Objective-C Runtime: @ keyboardLayoutGuide @ :
nsobject_t 			uiwindow_keyboardLayoutGuide( uiwindow_t object );

// Signature from Objective-C Runtime: @ resizableSnapshotFromRect:withCapInsets: @ : {CGRect={CGPoint=dd}{CGSize=dd}} {UIEdgeInsets=dddd}
nsobject_t 			uiwindow_resizableSnapshotFromRect( uiwindow_t object, CGRect arg0, UIEdgeInsets arg1 );

// Signature from Objective-C Runtime: v setFocusGroupPriority: @ : q
void 				uiwindow_setFocusGroupPriority( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v resizeWithOldSuperviewSize: @ : {CGSize=dd}
void 				uiwindow_resizeWithOldSuperviewSize( uiwindow_t object, CGSize arg0 );

// Signature from Objective-C Runtime: B isExclusiveTouch @ :
bool 				uiwindow_isExclusiveTouch( uiwindow_t object );

// Signature from Objective-C Runtime: v setRotationBy: @ : f
void 				uiwindow_setRotationBy( uiwindow_t object, float arg0 );

// Signature from Objective-C Runtime: B viewTraversalMark @ :
bool 				uiwindow_viewTraversalMark( uiwindow_t object );

// Signature from Objective-C Runtime: v setViewTraversalMark: @ : B
void 				uiwindow_setViewTraversalMark( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v deferredBecomeFirstResponder @ :
void 				uiwindow_deferredBecomeFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: v movedFromSuperview: @ : @
void 				uiwindow_movedFromSuperview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v viewWillMoveToSuperview: @ : @
void 				uiwindow_viewWillMoveToSuperview( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v viewDidMoveToSuperview @ :
void 				uiwindow_viewDidMoveToSuperview( uiwindow_t object );

// Signature from Objective-C Runtime: v movedFromWindow: @ : @
void 				uiwindow_movedFromWindow( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v movedToWindow: @ : @
void 				uiwindow_movedToWindow( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setClearsContext: @ : B
void 				uiwindow_setClearsContext( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} contentStretch @ :
CGRect 				uiwindow_contentStretch( uiwindow_t object );

// Signature from Objective-C Runtime: v setFixedBackgroundPattern: @ : B
void 				uiwindow_setFixedBackgroundPattern( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: ^{CGImage=} newSnapshotWithRect: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGImage* 			uiwindow_newSnapshotWithRect( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: B skipsSubviewEnumeration @ :
bool 				uiwindow_skipsSubviewEnumeration( uiwindow_t object );

// Signature from Objective-C Runtime: v setSkipsSubviewEnumeration: @ : B
void 				uiwindow_setSkipsSubviewEnumeration( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setDeliversButtonsForGesturesToSuperview: @ : B
void 				uiwindow_setDeliversButtonsForGesturesToSuperview( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: @ scriptingInfoWithChildren @ :
nsobject_t 			uiwindow_scriptingInfoWithChildren( uiwindow_t object );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				uiwindow_doesNotRecognizeSelector( uiwindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: q selectionAffinity @ :
long long 			uiwindow_selectionAffinity( uiwindow_t object );

// Signature from Objective-C Runtime: B isFirstResponder @ :
bool 				uiwindow_isFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: v touchesBegan:withEvent: @ : @ @
void 				uiwindow_touchesBegan( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v touchesMoved:withEvent: @ : @ @
void 				uiwindow_touchesMoved( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v touchesEnded:withEvent: @ : @ @
void 				uiwindow_touchesEnded( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v touchesCancelled:withEvent: @ : @ @
void 				uiwindow_touchesCancelled( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesBegan:withEvent: @ : @ @
void 				uiwindow_pressesBegan( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesChanged:withEvent: @ : @ @
void 				uiwindow_pressesChanged( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesEnded:withEvent: @ : @ @
void 				uiwindow_pressesEnded( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v pressesCancelled:withEvent: @ : @ @
void 				uiwindow_pressesCancelled( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B resignFirstResponder @ :
bool 				uiwindow_resignFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: B canBecomeFirstResponder @ :
bool 				uiwindow_canBecomeFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: @ keyCommands @ :
nsobject_t 			uiwindow_keyCommands( uiwindow_t object );

// Signature from Objective-C Runtime: @ inputAccessoryView @ :
nsobject_t 			uiwindow_inputAccessoryView( uiwindow_t object );

// Signature from Objective-C Runtime: @ inputView @ :
nsobject_t 			uiwindow_inputView( uiwindow_t object );

// Signature from Objective-C Runtime: @ inputViewController @ :
nsobject_t 			uiwindow_inputViewController( uiwindow_t object );

// Signature from Objective-C Runtime: q editingInteractionConfiguration @ :
long long 			uiwindow_editingInteractionConfiguration( uiwindow_t object );

// Signature from Objective-C Runtime: v validateCommand: @ : @
void 				uiwindow_validateCommand( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ inputAssistantItem @ :
nsobject_t 			uiwindow_inputAssistantItem( uiwindow_t object );

// Signature from Objective-C Runtime: v reloadInputViews @ :
void 				uiwindow_reloadInputViews( uiwindow_t object );

// Signature from Objective-C Runtime: B canResignFirstResponder @ :
bool 				uiwindow_canResignFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: B isEditing @ :
bool 				uiwindow_isEditing( uiwindow_t object );

// Signature from Objective-C Runtime: @ userActivity @ :
nsobject_t 			uiwindow_userActivity( uiwindow_t object );

// Signature from Objective-C Runtime: v encodeRestorableStateWithCoder: @ : @
void 				uiwindow_encodeRestorableStateWithCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v decodeRestorableStateWithCoder: @ : @
void 				uiwindow_decodeRestorableStateWithCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ targetForAction:withSender: @ : : @
nsobject_t 			uiwindow_targetForAction( uiwindow_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setUserActivity: @ : @
void 				uiwindow_setUserActivity( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v touchesEstimatedPropertiesUpdated: @ : @
void 				uiwindow_touchesEstimatedPropertiesUpdated( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B isEditable @ :
bool 				uiwindow_isEditable( uiwindow_t object );

// Signature from Objective-C Runtime: @ pasteConfiguration @ :
nsobject_t 			uiwindow_pasteConfiguration( uiwindow_t object );

// Signature from Objective-C Runtime: v beginSelectionChange @ :
void 				uiwindow_beginSelectionChange( uiwindow_t object );

// Signature from Objective-C Runtime: v endSelectionChange @ :
void 				uiwindow_endSelectionChange( uiwindow_t object );

// Signature from Objective-C Runtime: @ activityItemsConfiguration @ :
nsobject_t 			uiwindow_activityItemsConfiguration( uiwindow_t object );

// Signature from Objective-C Runtime: v setActivityItemsConfiguration: @ : @
void 				uiwindow_setActivityItemsConfiguration( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ inputAccessoryViewController @ :
nsobject_t 			uiwindow_inputAccessoryViewController( uiwindow_t object );

// Signature from Objective-C Runtime: @ interactionAssistant @ :
nsobject_t 			uiwindow_interactionAssistant( uiwindow_t object );

// Signature from Objective-C Runtime: @ textInputSuggestionDelegate @ :
nsobject_t 			uiwindow_textInputSuggestionDelegate( uiwindow_t object );

// Signature from Objective-C Runtime: v set_textInputSource: @ : q
void 				uiwindow_set_textInputSource( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v captureTextFromCamera: @ : @
void 				uiwindow_captureTextFromCamera( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ textInputContextIdentifier @ :
nsobject_t 			uiwindow_textInputContextIdentifier( uiwindow_t object );

// Signature from Objective-C Runtime: @ textInputMode @ :
nsobject_t 			uiwindow_textInputMode( uiwindow_t object );

// Signature from Objective-C Runtime: @ recentsAccessoryView @ :
nsobject_t 			uiwindow_recentsAccessoryView( uiwindow_t object );

// Signature from Objective-C Runtime: v remoteControlReceivedWithEvent: @ : @
void 				uiwindow_remoteControlReceivedWithEvent( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v motionBegan:withEvent: @ : q @
void 				uiwindow_motionBegan( uiwindow_t object, long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v motionEnded:withEvent: @ : q @
void 				uiwindow_motionEnded( uiwindow_t object, long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v motionCancelled:withEvent: @ : q @
void 				uiwindow_motionCancelled( uiwindow_t object, long long arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v buildMenuWithBuilder: @ : @
void 				uiwindow_buildMenuWithBuilder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ nextFirstResponder @ :
nsobject_t 			uiwindow_nextFirstResponder( uiwindow_t object );

// Signature from Objective-C Runtime: v pasteItemProviders: @ : @
void 				uiwindow_pasteItemProviders( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v updateTextAttributesWithConversionHandler: @ : @?
void 				uiwindow_updateTextAttributesWithConversionHandler( uiwindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: v scrollWheel: @ : ^{__GSEvent=}
void 				uiwindow_scrollWheel( uiwindow_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v gestureStarted: @ : ^{__GSEvent=}
void 				uiwindow_gestureStarted( uiwindow_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v gestureEnded: @ : ^{__GSEvent=}
void 				uiwindow_gestureEnded( uiwindow_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v gestureChanged: @ : ^{__GSEvent=}
void 				uiwindow_gestureChanged( uiwindow_t object, __GSEvent* arg0 );

// Signature from Objective-C Runtime: v setPasteConfiguration: @ : @
void 				uiwindow_setPasteConfiguration( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B canPasteItemProviders: @ : @
bool 				uiwindow_canPasteItemProviders( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B shouldReloadInputViews @ :
bool 				uiwindow_shouldReloadInputViews( uiwindow_t object );

// Signature from Objective-C Runtime: v reloadInputViewsWithoutReset @ :
void 				uiwindow_reloadInputViewsWithoutReset( uiwindow_t object );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			uiwindow_classForCoder( uiwindow_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			uiwindow_replacementObjectForCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			uiwindow_awakeAfterUsingCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B implementsSelector: @ : :
bool 				uiwindow_implementsSelector( uiwindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				uiwindow_setObservationInfo( uiwindow_t object, void* arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			uiwindow_replacementObjectForPortCoder( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				uiwindow_willChangeValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				uiwindow_didChangeValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			uiwindow_replacementObjectForArchiver( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			uiwindow_classForArchiver( uiwindow_t object );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			uiwindow_valueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			uiwindow_classForKeyedArchiver( uiwindow_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			uiwindow_replacementObjectForKeyedArchiver( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* uiwindow_methodDescriptionForSelector( uiwindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			uiwindow_valueForKeyPath( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			uiwindow_mutableArrayValueForKeyPath( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			uiwindow_mutableOrderedSetValueForKeyPath( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			uiwindow_mutableSetValueForKeyPath( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserver:forObservableKeyPath: @ : @ @
nsobject_t 			uiwindow_addObserver( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				uiwindow_removeObservation( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				uiwindow_receiveObservedValue( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				uiwindow_receiveObservedError( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				uiwindow_finishObserving( uiwindow_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				uiwindow_setObservation( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				uiwindow_observeValueForKeyPath( uiwindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				uiwindow_removeObserver( uiwindow_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			uiwindow_addChainedObservers( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			uiwindow_addObserverBlock( uiwindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			uiwindow_addObservationTransformer( uiwindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			uiwindow_valueForUndefinedKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				uiwindow_setNilValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			uiwindow_mutableArrayValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			uiwindow_mutableOrderedSetValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			uiwindow_mutableSetValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			uiwindow_dictionaryWithValuesForKeys( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				uiwindow_setValuesForKeysWithDictionary( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uiwindow_willChange( uiwindow_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uiwindow_didChange( uiwindow_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				uiwindow_observationInfo( uiwindow_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			uiwindow_autoContentAccessingProxy( uiwindow_t object );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			uiwindow_classForPortCoder( uiwindow_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				uiwindow_performSelector( uiwindow_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ B @
void 				uiwindow_performSelectorOnMainThread( uiwindow_t object, nsselector_t arg0, nsobject_t arg1, bool arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				uiwindow_performSelectorInBackground( uiwindow_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B isNSDate__ @ :
bool 				uiwindow_isNSDate__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSString__ @ :
bool 				uiwindow_isNSString__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSCFConstantString__ @ :
bool 				uiwindow_isNSCFConstantString__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSNumber__ @ :
bool 				uiwindow_isNSNumber__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSArray__ @ :
bool 				uiwindow_isNSArray__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSDictionary__ @ :
bool 				uiwindow_isNSDictionary__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSData__ @ :
bool 				uiwindow_isNSData__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSObject__ @ :
bool 				uiwindow_isNSObject__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSOrderedSet__ @ :
bool 				uiwindow_isNSOrderedSet__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSSet__ @ :
bool 				uiwindow_isNSSet__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSTimeZone__ @ :
bool 				uiwindow_isNSTimeZone__( uiwindow_t object );

// Signature from Objective-C Runtime: B isNSValue__ @ :
bool 				uiwindow_isNSValue__( uiwindow_t object );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			uiwindow_methodSignatureForSelector( uiwindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			uiwindow_className( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityLabel @ :
nsobject_t 			uiwindow_accessibilityLabel( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityLabel: @ : @
void 				uiwindow_setAccessibilityLabel( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityIdentifier: @ : @
void 				uiwindow_setAccessibilityIdentifier( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrame @ :
CGRect 				uiwindow_accessibilityFrame( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityViewIsModal @ :
nsobject_t 			uiwindow_storedAccessibilityViewIsModal( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityElementsHidden @ :
nsobject_t 			uiwindow_storedAccessibilityElementsHidden( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedShouldGroupAccessibilityChildren @ :
nsobject_t 			uiwindow_storedShouldGroupAccessibilityChildren( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityNavigationStyle @ :
nsobject_t 			uiwindow_storedAccessibilityNavigationStyle( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityRespondsToUserInteraction @ :
nsobject_t 			uiwindow_storedAccessibilityRespondsToUserInteraction( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedLabel @ :
nsobject_t 			uiwindow_accessibilityAttributedLabel( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityValue @ :
nsobject_t 			uiwindow_accessibilityValue( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedValue @ :
nsobject_t 			uiwindow_accessibilityAttributedValue( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityHint @ :
nsobject_t 			uiwindow_accessibilityHint( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedHint @ :
nsobject_t 			uiwindow_accessibilityAttributedHint( uiwindow_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityActivationPoint @ :
CGPoint 			uiwindow_accessibilityActivationPoint( uiwindow_t object );

// Signature from Objective-C Runtime: Q accessibilityTraits @ :
unsigned long long 	uiwindow_accessibilityTraits( uiwindow_t object );

// Signature from Objective-C Runtime: B isAccessibilityElement @ :
bool 				uiwindow_isAccessibilityElement( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityContainer @ :
nsobject_t 			uiwindow_accessibilityContainer( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityLanguage @ :
nsobject_t 			uiwindow_accessibilityLanguage( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityPath @ :
nsobject_t 			uiwindow_accessibilityPath( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityViewIsModal @ :
bool 				uiwindow_accessibilityViewIsModal( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityElementsHidden @ :
bool 				uiwindow_accessibilityElementsHidden( uiwindow_t object );

// Signature from Objective-C Runtime: B shouldGroupAccessibilityChildren @ :
bool 				uiwindow_shouldGroupAccessibilityChildren( uiwindow_t object );

// Signature from Objective-C Runtime: q accessibilityNavigationStyle @ :
long long 			uiwindow_accessibilityNavigationStyle( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityRespondsToUserInteraction @ :
bool 				uiwindow_accessibilityRespondsToUserInteraction( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityUserInputLabels @ :
nsobject_t 			uiwindow_accessibilityUserInputLabels( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedUserInputLabels @ :
nsobject_t 			uiwindow_accessibilityAttributedUserInputLabels( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityIdentifier @ :
nsobject_t 			uiwindow_storedAccessibilityIdentifier( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityTraits @ :
nsobject_t 			uiwindow_storedAccessibilityTraits( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedIsAccessibilityElement @ :
nsobject_t 			uiwindow_storedIsAccessibilityElement( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityFrame @ :
nsobject_t 			uiwindow_storedAccessibilityFrame( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityActivationPoint @ :
nsobject_t 			uiwindow_storedAccessibilityActivationPoint( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityHeaderElements @ :
nsobject_t 			uiwindow_accessibilityHeaderElements( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityElementsHidden: @ : B
void 				uiwindow_setAccessibilityElementsHidden( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityViewIsModal: @ : B
void 				uiwindow_setAccessibilityViewIsModal( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedLabel: @ : @
void 				uiwindow_setAccessibilityAttributedLabel( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityValue: @ : @
void 				uiwindow_setAccessibilityValue( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedValue: @ : @
void 				uiwindow_setAccessibilityAttributedValue( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHint: @ : @
void 				uiwindow_setAccessibilityHint( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedHint: @ : @
void 				uiwindow_setAccessibilityAttributedHint( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uiwindow_setAccessibilityFrame( uiwindow_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setAccessibilityPath: @ : @
void 				uiwindow_setAccessibilityPath( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityActivationPoint: @ : {CGPoint=dd}
void 				uiwindow_setAccessibilityActivationPoint( uiwindow_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setAccessibilityTraits: @ : Q
void 				uiwindow_setAccessibilityTraits( uiwindow_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setIsAccessibilityElement: @ : B
void 				uiwindow_setIsAccessibilityElement( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityContainer: @ : @
void 				uiwindow_setAccessibilityContainer( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityLanguage: @ : @
void 				uiwindow_setAccessibilityLanguage( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setShouldGroupAccessibilityChildren: @ : B
void 				uiwindow_setShouldGroupAccessibilityChildren( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityNavigationStyle: @ : q
void 				uiwindow_setAccessibilityNavigationStyle( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRespondsToUserInteraction: @ : B
void 				uiwindow_setAccessibilityRespondsToUserInteraction( uiwindow_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityUserInputLabels: @ : @
void 				uiwindow_setAccessibilityUserInputLabels( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedUserInputLabels: @ : @
void 				uiwindow_setAccessibilityAttributedUserInputLabels( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTextualContext @ :
nsobject_t 			uiwindow_accessibilityTextualContext( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityTextualContext: @ : @
void 				uiwindow_setAccessibilityTextualContext( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHeaderElements: @ : @
void 				uiwindow_setAccessibilityHeaderElements( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityElementDidBecomeFocused @ :
void 				uiwindow_accessibilityElementDidBecomeFocused( uiwindow_t object );

// Signature from Objective-C Runtime: v accessibilityElementDidLoseFocus @ :
void 				uiwindow_accessibilityElementDidLoseFocus( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityElementIsFocused @ :
bool 				uiwindow_accessibilityElementIsFocused( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityAssistiveTechnologyFocusedIdentifiers @ :
nsobject_t 			uiwindow_accessibilityAssistiveTechnologyFocusedIdentifiers( uiwindow_t object );

// Signature from Objective-C Runtime: v accessibilityIncrement @ :
void 				uiwindow_accessibilityIncrement( uiwindow_t object );

// Signature from Objective-C Runtime: v accessibilityDecrement @ :
void 				uiwindow_accessibilityDecrement( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityScroll: @ : q
bool 				uiwindow_accessibilityScroll( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: B accessibilityPerformEscape @ :
bool 				uiwindow_accessibilityPerformEscape( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityPerformMagicTap @ :
bool 				uiwindow_accessibilityPerformMagicTap( uiwindow_t object );

// Signature from Objective-C Runtime: B accessibilityActivate @ :
bool 				uiwindow_accessibilityActivate( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityCustomActions: @ : @
void 				uiwindow_setAccessibilityCustomActions( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomActions @ :
nsobject_t 			uiwindow_accessibilityCustomActions( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityIdentification @ :
nsobject_t 			uiwindow_accessibilityIdentification( uiwindow_t object );

// Signature from Objective-C Runtime: v accessibilitySetIdentification: @ : @
void 				uiwindow_accessibilitySetIdentification( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityIdentifier @ :
nsobject_t 			uiwindow_accessibilityIdentifier( uiwindow_t object );

// Signature from Objective-C Runtime: Q defaultAccessibilityTraits @ :
unsigned long long 	uiwindow_defaultAccessibilityTraits( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityLocalizedStringKey @ :
nsobject_t 			uiwindow_accessibilityLocalizedStringKey( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDragSourceDescriptors: @ : @
void 				uiwindow_setAccessibilityDragSourceDescriptors( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDragSourceDescriptors @ :
nsobject_t 			uiwindow_accessibilityDragSourceDescriptors( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityDropPointDescriptors: @ : @
void 				uiwindow_setAccessibilityDropPointDescriptors( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDropPointDescriptors @ :
nsobject_t 			uiwindow_accessibilityDropPointDescriptors( uiwindow_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityContainerType @ :
nsobject_t 			uiwindow_storedAccessibilityContainerType( uiwindow_t object );

// Signature from Objective-C Runtime: q accessibilityElementCount @ :
long long 			uiwindow_accessibilityElementCount( uiwindow_t object );

// Signature from Objective-C Runtime: @ accessibilityElementAtIndex: @ : q
nsobject_t 			uiwindow_accessibilityElementAtIndex( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: q indexOfAccessibilityElement: @ : @
long long 			uiwindow_indexOfAccessibilityElement( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityElements @ :
nsobject_t 			uiwindow_accessibilityElements( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityElements: @ : @
void 				uiwindow_setAccessibilityElements( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityContainerType @ :
long long 			uiwindow_accessibilityContainerType( uiwindow_t object );

// Signature from Objective-C Runtime: v setAccessibilityContainerType: @ : q
void 				uiwindow_setAccessibilityContainerType( uiwindow_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityCustomRotors: @ : @
void 				uiwindow_setAccessibilityCustomRotors( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomRotors @ :
nsobject_t 			uiwindow_accessibilityCustomRotors( uiwindow_t object );

// Signature from Objective-C Runtime: @ uiPresentationManager @ :
nsobject_t 			uiwindow_uiPresentationManager( uiwindow_t object );

// Signature from Objective-C Runtime: B conformsToProtocolCached: @ : @
bool 				uiwindow_conformsToProtocolCached( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				uiwindow_prepareForInterfaceBuilder( uiwindow_t object );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				uiwindow_CA_distanceToValue( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValueWithColorspace: @ : ^{CGColorSpace=}
Object* 			uiwindow_CA_copyRenderValueWithColorspace( uiwindow_t object, CGColorSpace* arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValue @ :
Object* 			uiwindow_CA_copyRenderValue( uiwindow_t object );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			uiwindow_CA_interpolateValue( uiwindow_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			uiwindow_CA_addValue( uiwindow_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: B CAMLTypeSupportedForKey: @ : @
bool 				uiwindow_CAMLTypeSupportedForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			uiwindow_CAMLTypeForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B CA_validateValue:forKey: @ : @ @
bool 				uiwindow_CA_validateValue( uiwindow_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				uiwindow_encodeWithCAMLWriter( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=ddddddddddddddB}
nsobject_t 			uiwindow_CA_interpolateValues( uiwindow_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			uiwindow_CAMLType( uiwindow_t object );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				uiwindow_CA_prepareRenderValue( uiwindow_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			uiwindow_CA_archivingValueForKey( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			uiwindow_CA_roundToIntegerFromValue( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initFromPQLResultSet:error: @ : @ ^@
nsobject_t 			uiwindow_initFromPQLResultSet( uiwindow_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: B supportsRBSXPCSecureCoding @ :
bool 				uiwindow_supportsRBSXPCSecureCoding( uiwindow_t object );

// Signature from Objective-C Runtime: B RBSIsXPCObject @ :
bool 				uiwindow_RBSIsXPCObject( uiwindow_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			uiwindow_NSRepresentation( uiwindow_t object );

// Signature from Objective-C Runtime: @ pep_onMainThread @ :
nsobject_t 			uiwindow_pep_onMainThread( uiwindow_t object );

// Signature from Objective-C Runtime: @ pep_onThread: @ : @
nsobject_t 			uiwindow_pep_onThread( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ pep_onOperationQueue:priority: @ : @ q
nsobject_t 			uiwindow_pep_onOperationQueue( uiwindow_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: @ pep_onMainThreadIfNecessary @ :
nsobject_t 			uiwindow_pep_onMainThreadIfNecessary( uiwindow_t object );

// Signature from Objective-C Runtime: @ pep_afterDelay: @ : d
nsobject_t 			uiwindow_pep_afterDelay( uiwindow_t object, double arg0 );

// Signature from Objective-C Runtime: @ pep_getInvocation: @ : ^@
nsobject_t 			uiwindow_pep_getInvocation( uiwindow_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ stringValueSafe: @ : ^i
nsobject_t 			uiwindow_stringValueSafe( uiwindow_t object, int* arg0 );

// Signature from Objective-C Runtime: r* utf8ValueSafe: @ : ^i
char* 				uiwindow_utf8ValueSafe( uiwindow_t object, int* arg0 );

// Signature from Objective-C Runtime: B boolValueSafe @ :
bool 				uiwindow_boolValueSafe( uiwindow_t object );

// Signature from Objective-C Runtime: q int64ValueSafe @ :
long long 			uiwindow_int64ValueSafe( uiwindow_t object );

// Signature from Objective-C Runtime: d doubleValueSafe @ :
double 				uiwindow_doubleValueSafe( uiwindow_t object );

// Signature from Objective-C Runtime: B un_safeBoolValue @ :
bool 				uiwindow_un_safeBoolValue( uiwindow_t object );

// Signature from Objective-C Runtime: B supportsBSXPCSecureCoding @ :
bool 				uiwindow_supportsBSXPCSecureCoding( uiwindow_t object );

// Signature from Objective-C Runtime: B bs_isPlistableType @ :
bool 				uiwindow_bs_isPlistableType( uiwindow_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			uiwindow_bs_secureEncoded( uiwindow_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			uiwindow_bs_encoded( uiwindow_t object );

// Signature from Objective-C Runtime: v releaseOnMainThread @ :
void 				uiwindow_releaseOnMainThread( uiwindow_t object );

// Signature from Objective-C Runtime: B isProxy @ :
bool 				uiwindow_isProxy( uiwindow_t object );

// Signature from Objective-C Runtime: B isEqual: @ : @
bool 				uiwindow_isEqual( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			uiwindow_class( uiwindow_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			uiwindow_self( uiwindow_t object );

// Signature from Objective-C Runtime: B isKindOfClass: @ : #
bool 				uiwindow_isKindOfClass( uiwindow_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B isMemberOfClass: @ : #
bool 				uiwindow_isMemberOfClass( uiwindow_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B conformsToProtocol: @ : @
bool 				uiwindow_conformsToProtocol( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B respondsToSelector: @ : :
bool 				uiwindow_respondsToSelector( uiwindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			uiwindow_zone( uiwindow_t object );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	uiwindow_hash( uiwindow_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			uiwindow_superclass( uiwindow_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			uiwindow_debugDescription( uiwindow_t object );

// Signature from Objective-C Runtime: B retainWeakReference @ :
bool 				uiwindow_retainWeakReference( uiwindow_t object );

// Signature from Objective-C Runtime: B allowsWeakReference @ :
bool 				uiwindow_allowsWeakReference( uiwindow_t object );

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			uiwindow_copy( uiwindow_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				uiwindow_finalize( uiwindow_t object );

// Signature from Objective-C Runtime: B isFault @ :
bool 				uiwindow_isFault( uiwindow_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				uiwindow_forwardInvocation( uiwindow_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			uiwindow_forwardingTargetForSelector( uiwindow_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			uiwindow_mutableCopy( uiwindow_t object );

// Signature from Objective-C Runtime: v initialize @ :
void 				uiwindow_initialize( );

// Signature from Objective-C Runtime: @ allWindowsIncludingInternalWindows:onlyVisibleWindows: @ : B B
nsobject_t 			uiwindow_allWindowsIncludingInternalWindows( bool arg0, bool arg1 );

// Signature from Objective-C Runtime: # layerClass @ :
nsclass_t 			uiwindow_layerClass( );

// Signature from Objective-C Runtime: @ keyWindow @ :
nsobject_t 			uiwindow_keyWindow( );

// Signature from Objective-C Runtime: v adjustForAccessibilityIfNeeded: @ : @
void 				uiwindow_adjustForAccessibilityIfNeeded( nsobject_t arg0 );

// Signature from Objective-C Runtime: v adjustFocusForAccessibilityIfNeeded: @ : @
void 				uiwindow_adjustFocusForAccessibilityIfNeeded( nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} constrainFrameToScreen: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
CGRect 				uiwindow_constrainFrameToScreen( CGRect arg0 );

// Signature from Objective-C Runtime: ^v createIOSurfaceOnScreen:withContextIds:count:frame:usePurpleGfx:outTransform: @ : @ r^I Q {CGRect={CGPoint=dd}{CGSize=dd}} B ^{CGAffineTransform=dddddd}
void* 				uiwindow_createIOSurfaceOnScreen( nsobject_t arg0, unsigned int* arg1, unsigned long long arg2, CGRect arg3, bool arg4, CGAffineTransform* arg5 );

// Signature from Objective-C Runtime: ^v createIOSurfaceFromScreen: @ : @
void* 				uiwindow_createIOSurfaceFromScreen( nsobject_t arg0 );

// Signature from Objective-C Runtime: ^v createIOSurfaceWithContextIds:count:frame: @ : r^I Q {CGRect={CGPoint=dd}{CGSize=dd}}
void* 				uiwindow_createIOSurfaceWithContextIds( unsigned int* arg0, unsigned long long arg1, CGRect arg2 );

// Signature from Objective-C Runtime: ^v createScreenIOSurface @ :
void* 				uiwindow_createScreenIOSurface( );

// Signature from Objective-C Runtime: ^v createIOSurfaceFromDisplayConfiguration: @ : @
void* 				uiwindow_createIOSurfaceFromDisplayConfiguration( nsobject_t arg0 );

// Signature from Objective-C Runtime: B shouldRestrictViewsForSplashboard @ :
bool 				uiwindow_shouldRestrictViewsForSplashboard( );

// Signature from Objective-C Runtime: v setShouldRestrictViewsForSplashboard: @ : B
void 				uiwindow_setShouldRestrictViewsForSplashboard( bool arg0 );

// Signature from Objective-C Runtime: @ restrictedSplashboardClasses @ :
nsobject_t 			uiwindow_restrictedSplashboardClasses( );

// Signature from Objective-C Runtime: v setRestrictedSplashboardClasses: @ : @
void 				uiwindow_setRestrictedSplashboardClasses( nsobject_t arg0 );

// Signature from Objective-C Runtime: v flush @ :
void 				uiwindow_flush( );

// Signature from Objective-C Runtime: @ appearance @ :
nsobject_t 			uiwindow_appearance( );

// Signature from Objective-C Runtime: v animateWithDuration:delay:options:animations:completion: @ : d d Q @? @?
void 				uiwindow_animateWithDuration( double arg0, double arg1, unsigned long long arg2, nsobject_t* arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: v performWithoutAnimation: @ : @?
void 				uiwindow_performWithoutAnimation( nsobject_t* arg0 );

// Signature from Objective-C Runtime: B areAnimationsEnabled @ :
bool 				uiwindow_areAnimationsEnabled( );

// Signature from Objective-C Runtime: @ appearanceWhenContainedInInstancesOfClasses: @ : @
nsobject_t 			uiwindow_appearanceWhenContainedInInstancesOfClasses( nsobject_t arg0 );

// Signature from Objective-C Runtime: B requiresConstraintBasedLayout @ :
bool 				uiwindow_requiresConstraintBasedLayout( );

// Signature from Objective-C Runtime: v disableAnimation @ :
void 				uiwindow_disableAnimation( );

// Signature from Objective-C Runtime: v enableAnimation @ :
void 				uiwindow_enableAnimation( );

// Signature from Objective-C Runtime: v setAnimationCurve: @ : q
void 				uiwindow_setAnimationCurve( long long arg0 );

// Signature from Objective-C Runtime: v addKeyframeWithRelativeStartTime:relativeDuration:animations: @ : d d @?
void 				uiwindow_addKeyframeWithRelativeStartTime( double arg0, double arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: v animateKeyframesWithDuration:delay:options:animations:completion: @ : d d Q @? @?
void 				uiwindow_animateKeyframesWithDuration( double arg0, double arg1, unsigned long long arg2, nsobject_t* arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: d inheritedAnimationDuration @ :
double 				uiwindow_inheritedAnimationDuration( );

// Signature from Objective-C Runtime: v setAnimationDuration: @ : d
void 				uiwindow_setAnimationDuration( double arg0 );

// Signature from Objective-C Runtime: @ appearanceWhenContainedIn: @ : #
nsobject_t 			uiwindow_appearanceWhenContainedIn( nsclass_t arg0 );

// Signature from Objective-C Runtime: @ appearanceForTraitCollection: @ : @
nsobject_t 			uiwindow_appearanceForTraitCollection( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAnimationsEnabled: @ : B
void 				uiwindow_setAnimationsEnabled( bool arg0 );

// Signature from Objective-C Runtime: v transitionWithView:duration:options:animations:completion: @ : @ d Q @? @?
void 				uiwindow_transitionWithView( nsobject_t arg0, double arg1, unsigned long long arg2, nsobject_t* arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: v conditionallyAnimate:withAnimation:layout:completion: @ : B @? @? @?
void 				uiwindow_conditionallyAnimate( bool arg0, nsobject_t* arg1, nsobject_t* arg2, nsobject_t* arg3 );

// Signature from Objective-C Runtime: q userInterfaceLayoutDirectionForSemanticContentAttribute: @ : q
long long 			uiwindow_userInterfaceLayoutDirectionForSemanticContentAttribute( long long arg0 );

// Signature from Objective-C Runtime: @ appearanceMatchingProperties:whenContainedInInstancesOfClasses: @ : @ @
nsobject_t 			uiwindow_appearanceMatchingProperties( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v setAnimationRepeatCount: @ : f
void 				uiwindow_setAnimationRepeatCount( float arg0 );

// Signature from Objective-C Runtime: v modifyAnimationsWithRepeatCount:autoreverses:animations: @ : d B @?
void 				uiwindow_modifyAnimationsWithRepeatCount( double arg0, bool arg1, nsobject_t* arg2 );

// Signature from Objective-C Runtime: v commitAnimations @ :
void 				uiwindow_commitAnimations( );

// Signature from Objective-C Runtime: v beginAnimations:context: @ : @ ^v
void 				uiwindow_beginAnimations( nsobject_t arg0, void* arg1 );

// Signature from Objective-C Runtime: v setAnimationDelegate: @ : @
void 				uiwindow_setAnimationDelegate( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAnimationDidStopSelector: @ : :
void 				uiwindow_setAnimationDidStopSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v transitionFromView:toView:duration:options:completion: @ : @ @ d Q @?
void 				uiwindow_transitionFromView( nsobject_t arg0, nsobject_t arg1, double arg2, unsigned long long arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: v throttledFlush @ :
void 				uiwindow_throttledFlush( );

// Signature from Objective-C Runtime: v setAnimationRepeatAutoreverses: @ : B
void 				uiwindow_setAnimationRepeatAutoreverses( bool arg0 );

// Signature from Objective-C Runtime: v setAnimationBeginsFromCurrentState: @ : B
void 				uiwindow_setAnimationBeginsFromCurrentState( bool arg0 );

// Signature from Objective-C Runtime: v endAnimations @ :
void 				uiwindow_endAnimations( );

// Signature from Objective-C Runtime: v setAnimationPosition: @ : {CGPoint=dd}
void 				uiwindow_setAnimationPosition( CGPoint arg0 );

// Signature from Objective-C Runtime: v setAnimationDelay: @ : d
void 				uiwindow_setAnimationDelay( double arg0 );

// Signature from Objective-C Runtime: v setAnimationFrameInterval: @ : d
void 				uiwindow_setAnimationFrameInterval( double arg0 );

// Signature from Objective-C Runtime: v setAnimationStartDate: @ : @
void 				uiwindow_setAnimationStartDate( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAnimationStartTime: @ : d
void 				uiwindow_setAnimationStartTime( double arg0 );

// Signature from Objective-C Runtime: v setAnimationPreventsAdditive: @ : B
void 				uiwindow_setAnimationPreventsAdditive( bool arg0 );

// Signature from Objective-C Runtime: v setAnimationAutoreverses: @ : B
void 				uiwindow_setAnimationAutoreverses( bool arg0 );

// Signature from Objective-C Runtime: v setAnimationFromCurrentState: @ : B
void 				uiwindow_setAnimationFromCurrentState( bool arg0 );

// Signature from Objective-C Runtime: v setAnimationTransition:forView:cache: @ : q @ B
void 				uiwindow_setAnimationTransition( long long arg0, nsobject_t arg1, bool arg2 );

// Signature from Objective-C Runtime: v setAnimationWillStartSelector: @ : :
void 				uiwindow_setAnimationWillStartSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v performSystemAnimation:onViews:options:animations:completion: @ : Q @ Q @? @?
void 				uiwindow_performSystemAnimation( unsigned long long arg0, nsobject_t arg1, unsigned long long arg2, nsobject_t* arg3, nsobject_t* arg4 );

// Signature from Objective-C Runtime: @ objectWithRestorationIdentifierPath: @ : @
nsobject_t 			uiwindow_objectWithRestorationIdentifierPath( nsobject_t arg0 );

// Signature from Objective-C Runtime: v clearTextInputContextIdentifier: @ : @
void 				uiwindow_clearTextInputContextIdentifier( nsobject_t arg0 );

// Signature from Objective-C Runtime: v load @ :
void 				uiwindow_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			uiwindow_version( );

// Signature from Objective-C Runtime: B instancesImplementSelector: @ : :
bool 				uiwindow_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				uiwindow_setVersion( long long arg0 );

// Signature from Objective-C Runtime: B automaticallyNotifiesObserversForKey: @ : @
bool 				uiwindow_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* uiwindow_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: B accessInstanceVariablesDirectly @ :
bool 				uiwindow_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			uiwindow_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				uiwindow_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			uiwindow_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			uiwindow_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				uiwindow_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			uiwindow_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			uiwindow_SFSQLiteClassName( );

// Signature from Objective-C Runtime: B CA_automaticallyNotifiesObservers: @ : #
bool 				uiwindow_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: B CA_encodesPropertyConditionally:type: @ : I i
bool 				uiwindow_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			uiwindow_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: B isSelectorExcludedFromWebScript: @ : :
bool 				uiwindow_isSelectorExcludedFromWebScript( nsselector_t arg0 );

// Signature from Objective-C Runtime: B isKeyExcludedFromWebScript: @ : r*
bool 				uiwindow_isKeyExcludedFromWebScript( char* arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			uiwindow_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			uiwindow_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			uiwindow_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			uiwindow_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			uiwindow_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			uiwindow_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			uiwindow_copyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			uiwindow_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			uiwindow_new( );

// Signature from Objective-C Runtime: B resolveInstanceMethod: @ : :
bool 				uiwindow_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: B resolveClassMethod: @ : :
bool 				uiwindow_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
uiwindow_t 			uiwindow_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			uiwindow_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: B isSubclassOfClass: @ : #
bool 				uiwindow_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: B isAncestorOfObject: @ : @
bool 				uiwindow_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: B instancesRespondToSelector: @ : :
bool 				uiwindow_instancesRespondToSelector( nsselector_t arg0 );

#endif