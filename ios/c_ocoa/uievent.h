/*
	This file has been automatically generated by the shimmer industries c-ocoa API generator
	Thus, manual changes to this file will be lost if the file is re-generated.
*/

#ifndef SHIMMER_C_OCOA_UIEVENT_HEADER
#define SHIMMER_C_OCOA_UIEVENT_HEADER

typedef void*	uievent_t;
#include "c_ocoa_types.h"

// Signature from Objective-C Runtime: v dealloc @ :
void 				uievent_dealloc( uievent_t object );

// Signature from Objective-C Runtime: q type @ :
long long 			uievent_type( uievent_t object );

// Signature from Objective-C Runtime: d timestamp @ :
double 				uievent_timestamp( uievent_t object );

// Signature from Objective-C Runtime: q subtype @ :
long long 			uievent_subtype( uievent_t object );

// Signature from Objective-C Runtime: q buttonMask @ :
long long 			uievent_buttonMask( uievent_t object );

// Signature from Objective-C Runtime: q modifierFlags @ :
long long 			uievent_modifierFlags( uievent_t object );

// Signature from Objective-C Runtime: @ allTouches @ :
nsobject_t 			uievent_allTouches( uievent_t object );

// Signature from Objective-C Runtime: @ touchesForGestureRecognizer: @ : @
nsobject_t 			uievent_touchesForGestureRecognizer( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ touchesForView: @ : @
nsobject_t 			uievent_touchesForView( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ coalescedTouchesForTouch: @ : @
nsobject_t 			uievent_coalescedTouchesForTouch( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ touchesForWindow: @ : @
nsobject_t 			uievent_touchesForWindow( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ predictedTouchesForTouch: @ : @
nsobject_t 			uievent_predictedTouchesForTouch( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForCoder @ :
nsclass_t 			uievent_classForCoder( uievent_t object );

// Signature from Objective-C Runtime: @ replacementObjectForCoder: @ : @
nsobject_t 			uievent_replacementObjectForCoder( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ awakeAfterUsingCoder: @ : @
nsobject_t 			uievent_awakeAfterUsingCoder( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B implementsSelector: @ : :
bool 				uievent_implementsSelector( uievent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: v setObservationInfo: @ : ^v
void 				uievent_setObservationInfo( uievent_t object, void* arg0 );

// Signature from Objective-C Runtime: v setValue:forKey: @ : @ @
void 				uievent_setValue( uievent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ replacementObjectForPortCoder: @ : @
nsobject_t 			uievent_replacementObjectForPortCoder( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChangeValueForKey: @ : @
void 				uievent_willChangeValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v didChangeValueForKey: @ : @
void 				uievent_didChangeValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ replacementObjectForArchiver: @ : @
nsobject_t 			uievent_replacementObjectForArchiver( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForArchiver @ :
nsclass_t 			uievent_classForArchiver( uievent_t object );

// Signature from Objective-C Runtime: @ valueForKey: @ : @
nsobject_t 			uievent_valueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # classForKeyedArchiver @ :
nsclass_t 			uievent_classForKeyedArchiver( uievent_t object );

// Signature from Objective-C Runtime: @ replacementObjectForKeyedArchiver: @ : @
nsobject_t 			uievent_replacementObjectForKeyedArchiver( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} methodDescriptionForSelector: @ : :
objc_method_description* uievent_methodDescriptionForSelector( uievent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ valueForKeyPath: @ : @
nsobject_t 			uievent_valueForKeyPath( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKeyPath: @ : @
nsobject_t 			uievent_mutableArrayValueForKeyPath( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKeyPath: @ : @
nsobject_t 			uievent_mutableOrderedSetValueForKeyPath( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKeyPath: @ : @
nsobject_t 			uievent_mutableSetValueForKeyPath( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserver:forObservableKeyPath: @ : @ @
nsobject_t 			uievent_addObserver( uievent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v removeObservation: @ : @
void 				uievent_removeObservation( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedValue: @ : @
void 				uievent_receiveObservedValue( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v receiveObservedError: @ : @
void 				uievent_receiveObservedError( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v finishObserving @ :
void 				uievent_finishObserving( uievent_t object );

// Signature from Objective-C Runtime: v setObservation:forObservingKeyPath: @ : @ @
void 				uievent_setObservation( uievent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v observeValueForKeyPath:ofObject:change:context: @ : @ @ @ ^v
void 				uievent_observeValueForKeyPath( uievent_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, void* arg3 );

// Signature from Objective-C Runtime: v removeObserver:forKeyPath:context: @ : @ @ ^v
void 				uievent_removeObserver( uievent_t object, nsobject_t arg0, nsobject_t arg1, void* arg2 );

// Signature from Objective-C Runtime: @ addChainedObservers: @ : @
nsobject_t 			uievent_addChainedObservers( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ addObserverBlock: @ : @?
nsobject_t 			uievent_addObserverBlock( uievent_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ addObservationTransformer: @ : @?
nsobject_t 			uievent_addObservationTransformer( uievent_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ valueForUndefinedKey: @ : @
nsobject_t 			uievent_valueForUndefinedKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setNilValueForKey: @ : @
void 				uievent_setNilValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableArrayValueForKey: @ : @
nsobject_t 			uievent_mutableArrayValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableOrderedSetValueForKey: @ : @
nsobject_t 			uievent_mutableOrderedSetValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ mutableSetValueForKey: @ : @
nsobject_t 			uievent_mutableSetValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ dictionaryWithValuesForKeys: @ : @
nsobject_t 			uievent_dictionaryWithValuesForKeys( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setValuesForKeysWithDictionary: @ : @
void 				uievent_setValuesForKeysWithDictionary( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v willChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uievent_willChange( uievent_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: v didChange:valuesAtIndexes:forKey: @ : Q @ @
void 				uievent_didChange( uievent_t object, unsigned long long arg0, nsobject_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: ^v observationInfo @ :
void* 				uievent_observationInfo( uievent_t object );

// Signature from Objective-C Runtime: @ autoContentAccessingProxy @ :
nsobject_t 			uievent_autoContentAccessingProxy( uievent_t object );

// Signature from Objective-C Runtime: # classForPortCoder @ :
nsclass_t 			uievent_classForPortCoder( uievent_t object );

// Signature from Objective-C Runtime: v performSelector:withObject:afterDelay:inModes: @ : : @ d @
void 				uievent_performSelector( uievent_t object, nsselector_t arg0, nsobject_t arg1, double arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorOnMainThread:withObject:waitUntilDone:modes: @ : : @ B @
void 				uievent_performSelectorOnMainThread( uievent_t object, nsselector_t arg0, nsobject_t arg1, bool arg2, nsobject_t arg3 );

// Signature from Objective-C Runtime: v performSelectorInBackground:withObject: @ : : @
void 				uievent_performSelectorInBackground( uievent_t object, nsselector_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: B isNSDate__ @ :
bool 				uievent_isNSDate__( uievent_t object );

// Signature from Objective-C Runtime: B isNSString__ @ :
bool 				uievent_isNSString__( uievent_t object );

// Signature from Objective-C Runtime: B isNSCFConstantString__ @ :
bool 				uievent_isNSCFConstantString__( uievent_t object );

// Signature from Objective-C Runtime: B isNSNumber__ @ :
bool 				uievent_isNSNumber__( uievent_t object );

// Signature from Objective-C Runtime: B isNSArray__ @ :
bool 				uievent_isNSArray__( uievent_t object );

// Signature from Objective-C Runtime: B isNSDictionary__ @ :
bool 				uievent_isNSDictionary__( uievent_t object );

// Signature from Objective-C Runtime: B isNSData__ @ :
bool 				uievent_isNSData__( uievent_t object );

// Signature from Objective-C Runtime: B isNSObject__ @ :
bool 				uievent_isNSObject__( uievent_t object );

// Signature from Objective-C Runtime: B isNSOrderedSet__ @ :
bool 				uievent_isNSOrderedSet__( uievent_t object );

// Signature from Objective-C Runtime: B isNSSet__ @ :
bool 				uievent_isNSSet__( uievent_t object );

// Signature from Objective-C Runtime: B isNSTimeZone__ @ :
bool 				uievent_isNSTimeZone__( uievent_t object );

// Signature from Objective-C Runtime: B isNSValue__ @ :
bool 				uievent_isNSValue__( uievent_t object );

// Signature from Objective-C Runtime: @ description @ :
nsobject_t 			uievent_description( uievent_t object );

// Signature from Objective-C Runtime: v doesNotRecognizeSelector: @ : :
void 				uievent_doesNotRecognizeSelector( uievent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ methodSignatureForSelector: @ : :
nsobject_t 			uievent_methodSignatureForSelector( uievent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ className @ :
nsobject_t 			uievent_className( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityLabel @ :
nsobject_t 			uievent_accessibilityLabel( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityLabel: @ : @
void 				uievent_setAccessibilityLabel( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityIdentifier: @ : @
void 				uievent_setAccessibilityIdentifier( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: {CGRect={CGPoint=dd}{CGSize=dd}} accessibilityFrame @ :
CGRect 				uievent_accessibilityFrame( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityViewIsModal @ :
nsobject_t 			uievent_storedAccessibilityViewIsModal( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityElementsHidden @ :
nsobject_t 			uievent_storedAccessibilityElementsHidden( uievent_t object );

// Signature from Objective-C Runtime: @ storedShouldGroupAccessibilityChildren @ :
nsobject_t 			uievent_storedShouldGroupAccessibilityChildren( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityNavigationStyle @ :
nsobject_t 			uievent_storedAccessibilityNavigationStyle( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityRespondsToUserInteraction @ :
nsobject_t 			uievent_storedAccessibilityRespondsToUserInteraction( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedLabel @ :
nsobject_t 			uievent_accessibilityAttributedLabel( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityValue @ :
nsobject_t 			uievent_accessibilityValue( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedValue @ :
nsobject_t 			uievent_accessibilityAttributedValue( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityHint @ :
nsobject_t 			uievent_accessibilityHint( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedHint @ :
nsobject_t 			uievent_accessibilityAttributedHint( uievent_t object );

// Signature from Objective-C Runtime: {CGPoint=dd} accessibilityActivationPoint @ :
CGPoint 			uievent_accessibilityActivationPoint( uievent_t object );

// Signature from Objective-C Runtime: Q accessibilityTraits @ :
unsigned long long 	uievent_accessibilityTraits( uievent_t object );

// Signature from Objective-C Runtime: B isAccessibilityElement @ :
bool 				uievent_isAccessibilityElement( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityContainer @ :
nsobject_t 			uievent_accessibilityContainer( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityLanguage @ :
nsobject_t 			uievent_accessibilityLanguage( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityPath @ :
nsobject_t 			uievent_accessibilityPath( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityViewIsModal @ :
bool 				uievent_accessibilityViewIsModal( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityElementsHidden @ :
bool 				uievent_accessibilityElementsHidden( uievent_t object );

// Signature from Objective-C Runtime: B shouldGroupAccessibilityChildren @ :
bool 				uievent_shouldGroupAccessibilityChildren( uievent_t object );

// Signature from Objective-C Runtime: q accessibilityNavigationStyle @ :
long long 			uievent_accessibilityNavigationStyle( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityRespondsToUserInteraction @ :
bool 				uievent_accessibilityRespondsToUserInteraction( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityUserInputLabels @ :
nsobject_t 			uievent_accessibilityUserInputLabels( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityAttributedUserInputLabels @ :
nsobject_t 			uievent_accessibilityAttributedUserInputLabels( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityIdentifier @ :
nsobject_t 			uievent_storedAccessibilityIdentifier( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityTraits @ :
nsobject_t 			uievent_storedAccessibilityTraits( uievent_t object );

// Signature from Objective-C Runtime: @ storedIsAccessibilityElement @ :
nsobject_t 			uievent_storedIsAccessibilityElement( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityFrame @ :
nsobject_t 			uievent_storedAccessibilityFrame( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityActivationPoint @ :
nsobject_t 			uievent_storedAccessibilityActivationPoint( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityHeaderElements @ :
nsobject_t 			uievent_accessibilityHeaderElements( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityElementsHidden: @ : B
void 				uievent_setAccessibilityElementsHidden( uievent_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityViewIsModal: @ : B
void 				uievent_setAccessibilityViewIsModal( uievent_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedLabel: @ : @
void 				uievent_setAccessibilityAttributedLabel( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityValue: @ : @
void 				uievent_setAccessibilityValue( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedValue: @ : @
void 				uievent_setAccessibilityAttributedValue( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHint: @ : @
void 				uievent_setAccessibilityHint( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedHint: @ : @
void 				uievent_setAccessibilityAttributedHint( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityFrame: @ : {CGRect={CGPoint=dd}{CGSize=dd}}
void 				uievent_setAccessibilityFrame( uievent_t object, CGRect arg0 );

// Signature from Objective-C Runtime: v setAccessibilityPath: @ : @
void 				uievent_setAccessibilityPath( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityActivationPoint: @ : {CGPoint=dd}
void 				uievent_setAccessibilityActivationPoint( uievent_t object, CGPoint arg0 );

// Signature from Objective-C Runtime: v setAccessibilityTraits: @ : Q
void 				uievent_setAccessibilityTraits( uievent_t object, unsigned long long arg0 );

// Signature from Objective-C Runtime: v setIsAccessibilityElement: @ : B
void 				uievent_setIsAccessibilityElement( uievent_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityContainer: @ : @
void 				uievent_setAccessibilityContainer( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityLanguage: @ : @
void 				uievent_setAccessibilityLanguage( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setShouldGroupAccessibilityChildren: @ : B
void 				uievent_setShouldGroupAccessibilityChildren( uievent_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityNavigationStyle: @ : q
void 				uievent_setAccessibilityNavigationStyle( uievent_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityRespondsToUserInteraction: @ : B
void 				uievent_setAccessibilityRespondsToUserInteraction( uievent_t object, bool arg0 );

// Signature from Objective-C Runtime: v setAccessibilityUserInputLabels: @ : @
void 				uievent_setAccessibilityUserInputLabels( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityAttributedUserInputLabels: @ : @
void 				uievent_setAccessibilityAttributedUserInputLabels( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityTextualContext @ :
nsobject_t 			uievent_accessibilityTextualContext( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityTextualContext: @ : @
void 				uievent_setAccessibilityTextualContext( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v setAccessibilityHeaderElements: @ : @
void 				uievent_setAccessibilityHeaderElements( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v accessibilityElementDidBecomeFocused @ :
void 				uievent_accessibilityElementDidBecomeFocused( uievent_t object );

// Signature from Objective-C Runtime: v accessibilityElementDidLoseFocus @ :
void 				uievent_accessibilityElementDidLoseFocus( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityElementIsFocused @ :
bool 				uievent_accessibilityElementIsFocused( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityAssistiveTechnologyFocusedIdentifiers @ :
nsobject_t 			uievent_accessibilityAssistiveTechnologyFocusedIdentifiers( uievent_t object );

// Signature from Objective-C Runtime: v accessibilityIncrement @ :
void 				uievent_accessibilityIncrement( uievent_t object );

// Signature from Objective-C Runtime: v accessibilityDecrement @ :
void 				uievent_accessibilityDecrement( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityScroll: @ : q
bool 				uievent_accessibilityScroll( uievent_t object, long long arg0 );

// Signature from Objective-C Runtime: B accessibilityPerformEscape @ :
bool 				uievent_accessibilityPerformEscape( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityPerformMagicTap @ :
bool 				uievent_accessibilityPerformMagicTap( uievent_t object );

// Signature from Objective-C Runtime: B accessibilityActivate @ :
bool 				uievent_accessibilityActivate( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityCustomActions: @ : @
void 				uievent_setAccessibilityCustomActions( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomActions @ :
nsobject_t 			uievent_accessibilityCustomActions( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityIdentification @ :
nsobject_t 			uievent_accessibilityIdentification( uievent_t object );

// Signature from Objective-C Runtime: v accessibilitySetIdentification: @ : @
void 				uievent_accessibilitySetIdentification( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityIdentifier @ :
nsobject_t 			uievent_accessibilityIdentifier( uievent_t object );

// Signature from Objective-C Runtime: Q defaultAccessibilityTraits @ :
unsigned long long 	uievent_defaultAccessibilityTraits( uievent_t object );

// Signature from Objective-C Runtime: B isAccessibilityElementByDefault @ :
bool 				uievent_isAccessibilityElementByDefault( uievent_t object );

// Signature from Objective-C Runtime: B isElementAccessibilityExposedToInterfaceBuilder @ :
bool 				uievent_isElementAccessibilityExposedToInterfaceBuilder( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityLocalizedStringKey @ :
nsobject_t 			uievent_accessibilityLocalizedStringKey( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityDragSourceDescriptors: @ : @
void 				uievent_setAccessibilityDragSourceDescriptors( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDragSourceDescriptors @ :
nsobject_t 			uievent_accessibilityDragSourceDescriptors( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityDropPointDescriptors: @ : @
void 				uievent_setAccessibilityDropPointDescriptors( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityDropPointDescriptors @ :
nsobject_t 			uievent_accessibilityDropPointDescriptors( uievent_t object );

// Signature from Objective-C Runtime: @ storedAccessibilityContainerType @ :
nsobject_t 			uievent_storedAccessibilityContainerType( uievent_t object );

// Signature from Objective-C Runtime: q accessibilityElementCount @ :
long long 			uievent_accessibilityElementCount( uievent_t object );

// Signature from Objective-C Runtime: @ accessibilityElementAtIndex: @ : q
nsobject_t 			uievent_accessibilityElementAtIndex( uievent_t object, long long arg0 );

// Signature from Objective-C Runtime: q indexOfAccessibilityElement: @ : @
long long 			uievent_indexOfAccessibilityElement( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityElements @ :
nsobject_t 			uievent_accessibilityElements( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityElements: @ : @
void 				uievent_setAccessibilityElements( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: q accessibilityContainerType @ :
long long 			uievent_accessibilityContainerType( uievent_t object );

// Signature from Objective-C Runtime: v setAccessibilityContainerType: @ : q
void 				uievent_setAccessibilityContainerType( uievent_t object, long long arg0 );

// Signature from Objective-C Runtime: v setAccessibilityCustomRotors: @ : @
void 				uievent_setAccessibilityCustomRotors( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ accessibilityCustomRotors @ :
nsobject_t 			uievent_accessibilityCustomRotors( uievent_t object );

// Signature from Objective-C Runtime: @ uiPresentationManager @ :
nsobject_t 			uievent_uiPresentationManager( uievent_t object );

// Signature from Objective-C Runtime: v awakeFromNib @ :
void 				uievent_awakeFromNib( uievent_t object );

// Signature from Objective-C Runtime: B conformsToProtocolCached: @ : @
bool 				uievent_conformsToProtocolCached( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: v prepareForInterfaceBuilder @ :
void 				uievent_prepareForInterfaceBuilder( uievent_t object );

// Signature from Objective-C Runtime: d CA_distanceToValue: @ : @
double 				uievent_CA_distanceToValue( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValueWithColorspace: @ : ^{CGColorSpace=}
Object* 			uievent_CA_copyRenderValueWithColorspace( uievent_t object, CGColorSpace* arg0 );

// Signature from Objective-C Runtime: ^{Object=^^?{Atomic={?=i}}I} CA_copyRenderValue @ :
Object* 			uievent_CA_copyRenderValue( uievent_t object );

// Signature from Objective-C Runtime: @ CA_interpolateValue:byFraction: @ : @ f
nsobject_t 			uievent_CA_interpolateValue( uievent_t object, nsobject_t arg0, float arg1 );

// Signature from Objective-C Runtime: @ CA_addValue:multipliedBy: @ : @ i
nsobject_t 			uievent_CA_addValue( uievent_t object, nsobject_t arg0, int arg1 );

// Signature from Objective-C Runtime: B CAMLTypeSupportedForKey: @ : @
bool 				uievent_CAMLTypeSupportedForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CAMLTypeForKey: @ : @
nsobject_t 			uievent_CAMLTypeForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B CA_validateValue:forKey: @ : @ @
bool 				uievent_CA_validateValue( uievent_t object, nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: v encodeWithCAMLWriter: @ : @
void 				uievent_encodeWithCAMLWriter( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_interpolateValues:::interpolator: @ : @ @ @ r^{ValueInterpolator=ddddddddddddddB}
nsobject_t 			uievent_CA_interpolateValues( uievent_t object, nsobject_t arg0, nsobject_t arg1, nsobject_t arg2, ValueInterpolator* arg3 );

// Signature from Objective-C Runtime: @ CAMLType @ :
nsobject_t 			uievent_CAMLType( uievent_t object );

// Signature from Objective-C Runtime: v CA_prepareRenderValue @ :
void 				uievent_CA_prepareRenderValue( uievent_t object );

// Signature from Objective-C Runtime: @ CA_archivingValueForKey: @ : @
nsobject_t 			uievent_CA_archivingValueForKey( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ CA_roundToIntegerFromValue: @ : @
nsobject_t 			uievent_CA_roundToIntegerFromValue( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ initFromPQLResultSet:error: @ : @ ^@
nsobject_t 			uievent_initFromPQLResultSet( uievent_t object, nsobject_t arg0, nsobject_t* arg1 );

// Signature from Objective-C Runtime: B supportsRBSXPCSecureCoding @ :
bool 				uievent_supportsRBSXPCSecureCoding( uievent_t object );

// Signature from Objective-C Runtime: B RBSIsXPCObject @ :
bool 				uievent_RBSIsXPCObject( uievent_t object );

// Signature from Objective-C Runtime: @ NSRepresentation @ :
nsobject_t 			uievent_NSRepresentation( uievent_t object );

// Signature from Objective-C Runtime: @ pep_onMainThread @ :
nsobject_t 			uievent_pep_onMainThread( uievent_t object );

// Signature from Objective-C Runtime: @ pep_onThread: @ : @
nsobject_t 			uievent_pep_onThread( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ pep_onOperationQueue:priority: @ : @ q
nsobject_t 			uievent_pep_onOperationQueue( uievent_t object, nsobject_t arg0, long long arg1 );

// Signature from Objective-C Runtime: @ pep_onMainThreadIfNecessary @ :
nsobject_t 			uievent_pep_onMainThreadIfNecessary( uievent_t object );

// Signature from Objective-C Runtime: @ pep_afterDelay: @ : d
nsobject_t 			uievent_pep_afterDelay( uievent_t object, double arg0 );

// Signature from Objective-C Runtime: @ pep_getInvocation: @ : ^@
nsobject_t 			uievent_pep_getInvocation( uievent_t object, nsobject_t* arg0 );

// Signature from Objective-C Runtime: @ stringValueSafe: @ : ^i
nsobject_t 			uievent_stringValueSafe( uievent_t object, int* arg0 );

// Signature from Objective-C Runtime: r* utf8ValueSafe: @ : ^i
char* 				uievent_utf8ValueSafe( uievent_t object, int* arg0 );

// Signature from Objective-C Runtime: B boolValueSafe @ :
bool 				uievent_boolValueSafe( uievent_t object );

// Signature from Objective-C Runtime: q int64ValueSafe @ :
long long 			uievent_int64ValueSafe( uievent_t object );

// Signature from Objective-C Runtime: d doubleValueSafe @ :
double 				uievent_doubleValueSafe( uievent_t object );

// Signature from Objective-C Runtime: B un_safeBoolValue @ :
bool 				uievent_un_safeBoolValue( uievent_t object );

// Signature from Objective-C Runtime: B supportsBSXPCSecureCoding @ :
bool 				uievent_supportsBSXPCSecureCoding( uievent_t object );

// Signature from Objective-C Runtime: B bs_isPlistableType @ :
bool 				uievent_bs_isPlistableType( uievent_t object );

// Signature from Objective-C Runtime: @ bs_secureEncoded @ :
nsobject_t 			uievent_bs_secureEncoded( uievent_t object );

// Signature from Objective-C Runtime: @ bs_encoded @ :
nsobject_t 			uievent_bs_encoded( uievent_t object );

// Signature from Objective-C Runtime: v releaseOnMainThread @ :
void 				uievent_releaseOnMainThread( uievent_t object );

// Signature from Objective-C Runtime: B isProxy @ :
bool 				uievent_isProxy( uievent_t object );

// Signature from Objective-C Runtime: Q retainCount @ :
unsigned long long 	uievent_retainCount( uievent_t object );

// Signature from Objective-C Runtime: B isEqual: @ : @
bool 				uievent_isEqual( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: # class @ :
nsclass_t 			uievent_class( uievent_t object );

// Signature from Objective-C Runtime: @ self @ :
nsobject_t 			uievent_self( uievent_t object );

// Signature from Objective-C Runtime: B isKindOfClass: @ : #
bool 				uievent_isKindOfClass( uievent_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B isMemberOfClass: @ : #
bool 				uievent_isMemberOfClass( uievent_t object, nsclass_t arg0 );

// Signature from Objective-C Runtime: B conformsToProtocol: @ : @
bool 				uievent_conformsToProtocol( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: B respondsToSelector: @ : :
bool 				uievent_respondsToSelector( uievent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ retain @ :
nsobject_t 			uievent_retain( uievent_t object );

// Signature from Objective-C Runtime: @ autorelease @ :
nsobject_t 			uievent_autorelease( uievent_t object );

// Signature from Objective-C Runtime: ^{_NSZone=} zone @ :
_NSZone* 			uievent_zone( uievent_t object );

// Signature from Objective-C Runtime: Q hash @ :
unsigned long long 	uievent_hash( uievent_t object );

// Signature from Objective-C Runtime: # superclass @ :
nsclass_t 			uievent_superclass( uievent_t object );

// Signature from Objective-C Runtime: @ debugDescription @ :
nsobject_t 			uievent_debugDescription( uievent_t object );

// Signature from Objective-C Runtime: @ init @ :
nsobject_t 			uievent_init( uievent_t object );

// Signature from Objective-C Runtime: B retainWeakReference @ :
bool 				uievent_retainWeakReference( uievent_t object );

// Signature from Objective-C Runtime: B allowsWeakReference @ :
bool 				uievent_allowsWeakReference( uievent_t object );

// Signature from Objective-C Runtime: @ copy @ :
nsobject_t 			uievent_copy( uievent_t object );

// Signature from Objective-C Runtime: v finalize @ :
void 				uievent_finalize( uievent_t object );

// Signature from Objective-C Runtime: B isFault @ :
bool 				uievent_isFault( uievent_t object );

// Signature from Objective-C Runtime: v forwardInvocation: @ : @
void 				uievent_forwardInvocation( uievent_t object, nsobject_t arg0 );

// Signature from Objective-C Runtime: @ forwardingTargetForSelector: @ : :
nsobject_t 			uievent_forwardingTargetForSelector( uievent_t object, nsselector_t arg0 );

// Signature from Objective-C Runtime: @ mutableCopy @ :
nsobject_t 			uievent_mutableCopy( uievent_t object );

// Signature from Objective-C Runtime: v load @ :
void 				uievent_load( );

// Signature from Objective-C Runtime: q version @ :
long long 			uievent_version( );

// Signature from Objective-C Runtime: B instancesImplementSelector: @ : :
bool 				uievent_instancesImplementSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: v setVersion: @ : q
void 				uievent_setVersion( long long arg0 );

// Signature from Objective-C Runtime: B automaticallyNotifiesObserversForKey: @ : @
bool 				uievent_automaticallyNotifiesObserversForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: ^{objc_method_description=:*} instanceMethodDescriptionForSelector: @ : :
objc_method_description* uievent_instanceMethodDescriptionForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: B accessInstanceVariablesDirectly @ :
bool 				uievent_accessInstanceVariablesDirectly( );

// Signature from Objective-C Runtime: @ keyPathsForValuesAffectingValueForKey: @ : @
nsobject_t 			uievent_keyPathsForValuesAffectingValueForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: v setKeys:triggerChangeNotificationsForDependentKey: @ : @ @
void 				uievent_setKeys( nsobject_t arg0, nsobject_t arg1 );

// Signature from Objective-C Runtime: @ classFallbacksForKeyedArchiver @ :
nsobject_t 			uievent_classFallbacksForKeyedArchiver( );

// Signature from Objective-C Runtime: # classForKeyedUnarchiver @ :
nsclass_t 			uievent_classForKeyedUnarchiver( );

// Signature from Objective-C Runtime: v cancelPreviousPerformRequestsWithTarget:selector:object: @ : @ : @
void 				uievent_cancelPreviousPerformRequestsWithTarget( nsobject_t arg0, nsselector_t arg1, nsobject_t arg2 );

// Signature from Objective-C Runtime: @ instanceMethodSignatureForSelector: @ : :
nsobject_t 			uievent_instanceMethodSignatureForSelector( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ SFSQLiteClassName @ :
nsobject_t 			uievent_SFSQLiteClassName( );

// Signature from Objective-C Runtime: B CA_automaticallyNotifiesObservers: @ : #
bool 				uievent_CA_automaticallyNotifiesObservers( nsclass_t arg0 );

// Signature from Objective-C Runtime: B CA_encodesPropertyConditionally:type: @ : I i
bool 				uievent_CA_encodesPropertyConditionally( unsigned int arg0, int arg1 );

// Signature from Objective-C Runtime: @ CA_CAMLPropertyForKey: @ : @
nsobject_t 			uievent_CA_CAMLPropertyForKey( nsobject_t arg0 );

// Signature from Objective-C Runtime: B isSelectorExcludedFromWebScript: @ : :
bool 				uievent_isSelectorExcludedFromWebScript( nsselector_t arg0 );

// Signature from Objective-C Runtime: B isKeyExcludedFromWebScript: @ : r*
bool 				uievent_isKeyExcludedFromWebScript( char* arg0 );

// Signature from Objective-C Runtime: @ bs_secureDecodedFromData: @ : @
nsobject_t 			uievent_bs_secureDecodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureDataFromObject: @ : @
nsobject_t 			uievent_bs_secureDataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_secureObjectFromData:ofClass: @ : @ #
nsobject_t 			uievent_bs_secureObjectFromData( nsobject_t arg0, nsclass_t arg1 );

// Signature from Objective-C Runtime: @ bs_dataFromObject: @ : @
nsobject_t 			uievent_bs_dataFromObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_objectFromData: @ : @
nsobject_t 			uievent_bs_objectFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ bs_decodedFromData: @ : @
nsobject_t 			uievent_bs_decodedFromData( nsobject_t arg0 );

// Signature from Objective-C Runtime: @ copyWithZone: @ : ^{_NSZone=}
nsobject_t 			uievent_copyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: @ allocWithZone: @ : ^{_NSZone=}
nsobject_t 			uievent_allocWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: v initialize @ :
void 				uievent_initialize( );

// Signature from Objective-C Runtime: @ new @ :
nsobject_t 			uievent_new( );

// Signature from Objective-C Runtime: B resolveInstanceMethod: @ : :
bool 				uievent_resolveInstanceMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: B resolveClassMethod: @ : :
bool 				uievent_resolveClassMethod( nsselector_t arg0 );

// Signature from Objective-C Runtime: @ alloc @ :
uievent_t 			uievent_alloc( );

// Signature from Objective-C Runtime: @ mutableCopyWithZone: @ : ^{_NSZone=}
nsobject_t 			uievent_mutableCopyWithZone( _NSZone* arg0 );

// Signature from Objective-C Runtime: B isSubclassOfClass: @ : #
bool 				uievent_isSubclassOfClass( nsclass_t arg0 );

// Signature from Objective-C Runtime: B isAncestorOfObject: @ : @
bool 				uievent_isAncestorOfObject( nsobject_t arg0 );

// Signature from Objective-C Runtime: B instancesRespondToSelector: @ : :
bool 				uievent_instancesRespondToSelector( nsselector_t arg0 );

#endif